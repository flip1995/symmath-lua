{
	{hidden=false, input="table = require 'ext.table'\n;", output="", outputtype="html", uid=61},
	{hidden=false, input="symmath.implicitVars = true\nsymmath.fixVariableNames = false\9-- looks good but gives latex formatting errors\n--symmath.fixVariableNames = true\9\9-- messes up latex of variable names but does render\nsymmath.simplifyConstantPowers = true", output="true", outputtype="html", uid=5},
	{hidden=false, input="function relerr(a,b)\n\9local d = math.abs(a - b)\n\9return d/a, d/b\nend\n\nfunction printrelerr(a,b)\n\9local ra, rb = relerr(a, b)\n\9print('within '..(100*ra)..'% of '..a)\n\9--print((100*ra)..'%, '..(100*rb)..'%')\nend\n\n-- https://en.wikipedia.org/wiki/Ellipse#Circumference\n\nfunction ellipseCircumferenceO3(a,b)\n\9local h = (a - b)^2 / (a + b)^2\n\9return math.pi * (3 * (a + b) - math.sqrt((3 * a + b) * (a + 3 * b)))\nend\n\nfunction ellipseCircumferenceO5(a,b)\n\9local h = (a - b)^2 / (a + b)^2\n\9return math.pi * (a + b) * (1 + 3 * h / (10 + math.sqrt(4 - 3 * h)))\nend\n", output="", outputtype="html", uid=60},
	{hidden=false, input="-- physical constants", output="", outputtype="html", uid=63},
	{hidden=false, input="c_in_SI = c:eq(299792458 * (m/s))", output="${c} = {{{299792458}} \\cdot {{{\\frac{1}{s}} {m}}}}$", outputtype="html", uid=1},
	{hidden=false, input="G_in_SI = G:eq(6.67408e-11 * (m^3 / (kg * s^2)))", output="${G} = {{{6.67408\\cdot{10^{-11}}}} \\cdot {{\\frac{{m}^{3}}{{{kg}} \\cdot {{{s}^{2}}}}}}}$", outputtype="html", uid=64},
	{hidden=false, input="-- Earth properties", output="", outputtype="html", uid=57},
	{hidden=false, input="-- Earth inverse-flattening\nf_earth = var'f_{earth}'\nf_earth_def = f_earth:eq(frac(1, 298.257223563))\9-- https://en.wikipedia.org/wiki/Earth_ellipsoid#Ellipsoid_parameters\nprint(f_earth_def)\n-- f = (a - b) / a <-> a f = a - b <-> b = a (1 - f)\n;", output="${{f_{earth}}} = {\\frac{1}{298.257223563}}$<br>\n", outputtype="html", uid=67},
	{hidden=false, input="r_earth_equ = var'r_{earth}^{equ}'\nr_earth_equ_in_m = r_earth_equ:eq(6378.1370e+3 * m)\9-- https://en.wikipedia.org/wiki/Earth_radius\nprint(r_earth_equ_in_m)\n;", output="${{r_{earth}^{equ}}} = {{{6378137}} {{m}}}$<br>\n", outputtype="html", uid=69},
	{hidden=false, input="-- make sure the radius and circumference calculations are proportional\nprint((2 * math.pi * r_earth_equ_in_m:rhs())()) -- 2 pi * the radius listed in \"Earth radius\" wikipedia page\nprint(40075017 / (2 * math.pi)) -- 1/(2pi) * the circumference listed ... where?", output="${{40075016.685578}} {{m}}$<br>\n6378137.0500417<br>\n", outputtype="html", uid=68},
	{hidden=false, input="C_earth_equ = var'C_{earth}^{equ}'\n--C_earth_equ_in_m = C_earth_equ:eq(40075017 * m)\9-- from data source ... same?\nC_earth_equ_in_m = C_earth_equ:eq((2 * math.pi * r_earth_equ_in_m:rhs())()) -- based on equatorial radius\n\n-- should be equiatorial radius of 6378.136e+3 m\nprint(C_earth_equ_in_m)\nprintrelerr(40000000, (C_earth_equ_in_m:rhs()/m)().value)\n;", output="${{C_{earth}^{equ}}} = {{{40075016.685578}} {{m}}}$<br>\nwithin 0.18754171394622% of 40000000<br>\n", outputtype="html", uid=4},
	{hidden=false, input="-- make sure the polar and equatorial calculations are proportional", output="", outputtype="html", uid=70},
	{hidden=false, input="local a = (r_earth_equ_in_m:rhs()/m)().value\nlocal f = f_earth_def():rhs().value\nlocal b = a * (1 - f)\nprint(ellipseCircumferenceO3(a,b))\nprint(ellipseCircumferenceO5(a,b))\n;", output="40007862.917251<br>\n40007862.917251<br>\n", outputtype="html", uid=71},
	{hidden=false, input="local a = (r_earth_equ_in_m:rhs()/m)().value\nlocal f = f_earth_def():rhs().value\nlocal b = a * (1 - f)\n\nr_earth_polar = var'r_{earth}^{polar}'\nr_earth_polar_in_m = r_earth_polar:eq(b * m)\n\nlocal C_earth_polar_value = ellipseCircumferenceO5(a,b)\9-- TODO call this _in_m, and rename _in_m to _def or _eqn .. ?\n\nC_earth_polar = var'C_{earth}^{polar}'\n--C_earth_polar_in_m = C_earth_polar:eq(40007863 * m)\9\9\9\9-- from page somewhere ?\nC_earth_polar_in_m = C_earth_polar:eq(C_earth_polar_value * m)\9\9-- from equatorial ... and a bit closer to our whole number\nprint(C_earth_polar_in_m)\nprintrelerr(40000000, (C_earth_polar_in_m:rhs()/m)().value)\n;", output="${{C_{earth}^{polar}}} = {{{40007862.917251}} {{m}}}$<br>\nwithin 0.019657293127235% of 40000000<br>\n", outputtype="html", uid=6},
	{hidden=false, input="V_earth = var'V_{earth}'\nV_earth_in_SI = V_earth:eq(frac(4,3) * pi * r_earth_polar * r_earth_equ^2)\nprint(V_earth_in_SI)\nV_earth_in_SI = V_earth_in_SI:subst(r_earth_polar_in_m, r_earth_equ_in_m, pi:eq(pi.value)):simplifyAddMulDiv()\nprint(V_earth_in_SI)\n;", output="${{V_{earth}}} = {{{\\frac{4}{3}}} {{Ï€}} \\cdot {{{r_{earth}^{polar}}}} \\cdot {{{{r_{earth}^{equ}}}^{2}}}}$<br>\n${{V_{earth}}} = {{{1.0832073198014\\cdot{10^{21}}}} {{{m}^{3}}}}$<br>\n", outputtype="html", uid=86},
	{hidden=false, input="-- how many times does light go around the earth ... equatorial vs polar", output="", outputtype="html", uid=58},
	{hidden=false, input="c_in_s_C_earth_equ = c_in_SI:subst(C_earth_equ_in_m:solve(m)):simplifyAddMulDiv()\nprint(c_in_s_C_earth_equ)\nprintrelerr(7.5, (c_in_s_C_earth_equ:rhs() * s / C_earth_equ)().value)\n;", output="${c} = {{{7.4807818634767}} {{{C_{earth}^{equ}}}} \\cdot {{\\frac{1}{s}}}}$<br>\nwithin 0.25624182031123% of 7.5<br>\n", outputtype="html", uid=7},
	{hidden=false, input="c_in_s_C_earth_polar = c_in_SI:subst(C_earth_polar_in_m:solve(m)):simplifyAddMulDiv()\nprint(c_in_s_C_earth_polar)\nprintrelerr(7.5, (c_in_s_C_earth_polar:rhs() * s / C_earth_polar)().value)\n;", output="${c} = {{{7.4933384624934}} {{{C_{earth}^{polar}}}} \\cdot {{\\frac{1}{s}}}}$<br>\nwithin 0.088820500087839% of 7.5<br>\n", outputtype="html", uid=8},
	{hidden=false, input="-- so light goes around the earth 7.5x per second,\n-- and that's closer to accurate for polar circumferences (within 0.0889% error)\n-- rather than equatorial circumference (within 0.256% errror)", output="", outputtype="html", uid=59},
	{hidden=false, input="-- seconds in a day (which would be a full rotation of Earth relative to the sun\n-- (sidereal rot plus (1/(rotations-per-revolution))'s rotation-of-Earth plus other precessions ...)\n-- TODO name lhs \"day_solar\" or day_Julian or something?\n-- TODO rename to omega_earth_synodic\nday_in_s = day:eq(24 * 60 * 60 * s)", output="${day} = {{{86400}} {{s}}}$", outputtype="html", uid=15},
	{hidden=false, input="local eqn = c_in_s_C_earth_equ:subst(day_in_s:solve(s)):simplifyAddMulDiv()\nprint(eqn)\nprintrelerr(648000, (eqn:rhs() * day / C_earth_equ)().value)\n;", output="${c} = {{{646339.55300438}} {{{C_{earth}^{equ}}}} \\cdot {{\\frac{1}{day}}}}$<br>\nwithin 0.25624182031123% of 648000<br>\n", outputtype="html", uid=17},
	{hidden=false, input="local eqn = c_in_s_C_earth_polar:subst(day_in_s:solve(s)):simplifyAddMulDiv()\nprint(eqn)\nprintrelerr(648000, (eqn:rhs() * day / C_earth_polar)().value)\n;", output="${c} = {{{647424.44315943}} {{{C_{earth}^{polar}}}} \\cdot {{\\frac{1}{day}}}}$<br>\nwithin 0.088820500087847% of 648000<br>\n", outputtype="html", uid=18},
	{hidden=false, input="-- when comparing a light-day to 648000 x the circumference of the earth\n-- looks like polar circumference (0.0889%)\n-- is closer to equatorial circumference (0.256%)", output="", outputtype="html", uid=62},
	{hidden=false, input="-- TODO solar year? Julian year? ephemeral year? sidereal year?\n-- length of sidereal day = days per year / (days per year + 1) * length of solar day ... ?\n-- https://en.wikipedia.org/wiki/Sidereal_time\n-- https://en.wikipedia.org/wiki/Tropical_year\nyear_in_days = year:eq(365.2425 * day)\nprint(year_in_days)\nprintrelerr(360, (year_in_days:rhs() / day)().value);", output="${year} = {{{365.2425}} {{day}}}$<br>\nwithin 1.45625% of 360<br>\n", outputtype="html", uid=73},
	{hidden=false, input="-- 365.24219 = length of mean tropical year\n-- 365.242374 = March equinox year\n-- 265.2524 = length of Julian year = 86400 seconds\nlocal tropicalYearInDays = 365.2421896698\9\9-- tropical year vs sidereal year?  tropical year should incorporate precession? TODO find out\nday_earth_sidereal = var'day_{earth}^{sidereal}'\n--day_earth_sidereal_in_s = day_earth_sidereal:eq(86164.0905 * s)\9-- got from ... where?\nday_earth_sidereal_in_s = day_earth_sidereal:eq((tropicalYearInDays/(tropicalYearInDays+1))*86400 * s)\nprint(day_earth_sidereal_in_s)\n;", output="${{day_{earth}^{sidereal}}} = {{{86164.090532339}} {{s}}}$<br>\n", outputtype="html", uid=72},
	{hidden=false, input="c_in_s_C_earth_equ:subst(day_earth_sidereal_in_s:solve(s))()", output="${c} = {{\\frac{1}{{day_{earth}^{sidereal}}}} {{{644574.76573728}} {{{C_{earth}^{equ}}}}}}$", outputtype="html", uid=16},
	{hidden=false, input="c_in_s_C_earth_polar:subst(day_earth_sidereal_in_s:solve(s))()", output="${c} = {{\\frac{1}{{day_{earth}^{sidereal}}}} {{{645656.69367174}} {{{C_{earth}^{polar}}}}}}$", outputtype="html", uid=20},
	{hidden=false, input="-- relative to the sun, a day is going to be a full rotation plus 2pi / days per year", output="", outputtype="html", uid=19},
	{hidden=false, input="-- hmmm so speed of light is 7.5x around a distance of 39972327.733333 ...\n299792458 / 7.5", output="39972327.733333", outputtype="html", uid=21},
	{hidden=false, input="-- which is close to 1/365th  \n1/(1 - 39972327.733333 / 40075017)", output="390.25516785463", outputtype="html", uid=22},
	{hidden=false, input="299792458 / (40075017 * (1 - 1 / 366.254))", output="7.5012628448402", outputtype="html", uid=24},
	{hidden=false, input="-- so 1 light day = earth radius x 60 x 60 x 60 x 3\n-- and 1 day = 86400 seconds = 60 x 60 x 24 seconds\n-- so why were seconds chosen to be 7.5 = 180/24 times around the earth ?\n-- because that's the average human heart rate, so it a natural rhythm already easy to track.\n-- so every 60bpm heart beat (avg), a photon will travel around the polar circumference of the earth 7.5x", output="", outputtype="html", uid=25},
	{hidden=false, input="-- light-day:\nlightDay = var'ld'\nlightDay_in_m = lightDay:eq(299792458 * 86400 * m)\nprint(lightDay_in_m)\n;", output="${ld} = {{{25902068371200}} {{m}}}$<br>\n", outputtype="html", uid=23},
	{hidden=false, input="-- earth polar circumference x 60^3 x 3\nearthPolarCirc_x60x60x60x3_in_m = (C_earth_polar_in_m:rhs() / m)().value * 60^3 * 3\nprint(earthPolarCirc_x60x60x60x3_in_m)\nprintrelerr((lightDay_in_m:rhs()/m)().value, earthPolarCirc_x60x60x60x3_in_m)\n;", output="25925095170379.0<br>\nwithin 0.088899461033703% of 25902068371200.0<br>\n", outputtype="html", uid=26},
	{hidden=false, input="-- earth polar circumference x 60^3 x 3\nearthEquCirc_x60x60x60x3_in_m = (C_earth_equ_in_m:rhs() / m)().value * 60^3 * 3\nprint(earthEquCirc_x60x60x60x3_in_m)\nprintrelerr((lightDay_in_m:rhs()/m)().value, earthEquCirc_x60x60x60x3_in_m)\n;", output="25968610812255.0<br>\nwithin 0.25690010581876% of 25902068371200.0<br>\n", outputtype="html", uid=27},
	{hidden=false, input="-- so polar-circumference (which incorporates earth ellipsoid flattening) is closer in proportion than the equatorial circumference", output="", outputtype="html", uid=28},
	{hidden=false, input="-- how about mass?", output="", outputtype="html", uid=30},
	{hidden=false, input="G_in_SI:subst(c_in_SI:solve(m))()", output="${G} = {{\\frac{1}{kg}} {{{2.477018780141\\cdot{10^{-36}}}} {{s}} {{{c}^{3}}}}}$", outputtype="html", uid=32},
	{hidden=false, input="G_in_SI:subst((c_in_SI:solve(s)))()", output="${G} = {{\\frac{1}{kg}} {{{7.4259154861063\\cdot{10^{-28}}}} {{m}} {{{c}^{2}}}}}$", outputtype="html", uid=33},
	{hidden=false, input="M_earth = var'M_{earth}'\nM_earth_in_SI = M_earth:eq(5.9722e+24 * kg)\nprint(M_earth_in_SI)\nprintrelerr(6e+24, (M_earth_in_SI:rhs() / kg)().value)\n;", output="${{M_{earth}}} = {{{5.9722\\cdot{10^{24}}}} {{kg}}}$<br>\nwithin 0.46333333333333% of 6e+24<br>\n", outputtype="html", uid=34},
	{hidden=false, input="M_sun = var'M_{sun}'\nM_sun_in_SI = M_sun:eq(1.98847e+30 * kg)\nprint(M_sun_in_SI)\n;", output="${{M_{sun}}} = {{{1.98847\\cdot{10^{30}}}} {{kg}}}$<br>\n", outputtype="html", uid=35},
	{hidden=false, input="-- ratio of sun/earth mass ... is nearly exactly 333000 = 30 * 30 * 10 * 37\nlocal eqn = M_sun / M_earth\nlocal sub = eqn:subst(M_sun_in_SI, M_earth_in_SI)()\nprint(eqn:eq(sub))\nsun_earth_mass_ratio = sub.value\n;", output="${{\\frac{1}{{M_{earth}}}} {{M_{sun}}}} = {332954.355179}$<br>\n", outputtype="html", uid=36},
	{hidden=false, input="-- spoilers: approximating to 324000 instead of 333000 is going to turn out better for the gravitational constant calculations\n-- and also, 324000 = 648000 = half our proportion of a light-day to the earth polar circumference ...\n-- however, we see here ...\nprintrelerr(333000, sun_earth_mass_ratio) -- 0.0137% error\nprintrelerr(324000, sun_earth_mass_ratio) -- 2.7% error\n;", output="within 0.013707153454658% of 333000<br>\nwithin 2.7636898700605% of 324000<br>\n", outputtype="html", uid=46},
	{hidden=false, input="M_moon = var'M_{moon}'\nM_moon_in_SI = M_moon:eq(7.342e+22 * kg)\nprint(M_moon_in_SI)\n;", output="${{M_{moon}}} = {{{7.342\\cdot{10^{22}}}} {{kg}}}$<br>\n", outputtype="html", uid=37},
	{hidden=false, input="-- Earth is 81 = 3 x 3 x 3 x 3 x bigger than the Moon \n-- that means the Sun is 26973000 = 90 * 90 * 90 * 37 * times bigger than the Moon\nlocal eqn = M_earth / M_moon\nprint(eqn:eq(eqn:subst(M_earth_in_SI, M_moon_in_SI)()))\n;", output="${{\\frac{1}{{M_{moon}}}} {{M_{earth}}}} = {81.342958321983}$<br>\n", outputtype="html", uid=38},
	{hidden=false, input="local eqn = M_sun / M_moon\nprint(eqn:eq(eqn:subst(M_sun_in_SI, M_moon_in_SI)()))\n;", output="${{\\frac{1}{{M_{moon}}}} {{M_{sun}}}} = {27083492.236448}$<br>\n", outputtype="html", uid=48},
	{hidden=false, input="-- same could be done with circumferences and distances ... that's where the 432000 stuff comes from ...", output="", outputtype="html", uid=39},
	{hidden=false, input="-- but back to mass ...\n-- using the sun ...\nprint( G_in_SI:subst(c_in_SI:solve(m), M_sun_in_SI:solve(kg))() )\nprint( G_in_SI:subst(c_in_SI:solve(m), M_sun_in_SI:solve(kg), day_in_s:solve(s))() )\n-- hmm too small, try again\nprint( G_in_SI:subst(c_in_SI:solve(s), M_sun_in_SI:solve(kg))() )\n-- G = 1476 c^2 m / M_sun\n-- 1476 = 6 * 6 * 41\n-- almost 1440 = 6 * 6 * 40 ... tho this is like a 3% error ...", output="${G} = {{\\frac{1}{{M_{sun}}}} {{{4.925477533747\\cdot{10^{-06}}}} {{s}} {{{c}^{3}}}}}$<br>\n${G} = {{\\frac{1}{{M_{sun}}}} {{{5.7007841825775\\cdot{10^{-11}}}} {{day}} \\cdot {{{c}^{3}}}}}$<br>\n${G} = {{\\frac{1}{{M_{sun}}}} {{{1476.6210166658}} {{m}} {{{c}^{2}}}}}$<br>\n", outputtype="html", uid=40},
	{hidden=false, input="-- and earth circumference ~ 40,000,000 m\n-- so G / c^2 = 6 * 6 * 40 / 40000000 * C_earth / M_sun\n-- so G / c^2 = 6 * 6 / 1000000 * C_earth / M_sun\nprint( G_in_SI:subst(c_in_SI:solve(s), M_sun_in_SI:solve(kg), C_earth_polar_in_m:solve(m) )())\nprint( G_in_SI:subst(c_in_SI:solve(s), M_sun_in_SI:solve(kg), C_earth_polar_in_m:solve(m) ):solve(C_earth_polar)())\nprint( G_in_SI:subst(c_in_SI:solve(s), M_sun_in_SI:solve(kg), C_earth_polar_in_m:solve(m) ):solve(M_sun)())", output="${G} = {{\\frac{1}{{M_{sun}}}} {{{3.6908270249773\\cdot{10^{-05}}}} {{{C_{earth}^{polar}}}} \\cdot {{{c}^{2}}}}}$<br>\n${{C_{earth}^{polar}}} = {\\frac{{{27094.198488105}} {{G}} {{{M_{sun}}}}}{{c}^{2}}}$<br>\n${{M_{sun}}} = {{\\frac{1}{G}} {{{3.6908270249773\\cdot{10^{-05}}}} {{{C_{earth}^{polar}}}} \\cdot {{{c}^{2}}}}}$<br>\n", outputtype="html", uid=41},
	{hidden=false, input="-- using the Earth ...\n-- if earth mass == 333000x sun mass then we should get...\n-- G / c^2 = 6 * 6 / 1000000 * C_earth / (333000 * M_earth)\n-- G / c^2 = 4 / (37 * 1000000000) * C_earth / M_earth\n-- however 1e+9 * 37 / 4 = 9.25e+9, but 1e+9 * 36 / 4 = 9e+9, and the latter is closer to the value we get\n-- G / c^2 = 6 * 6 / 1000000 * C_earth / (324000 * M_earth)\n-- G / c^2 = 6 * 6 / 1000000 * C_earth / (60 * 60 * 30 * 3 * M_earth)\n-- G / c^2 = 1 / 1000000 * C_earth / (10 * 10 * 10 * 9 * M_earth)\n-- C_earth * c^2 = 9000000000 * M_earth * G  \n-- this means a more accurate calculation for the gravitation consntant is approximating the sun's mass at 324000 instead of 333000\n-- however, for the sun/earth, using 324000 is worse (2.5% error) compared to 333000 (0.02% error) \n-- so using 324000 is only a better approximation for the gravitation constant due to the earth polar circumference ratio approximation error counter-balancing it.\nprint( G_in_SI:subst(c_in_SI:solve(s), M_earth_in_SI:solve(kg), C_earth_polar_in_m:solve(m))() )\nlocal eqn = G_in_SI:subst(c_in_SI:solve(s), M_earth_in_SI:solve(kg), C_earth_polar_in_m:solve(m)):solve(C_earth_polar)()\nprint( eqn )\nlocal scale = (eqn / G / M_earth * c^2)():rhs().value\nprintrelerr(9e+9, scale)\9-- 9e+9 = 324000 * 1e+6 / 6^2, so approximating the sun/earth mass-ratio as 324000\nprintrelerr(9.25e+9, scale)\9-- 9.25e+9 = 333000 * 1e+6 / 6^2, so approximating the sun/earth mass-ratio as 333000\n", output="${G} = {{\\frac{1}{{M_{earth}}}} {{{1.1085084089058\\cdot{10^{-10}}}} {{{C_{earth}^{polar}}}} \\cdot {{{c}^{2}}}}}$<br>\n${{C_{earth}^{polar}}} = {\\frac{{{9021131386.6989}} {{G}} {{{M_{earth}}}}}{{c}^{2}}}$<br>\nwithin 0.23479318554315% of 9000000000.0<br>\nwithin 2.474255278931% of 9250000000.0<br>\n", outputtype="html", uid=42},
	{hidden=false, input="--[[\n...and it just so happens that approximating the proportion of the sun-mass to earth-mass as 324000 means \nit is nearly exactly half the ratio of a light-day to earth's polar circumference\n--]]", output="", outputtype="html", uid=45},
	{hidden=false, input="C_sun = var'C_{sun}'\nC_sun_in_m = C_sun:eq((2 * math.pi * 6.95700e+8) * m)\nprint(C_sun_in_m)\n;", output="${{C_{sun}}} = {{{4371212018.2048}} {{m}}}$<br>\n", outputtype="html", uid=51},
	{hidden=false, input="-- almost 108 that popular number ...\nprint( (C_sun / C_earth_polar):eq( (C_sun_in_m:rhs() / C_earth_polar_in_m:rhs())() ))\nprintrelerr(108, (C_sun_in_m:rhs() / C_earth_polar_in_m:rhs())().value)\9\9-- 1.1% off", output="${{\\frac{1}{{C_{earth}^{polar}}}} {{C_{sun}}}} = {109.25882312799}$<br>\nwithin 1.1655769703623% of 108<br>\n", outputtype="html", uid=52},
	{hidden=false, input="C_moon = var'C_{moon}'\nC_moon_in_m = C_moon:eq((2 * math.pi * 3.5e+6) * m)\nprint(C_moon_in_m)\n;", output="${{C_{moon}}} = {{{21991148.575129}} {{m}}}$<br>\n", outputtype="html", uid=53},
	{hidden=false, input="print( (C_earth_polar / C_moon):eq( (C_earth_polar_in_m:rhs() / C_moon_in_m:rhs())() ))\n--print(relerr(108, (C_earth_polar_in_m:rhs() / C_moon_in_m:rhs())().value))\9\9\n-- not even sure what to choose as a target approximation here ... except 2?  1.8 = 18/10 = 9/5?", output="${{\\frac{1}{{C_{moon}}}} {{C_{earth}^{polar}}}} = {1.819271184521}$<br>\n", outputtype="html", uid=54},
	{hidden=false, input="-- how easy is it to rewrite G in other planets' mass/circumference ratios?\n-- welp, what are those ratios\nprint((M_sun/C_sun):eq((M_sun_in_SI:rhs() / C_sun_in_m:rhs())()))\nprint((M_earth/C_earth_polar):eq((M_earth_in_SI:rhs() / C_earth_polar_in_m:rhs())()))\nprint((M_moon/C_moon):eq((M_moon_in_SI:rhs() / C_moon_in_m:rhs())()))", output="${{\\frac{1}{{C_{sun}}}} {{M_{sun}}}} = {{\\frac{1}{m}} {{{4.5490129321538\\cdot{10^{20}}}} {{kg}}}}$<br>\n${{\\frac{1}{{C_{earth}^{polar}}}} {{M_{earth}}}} = {{\\frac{1}{m}} {{{149275656446644672}} {{kg}}}}$<br>\n${{\\frac{1}{{C_{moon}}}} {{M_{moon}}}} = {{\\frac{1}{m}} {{{3338615977659130}} {{kg}}}}$<br>\n", outputtype="html", uid=49},
	{hidden=false, input="local eqn = (M_sun/C_sun) / (M_earth/C_earth_polar)\nprint( eqn:eq(eqn:subst(M_sun_in_SI, M_earth_in_SI, C_sun_in_m, C_earth_polar_in_m )()) )\n;", output="${\\frac{{\\frac{1}{{C_{sun}}}} {{M_{sun}}}}{{\\frac{1}{{C_{earth}^{polar}}}} {{M_{earth}}}}} = {3047.391008312}$<br>\n", outputtype="html", uid=50},
	{hidden=false, input="local eqn = (M_earth/C_earth_polar) / (M_moon/C_moon)\nprint( eqn:eq(eqn:subst(M_moon_in_SI, M_earth_in_SI, C_moon_in_m, C_earth_polar_in_m )()) )\n;", output="${\\frac{{\\frac{1}{{C_{earth}^{polar}}}} {{M_{earth}}}}{{\\frac{1}{{C_{moon}}}} {{M_{moon}}}}} = {44.711837912939}$<br>\n", outputtype="html", uid=55},
	{hidden=false, input="local eqn = (M_sun/C_sun) / (M_moon/C_moon)\nprint( eqn:eq(eqn:subst(M_moon_in_SI, M_sun_in_SI, C_moon_in_m, C_sun_in_m )()) )\n;", output="${\\frac{{\\frac{1}{{C_{sun}}}} {{M_{sun}}}}{{\\frac{1}{{C_{moon}}}} {{M_{moon}}}}} = {136254.452821}$<br>\n", outputtype="html", uid=56},
	{hidden=false, input="--[[\nThis looks nice, but let's think about what's really going on here.\nWhat is the gravitational constant?\nIt is the proportion between another body's mass (kg) per distance-squared (m^2) of this body's acceleration (m/s^2)\nWhich is why its units are [acceleration] / ([mass] / [distance]^2) = (m/s^2) / (kg/m^2) = m^3 / (kg s^2)\nSo what natural measurements are intuitive when trying to find this?\nWelp the distance of some planet would make sense.  And its mass.  Its circumference, not so much.\nThe speed of light too, not so much, even if the theorertical physicists treat it as the constant value of '1'.\n\nSo what are some mass-to-distance-squared ratios of planets we have to deal with?\n--]]", output="", outputtype="html", uid=65},
	{hidden=false, input="local eqn = 1/G\nlocal val = eqn:subst(G_in_SI):simplifyAddMulDiv()\nprint(eqn:eq(val))\nprintrelerr( 1.5e+10, (val / (kg * s^2 / m^3))().value );", output="${\\frac{1}{G}} = {{{14983338527.557}} {{kg}} \\cdot {{{s}^{2}}} {{\\frac{1}{{m}^{3}}}}}$<br>\nwithin 0.11107648295096% of 15000000000.0<br>\n", outputtype="html", uid=75},
	{hidden=false, input="local function test(eqn)\n\9local val = eqn:subst(G_in_SI, pi:eq(math.pi)):simplifyAddMulDiv()\n\9print(eqn:eq(val))\nend\ntest(G / pi)\ntest(pi * G)\ntest(1/(pi * G))\ntest(pi / G)\n", output="${{\\frac{1}{Ï€}} {G}} = {{{2.1244256451815\\cdot{10^{-11}}}} {{{m}^{3}}} {{\\frac{1}{kg}}} {{\\frac{1}{{s}^{2}}}}}$<br>\n${{{Ï€}} \\cdot {{G}}} = {{{2.0967240697471\\cdot{10^{-10}}}} {{{m}^{3}}} {{\\frac{1}{kg}}} {{\\frac{1}{{s}^{2}}}}}$<br>\n${\\frac{1}{{{Ï€}} \\cdot {{G}}}} = {{{4769344781.36}} {{kg}} \\cdot {{{s}^{2}}} {{\\frac{1}{{m}^{3}}}}}$<br>\n${{\\frac{1}{G}} {Ï€}} = {{{47071546244.423}} {{kg}} \\cdot {{{s}^{2}}} {{\\frac{1}{{m}^{3}}}}}$<br>\n", outputtype="html", uid=85},
	{hidden=false, input="local eqn = 1/M_sun\nprint(eqn:eq(eqn:subst(M_sun_in_SI):simplifyAddMulDiv()))", output="${\\frac{1}{{M_{sun}}}} = {{{5.0289921396853\\cdot{10^{-31}}}} \\cdot {{\\frac{1}{kg}}}}$<br>\n", outputtype="html", uid=66},
	{hidden=false, input="local eqn = G * M_sun\nprint(eqn:eq(eqn:subst(G_in_SI, M_sun_in_SI):simplifyAddMulDiv()))\n", output="${{{G}} {{{M_{sun}}}}} = {{{1.32712078576\\cdot{10^{20}}}} {{{m}^{3}}} {{\\frac{1}{{s}^{2}}}}}$<br>\n", outputtype="html", uid=74},
	{hidden=false, input="dist_sun = var'dist_{sun}'\9\9-- also AU\ndist_sun_in_m = dist_sun:eq(149597870700 * m)\nprint(dist_sun_in_m);", output="${{dist_{sun}}} = {{{149597870700}} {{m}}}$<br>\n", outputtype="html", uid=77},
	{hidden=false, input="local eqn = M_sun / dist_sun^2\nprint(eqn:eq(eqn:subst(dist_sun_in_m, M_sun_in_SI)):simplifyAddMulDiv())", output="${{{{M_{sun}}}} \\cdot {{\\frac{1}{{{dist_{sun}}}^{2}}}}} = {{{88852206.8718}} {{kg}} \\cdot {{\\frac{1}{{m}^{2}}}}}$<br>\n", outputtype="html", uid=76},
	{hidden=false, input="local eqn = G * M_earth\nlocal val = eqn:subst(G_in_SI, M_earth_in_SI):simplifyAddMulDiv()\nprint(eqn:eq(val))\nprintrelerr(4e+14, (val / (m^3/s^2))().value)\n", output="${{{G}} {{{M_{earth}}}}} = {{{3.9858940576\\cdot{10^{14}}}} {{{m}^{3}}} {{\\frac{1}{{s}^{2}}}}}$<br>\nwithin 0.35264855999998% of 4e+14<br>\n", outputtype="html", uid=78},
	{hidden=false, input="-- 1 s = 1 / (60 * 60 * 24) of an earth day\n-- 1 m = 1 / 4e+7 of earth polar circumference\n-- so m^3 / s^2 = (earth polar circumference / 4e+7)^3 / (earth day / (60 * 60 * 24))^2\n-- 1 kg = ... ???\n-- same trick as before\n-- 1/G = 1.5e+10 kg s^2 / m^3\n-- 1/G = 1.5e+10 kg (earth day / (60 * 60 * 24))^2 / (earth polar circumference / 4e+7)^3\n-- 1/G = 1.5e+10 kg (4e+7)^3 / (60 * 60 * 24)^2 * (earth day)^2 / (earth polar circumference)^3\n-- 1/G = kg * 3/2 * 10^10 * 4^3 * 10^21 / (60^4 * 24^2) * (earth day)^2 / (earth polar circumference)^3\n-- 1 = G * kg * 10^31 / (6 * 60^4) * (earth day)^2 / (earth polar circumference)^3\n-- 1 = G * kg * 10^31 / (6 * 60^4) * (earth day)^2 / (earth polar circumference)^3\n-- \n-- what to use for kg?\n-- M_earth = 6e+24 kg\n-- 1 = G * (M_earth / (6 * 10^24)) * 10^31 / (6 * 60^4) * (earth day)^2 / (earth polar circumference)^3\n-- 1 = G * 10^3 / (6^6) * (M_earth) * (earth day)^2 / (earth polar circumference)^3\n-- G = 6^6 / 10^3 * (earth polar circumference)^3 / ((M_earth) * (earth day)^2)\n-- G = 6^6 / 10^3 * (earth polar circumference)^3 / ((M_earth) * (earth day)^2)", output="", outputtype="html", uid=80},
	{hidden=false, input="local eqn = G:eq(frac(op.pow(6,6),op.pow(10,3)) * (C_earth_polar^3 / (M_earth * day^2)))\nprint(eqn)\neqn = eqn:subst(day_in_s, C_earth_polar_in_m, M_earth_in_SI)()\nprint(eqn)\nprintrelerr( (G_in_SI:rhs() / (m^3/(kg*s^2)))().value, (eqn:rhs() / (m^3/(kg*s^2)))().value)\nprintrelerr( ((m^3/(kg*s^2)) / G_in_SI:rhs())().value, ((m^3/(kg*s^2)) / eqn:rhs())().value) -- and the inverse? basically the same.\n;", output="${G} = {{{\\frac{46656}{1000}}} {{\\frac{{{C_{earth}^{polar}}}^{3}}{{{{M_{earth}}}} \\cdot {{{day}^{2}}}}}}}$<br>\n${G} = {\\frac{{{6.7016498759195\\cdot{10^{-11}}}} {{{m}^{3}}}}{{{kg}} \\cdot {{{s}^{2}}}}}$<br>\nwithin 0.41308878406498% of 6.67408e-11<br>\nwithin 0.41138938067459% of 14983338527.557<br>\n", outputtype="html", uid=83},
	{hidden=false, input="-- TODO compare Cearth^3 / (Mearth day^2) / G to whole numbers / fractions\nlocal eqn = G / (C_earth_polar^3 / (M_earth * day^2))\nlocal val = eqn:subst(day_in_s, C_earth_polar_in_m, M_earth_in_SI, G_in_SI)()\nprint(eqn:eq(val))\n-- TODO rename 'day' to omega_earth ?  what symbol for synodic day of the planet?\n-- TODO same sort of comparison but with sun or moon exchanged\n-- TODO maybe throw in 'pi' since surface area is prop to pi, G is prop to Poisson solution prop to pi, etc.", output="${\\frac{G}{\\frac{{{C_{earth}^{polar}}}^{3}}{{{{M_{earth}}}} \\cdot {{{day}^{2}}}}}} = {46.464062170552}$<br>\n", outputtype="html", uid=84},
	{hidden=false, input="-- G = 6^6 / 10^3 * (earth polar circumference)^3 / ((M_earth) * (earth day)^2)\n-- C^3 = (2 pi R)^3\n-- C^3 = 8 pi^3 R^3\n-- V = 4/3 pi R^3 \n-- C^3 = V * 6 pi^2 ~ V * 60\n-- G = 6^6 / 10^3 * (earth volume * 60) / ((M_earth) * (earth day)^2)\n-- G = 6^7 / 10^2 * earth volume / ((M_earth) * (earth day)^2)\n-- 6^7 / 10^2 = 2799.36 is within 0.022857142857138% of 2800\nprint(6 * math.pi^2)\nprintrelerr(60, 6 * math.pi^2)\nprint(6^7 / 10^2)\nprintrelerr(2800, 6^7 / 10^2)", output="59.217626406536<br>\nwithin 1.3039559891064% of 60<br>\n2799.36<br>\nwithin 0.022857142857138% of 2800<br>\n", outputtype="html", uid=89},
	{hidden=false, input="local eqn = G / (V_earth / (M_earth * day^2))\nlocal val = eqn:subst(day_in_s, V_earth_in_SI, M_earth_in_SI, G_in_SI)()\nprint(eqn:eq(val))\nprintrelerr(2800, val.value)", output="${\\frac{G}{\\frac{{V_{earth}}}{{{{M_{earth}}}} \\cdot {{{day}^{2}}}}}} = {2746.8924148035}$<br>\nwithin 1.8966994713018% of 2800<br>\n", outputtype="html", uid=87},
	{hidden=false, input="-- maybe instead of using G ~ 1/1.5e+10 m^3 / kg s^2 and M_earth ~ 6e+24 kg ... I can instead look at G M_earth ~ 4e+14 m^3 / s^2 (tho it's less accurate)\n-- nah not too diff", output="", outputtype="html", uid=81},
	{hidden=false, input="", output="", outputtype="html", uid=82}
}