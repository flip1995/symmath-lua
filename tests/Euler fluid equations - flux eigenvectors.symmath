{
	{hidden=false, input="symmath.implicitVars = false\nsymmath.fixVariableNames = false\nrequire 'ext'\nop = symmath.op\nprintbr = print\n;", output="", outputtype="html", uid=1},
	{hidden=false, input="delta = Tensor:deltaSymbol() -- Kronecher delta. should this be default?", output="$\\delta$", outputtype="html", uid=2},
	{hidden=false, input="g = Tensor:metricSymbol() -- metric. same with this?", output="$g$", outputtype="html", uid=3},
	{hidden=false, input="-- TODO tidyIndexes() is breaking on this worksheet\n-- it seems like it does work if you are sure to :simplify():factorDivision() beforehand", output="", outputtype="html", uid=4},
	{hidden=false, input="function sum(t)\n\9if #t == 1 then return t[1] end\n\9return op.add(table.unpack(t))\nend", output="", outputtype="html", uid=5},
	{hidden=false, input="kg, m, s = vars('kg', 'm', 's')", output="$kg$\9$m$\9$s$", outputtype="html", uid=6},
	{hidden=false, input="t, x, y, z = vars('t', 'x', 'y', 'z')", output="$t$\9$x$\9$y$\9$z$", outputtype="html", uid=7},
	{hidden=false, input="xs = table{x, y, z}\ntxs = table{t, x, y, z}\n;", output="", outputtype="html", uid=8},
	{hidden=false, input="print'variables:'", output="variables:<br>\n", outputtype="html", uid=9},
	{hidden=false, input="n = var'(n_1)'\nprint(n'^i', '= flux surface normal, in units of $[1]$');", output="${ {(n_1)}} ^i$\9= flux surface normal, in units of $[1]$<br>\n", outputtype="html", uid=10},
	{hidden=false, input="rho = var('\\\\rho', txs)\9-- density\nprint(rho, [[= density, in units of ]], kg/m^3);", output="$\\rho$\9= density, in units of \9$\\frac{kg}{{m}^{3}}$<br>\n", outputtype="html", uid=11},
	{hidden=false, input="v = var'v'\9-- velocity\nv'^i':setDependentVars(txs:unpack())\9-- because i'm now tracking variable dependency based on its tensor degree\nprint(v'^i', [[= velocity, in units of ]], m/s);", output="${ v} ^i$\9= velocity, in units of \9${\\frac{1}{s}} {m}$<br>\n", outputtype="html", uid=12},
	{hidden=false, input="--local m = var'm'\9-- momentum\nm_from_v = m'^i':eq(rho * v'^i')\nprint(m_from_v, [[= momentum, in units of ]], kg/(m^2 * s));", output="${{ m} ^i} = {{{\\rho}} \\cdot {{{ v} ^i}}}$\9= momentum, in units of \9$\\frac{kg}{{{{m}^{2}}} {{s}}}$<br>\n", outputtype="html", uid=13},
	{hidden=false, input="gamma = var'\\\\gamma'\nprint(gamma, [[= heat capacity ratio, in units of $[1]$]]);", output="$\\gamma$\9= heat capacity ratio, in units of $[1]$<br>\n", outputtype="html", uid=14},
	{hidden=false, input="gammaMinusOne = var'(\\\\gamma_{-1})'\9-- = gamma - 1\n--local gammaMinusOne = var'\\\\tilde{\\\\gamma}'\ngammaMinusOne_def = gammaMinusOne:eq(gamma - 1)\nprint(gammaMinusOne_def);", output="${{(\\gamma_{-1})}} = {{\\gamma} - {1}}$<br>\n", outputtype="html", uid=15},
	{hidden=false, input="P = var('P', txs)\9\9-- pressure\nprint(P, [[= pressure, in units of ]], kg / (m * s^2));", output="$P$\9= pressure, in units of \9$\\frac{kg}{{{m}} {{{s}^{2}}}}$<br>\n", outputtype="html", uid=16},
	{hidden=false, input="Cs = var'c_s'\nCs_def = Cs:eq(sqrt((gamma * P) / rho))\nprint(Cs_def, [[= speed of sound in units of ]], m / s);", output="${{c_s}} = {\\sqrt{{\\frac{1}{\\rho}} {{{\\gamma}} \\cdot {{P}}}}}$\9= speed of sound in units of \9${\\frac{1}{s}} {m}$<br>\n", outputtype="html", uid=17},
	{hidden=false, input="print(g'_ij', [[= metric tensor, in units of $[1]$]]);", output="${{ g} _i} _j$\9= metric tensor, in units of $[1]$<br>\n", outputtype="html", uid=18},
	{hidden=false, input="vSq_var = var('(v)^2')\nvSq_wrt_v = v'^k' * v'^l' * g'_kl'\nvSq_def = vSq_var:eq(vSq_wrt_v)\nprint(vSq_def, [[= velocity norm squared, in units of]], m^2/s^2);", output="${{(v)^2}} = {{{{ v} ^k}} {{{ v} ^l}} {{{{ g} _k} _l}}}$\9= velocity norm squared, in units of\9$\\frac{{m}^{2}}{{s}^{2}}$<br>\n", outputtype="html", uid=19},
	{hidden=false, input="e_kin = var'e_{kin}'\ne_kin_def = e_kin:eq(frac(1,2) * vSq_wrt_v)\9\9\9\9\9-- specific kinetic energy\nprint(e_kin_def, [[= specific kinetic energy, in units of]], m^2/s^2);", output="${{e_{kin}}} = {{{\\frac{1}{2}}} {{{ v} ^k}} {{{ v} ^l}} {{{{ g} _k} _l}}}$\9= specific kinetic energy, in units of\9$\\frac{{m}^{2}}{{s}^{2}}$<br>\n", outputtype="html", uid=20},
	{hidden=false, input="e_int = var'e_{int}'\ne_int_def = e_int:eq(P / (gammaMinusOne * rho))\9\9-- specific internal energy \nprint(e_int_def, [[= specific internal energy, in units of]], m^2/s^2);", output="${{e_{int}}} = {\\frac{P}{{{{(\\gamma_{-1})}}} \\cdot {{\\rho}}}}$\9= specific internal energy, in units of\9$\\frac{{m}^{2}}{{s}^{2}}$<br>\n", outputtype="html", uid=21},
	{hidden=false, input="E_total = var'E_{total}'\nE_total_def = E_total:eq(rho * (e_int + e_kin))\9-- total energy\nprint(E_total_def, [[= densitized total energy, in units of]], kg / (m * s^2));", output="${{E_{total}}} = {{{\\rho}} \\cdot {{\\left({{{e_{int}}} + {{e_{kin}}}}\\right)}}}$\9= densitized total energy, in units of\9$\\frac{kg}{{{m}} {{{s}^{2}}}}$<br>\n", outputtype="html", uid=22},
	{hidden=false, input="E_total_wrt_W = E_total_def:subst(e_int_def, e_kin_def, vSq_def:switch()):simplifyAddMulDiv()\nprint(E_total_wrt_W);", output="${{E_{total}}} = {{{{P}} {{\\frac{1}{{(\\gamma_{-1})}}}}} + {{{\\frac{1}{2}}} {{{(v)^2}}} \\cdot {{\\rho}}}}$<br>\n", outputtype="html", uid=23},
	{hidden=false, input="H_total = var'H_{total}'\nH_total_def = H_total:eq(E_total + P)\nprint(H_total_def, [[= total enthalpy, in units of]], kg / (m * s^2));", output="${{H_{total}}} = {{{E_{total}}} + {P}}$\9= total enthalpy, in units of\9$\\frac{kg}{{{m}} {{{s}^{2}}}}$<br>\n", outputtype="html", uid=24},
	{hidden=false, input="H_total_wrt_W = H_total_def:subst(E_total_wrt_W, vSq_def:switch()):simplifyAddMulDiv()\nprint(H_total_wrt_W);", output="${{H_{total}}} = {{P} + {{{P}} {{\\frac{1}{{(\\gamma_{-1})}}}}} + {{{\\frac{1}{2}}} {{{(v)^2}}} \\cdot {{\\rho}}}}$<br>\n", outputtype="html", uid=25},
	{hidden=false, input="c = var'c'\9\9\9-- commutation\nGamma = var'\\\\Gamma'\nB = var'B'\9\9\9-- magnetic field\nS = var'S'\9\9\9-- source terms\n;", output="", outputtype="html", uid=26},
	{hidden=false, input="--[[ TODO fixme\nprint(m'^i' * E_total)\nprint((m'^i' * E_total):replace(E_total, vSq_wrt_v))\nprint((m'^i' * E_total):replaceIndex(E_total, vSq_wrt_v))\nos.exit()\n--]]", output="", outputtype="html", uid=27},
	{hidden=false, input="--[[ another fixme ... this works fine as long as the find doesn't have sum indexes\nprint(g'^ij_,j')\n-- fails\n--print((g'^ij_,j'):replaceIndex(g'^ij_,j', -g'^ik' * g'_kl,j' * g'^lj'))\n-- works\nprint((g'^ij_,j'):replaceIndex(g'^ij_,m', -g'^ik' * g'_kl,m' * g'^lj'))\nos.exit()\n--]]", output="", outputtype="html", uid=28},
	{hidden=false, input="-- equations \n\nA, W, U = vars('A', 'W', 'U')", output="$A$\9$W$\9$U$", outputtype="html", uid=29},
	{hidden=false, input="print'Finite volume form:'", output="Finite volume form:<br>\n", outputtype="html", uid=30},
	{hidden=false, input="(U'^I_,t' + var'F(n^j)''^I_;j'):eq(0)", output="${{{{ U} ^I} _{,t}} + {{{ {F(n^j)}} ^I} _{;j}}} = {0}$", outputtype="html", uid=31},
	{hidden=false, input="print\"This is ideal because we have the option of working with the flux vector, or working with its jacobian wrt conserved quantities, or working with its eigensystem.\"", output="This is ideal because we have the option of working with the flux vector, or working with its jacobian wrt conserved quantities, or working with its eigensystem.<br>\n", outputtype="html", uid=32},
	{hidden=false, input="print'As flux Jacobian:'", output="As flux Jacobian:<br>\n", outputtype="html", uid=33},
	{hidden=false, input="(U'^I_,t' \n\9+ var'F(n^j)''^I':diff(U'^J') * U'^J_;j'\n):eq(0)", output="${{{{ U} ^I} _{,t}} + {{{\\frac{\\partial { {F(n^j)}} ^I}{\\partial { U} ^J}}} {{{{ U} ^J} _{;j}}}}} = {0}$", outputtype="html", uid=34},
	{hidden=false, input="print'As eigensystem of jacobian:'", output="As eigensystem of jacobian:<br>\n", outputtype="html", uid=35},
	{hidden=false, input="(U'_,t'\n\9+ var'R_F(n^j)' * var'\\\\Lambda_F(n^j)' * var'L_F(n^j)' * U'_;j'\n):eq(0)", output="${{{ U} _{,t}} + {{{{R_F(n^j)}}} \\cdot {{{\\Lambda_F(n^j)}}} \\cdot {{{L_F(n^j)}}} \\cdot {{{ U} _{;j}}}}} = {0}$", outputtype="html", uid=36},
	{hidden=false, input="print'As characteristic variables:'", output="As characteristic variables:<br>\n", outputtype="html", uid=37},
	{hidden=false, input="(\9\n\9var'L_F(n^j)'\n\9* U'_,t'\n\9+ \n\9var'L_F(n^j)' \n\9* var'R_F(n^j)' \n\9* var'\\\\Lambda_F(n^j)' \n\9* var'L_F(n^j)' \n\9* var'R_F(n^j)' \n\9* var'L_F(n^j)' \n\9* U'_;j'\n):eq(0)", output="${{{{{L_F(n^j)}}} \\cdot {{{ U} _{,t}}}} + {{{{L_F(n^j)}}} \\cdot {{{R_F(n^j)}}} \\cdot {{{\\Lambda_F(n^j)}}} \\cdot {{{L_F(n^j)}}} \\cdot {{{R_F(n^j)}}} \\cdot {{{L_F(n^j)}}} \\cdot {{{ U} _{;j}}}}} = {0}$", outputtype="html", uid=38},
	{hidden=false, input="(\9\n\9var'L_F(n^j)'\n\9* U'_,t'\n\9+ \n\9var'\\\\Lambda_F(n^j)' \n\9* var'L_F(n^j)' \n\9* U'_;j'\n):eq(0)", output="${{{{{L_F(n^j)}}} \\cdot {{{ U} _{,t}}}} + {{{{\\Lambda_F(n^j)}}} \\cdot {{{L_F(n^j)}}} \\cdot {{{ U} _{;j}}}}} = {0}$", outputtype="html", uid=39},
	{hidden=false, input="print('Now you have 3 separate PDEs to solve, however they are dependent on flux normal, and not easily solvable.')", output="Now you have 3 separate PDEs to solve, however they are dependent on flux normal, and not easily solvable.<br>\n", outputtype="html", uid=40},
	{hidden=false, input="print'As a PDE of primitive variables:'", output="As a PDE of primitive variables:<br>\n", outputtype="html", uid=41},
	{hidden=false, input="-- dU/dt + dF(n)/dU dU/dx = 0\n(U'_,t' \n\9+ var'F(n^j)':diff(U) \n\9* U'_;j'\n):eq(0)", output="${{{ U} _{,t}} + {{{\\frac{\\partial {F(n^j)}}{\\partial U}}} {{{ U} _{;j}}}}} = {0}$", outputtype="html", uid=42},
	{hidden=false, input="print'...but idk if this is possible.'", output="...but idk if this is possible.<br>\n", outputtype="html", uid=43},
	{hidden=false, input="-- dW/dU dU/dt + dW/dU dF(n)/dU dU/dW dW/dU dU/dx = 0\n(\n\9W:diff(U) \n\9* U'_,t' \n\9+ \n\9W:diff(U)\n\9* var'F(n^j)':diff(U) \n\9* U:diff(W)\n\9* W:diff(U)\n\9* U'_;j'\n):eq(0)", output="${{{{\\frac{\\partial W}{\\partial U}}} {{{ U} _{,t}}}} + {{{\\frac{\\partial W}{\\partial U}}} {{\\frac{\\partial {F(n^j)}}{\\partial U}}} {{\\frac{\\partial U}{\\partial W}}} {{\\frac{\\partial W}{\\partial U}}} {{{ U} _{;j}}}}} = {0}$", outputtype="html", uid=44},
	{hidden=false, input="--dW/dt + dW/dU dF(n)/dU dU/dW dW/dx = 0\n(\n\9W'_,t' \n\9+ \n\9W:diff(U)\n\9* var'F(n^j)':diff(U) \n\9* U:diff(W)\n\9* W'_;j'\n):eq(0)", output="${{{ W} _{,t}} + {{{\\frac{\\partial W}{\\partial U}}} {{\\frac{\\partial {F(n^j)}}{\\partial U}}} {{\\frac{\\partial U}{\\partial W}}} {{{ W} _{;j}}}}} = {0}$", outputtype="html", uid=45},
	{hidden=false, input="-- dW/dt + dW/dU dF(n)/dW dW/dx = 0 \n(\n\9W'_,t' \n\9+ \n\9W:diff(U)\n\9* var'F(n^j)':diff(W) \n\9* W'_;j'\n):eq(0)", output="${{{ W} _{,t}} + {{{\\frac{\\partial W}{\\partial U}}} {{\\frac{\\partial {F(n^j)}}{\\partial W}}} {{{ W} _{;j}}}}} = {0}$", outputtype="html", uid=46},
	{hidden=false, input="--[[ in theory ... but hard / impossible? to solve\n--dW/dt + dFW(n)/dW dW/dx = 0\nprint(\n\9(\n\9\9W'_,t' \n\9\9+ \n\9\9var'FU(n^j)':diff(W) \n\9\9* W'_;j'\n\9):eq(0))\nprint()\n--]]", output="", outputtype="html", uid=47},
	{hidden=false, input="print('...where ', W:diff(U) * var'F(n^j)':diff(W) , 'is equal to the acoustic matrix plus a diagonal of the velocity along the flux normal, as we will see below.')", output="...where \9${{\\frac{\\partial W}{\\partial U}}} {{\\frac{\\partial {F(n^j)}}{\\partial W}}}$\9is equal to the acoustic matrix plus a diagonal of the velocity along the flux normal, as we will see below.<br>\n", outputtype="html", uid=48},
	{hidden=false, input="( W'_,t' + (A + var'I' * v'^j') * W'_;j' ):eq(0)", output="${{{ W} _{,t}} + {{{\\left({{A} + {{{I}} {{{ v} ^j}}}}\\right)}} {{{ W} _{;j}}}}} = {0}$", outputtype="html", uid=49},
	{hidden=false, input="print\"Now, even though the flux vector doesn't look so solvable as it does with conserved quantities, this system's eigendecomposition is much much more simple.\"", output="Now, even though the flux vector doesn't look so solvable as it does with conserved quantities, this system's eigendecomposition is much much more simple.<br>\n", outputtype="html", uid=50},
	{hidden=false, input="--[[\nso the primitive flux jacobian wrt primitive vars dFW(n)/dW is related to the conservative flux wrt conservative vars jacobian dF/dU by dFW(n)/dW = dW/dU dF(n)/dU dU/dW \ndoes this mean that flux is not flux in every situation?  that conservative state variable flux is different from primitive state variable flux?\nalso, looks like the \"acoustic plus velocity\" is equal to the primitive flux wrt primitive jacobian ... \n... which means that it is probably the simplest change-of-variables such that the characteristic variables are not dependent on the surface normals.\nso can the \"acoustic plus velocity\" dFW(n)/dW times the derivative of primitive wrt x be re-integrated?\n--]]", output="", outputtype="html", uid=51},
	{hidden=false, input="print'If you could find some flux vector such that the derivative of this flux vector wrt the primitive vector produced our \"acoustic-plus-velocity-diagonal\" then we could use flux-based numerical solvers...'", output="If you could find some flux vector such that the derivative of this flux vector wrt the primitive vector produced our \"acoustic-plus-velocity-diagonal\" then we could use flux-based numerical solvers...<br>\n", outputtype="html", uid=52},
	{hidden=false, input="(\n\9W'_,t' \n\9+ \n\9var'F_W(n^j)':diff(W) \n\9* W'_;j'\n):eq(0)", output="${{{ W} _{,t}} + {{{\\frac{\\partial {F_W(n^j)}}{\\partial W}}} {{{ W} _{;j}}}}} = {0}$", outputtype="html", uid=53},
	{hidden=false, input="(W'_,t' + var'F_W(n^j)''_;j'):eq(0)", output="${{{ W} _{,t}} + {{ {F_W(n^j)}} _{;j}}} = {0}$", outputtype="html", uid=54},
	{hidden=false, input="print'...but idk if this is possible.'", output="...but idk if this is possible.<br>\n", outputtype="html", uid=55},
	{hidden=false, input="print[[\nSo...<br>\n- The conserved form is able to be expressed as a flux vector: $\\partial_t U + \\partial_x F_U(n) = 0$. \n\9From that, also as a linear relation of PDEs times x derivative $\\partial_t U + \\frac{\\partial F_U(n)}{\\partial U} \\cdot \\partial_x U = 0$, \n\9and from that as an eigensystem $\\partial_t U + R_U(n) \\cdot \\Lambda(n) \\cdot L_U(n) \\cdot \\partial_x U = 0$.<br>\n- The primitive form is the simplest form of the linear relation of the PDEs $\\partial_t W + B(n) \\cdot \\partial_x W = 0$ \n\9such that the state variables $W$ are independent of flux direction,\n\9though the flux vector $F_W(n)$ may not be solvable from integrating the linear system times the state variable x derivative $B(n) \\cdot \\partial_x W$,\n\9i.e. $\\partial_t W + \\partial_x F_W(n) = 0$ may not be a possible form to deduce.\n\9<br>\n- The characteristic form are completely separated PDEs, with diagonal flux and identity eigenvectors $\\partial_t C(n) + \\Lambda(n) \\cdot \\partial_x C(n) = 0$, \n\9however the state variables $C(n)$ may be dependent on flux direction and may not be solvable.<br>\n<br>\n]]", output="So...<br>\n- The conserved form is able to be expressed as a flux vector: $\\partial_t U + \\partial_x F_U(n) = 0$. \n\9From that, also as a linear relation of PDEs times x derivative $\\partial_t U + \\frac{\\partial F_U(n)}{\\partial U} \\cdot \\partial_x U = 0$, \n\9and from that as an eigensystem $\\partial_t U + R_U(n) \\cdot \\Lambda(n) \\cdot L_U(n) \\cdot \\partial_x U = 0$.<br>\n- The primitive form is the simplest form of the linear relation of the PDEs $\\partial_t W + B(n) \\cdot \\partial_x W = 0$ \n\9such that the state variables $W$ are independent of flux direction,\n\9though the flux vector $F_W(n)$ may not be solvable from integrating the linear system times the state variable x derivative $B(n) \\cdot \\partial_x W$,\n\9i.e. $\\partial_t W + \\partial_x F_W(n) = 0$ may not be a possible form to deduce.\n\9<br>\n- The characteristic form are completely separated PDEs, with diagonal flux and identity eigenvectors $\\partial_t C(n) + \\Lambda(n) \\cdot \\partial_x C(n) = 0$, \n\9however the state variables $C(n)$ may be dependent on flux direction and may not be solvable.<br>\n<br>\n<br>\n", outputtype="html", uid=56},
	{hidden=false, input="print'Conserved and primitive variables:'", output="Conserved and primitive variables:<br>\n", outputtype="html", uid=57},
	{hidden=false, input="W_def = Matrix{rho, v'^i', P}:T()\nprint(W'^I':eq(W_def));", output="${{ W} ^I} = {\\left[ \\begin{matrix}  \\rho \\\\  { v} ^i \\\\  P\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=58},
	{hidden=false, input="U_def = Matrix{rho, m'^i', E_total}:T()\nprint(U'^I':eq(U_def));", output="${{ U} ^I} = {\\left[ \\begin{matrix}  \\rho \\\\  { m} ^i \\\\  {E_{total}}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=61},
	{hidden=true, input="print'Partial of conserved quantities wrt primitives:'", output="Partial of conserved quantities wrt primitives:<br>\n", outputtype="html", uid=62},
	{hidden=false, input="dU_dW_def = Matrix:lambda({3,3}, function(i,j)\n\9return U_def[i][1]:diff( W_def[j][1]:reindex{i='j'} )\nend)\nprint(U'^I':diff(W'^J'):eq(dU_dW_def));", output="${\\frac{\\partial { U} ^I}{\\partial { W} ^J}} = {\\left[ \\begin{matrix}  \\frac{\\partial \\rho}{\\partial \\rho} &  \\frac{\\partial \\rho}{\\partial { v} ^j} &  \\frac{\\partial \\rho}{\\partial P} \\\\  \\frac{\\partial { m} ^i}{\\partial \\rho} &  \\frac{\\partial { m} ^i}{\\partial { v} ^j} &  \\frac{\\partial { m} ^i}{\\partial P} \\\\  \\frac{\\partial {E_{total}}}{\\partial \\rho} &  \\frac{\\partial {E_{total}}}{\\partial { v} ^j} &  \\frac{\\partial {E_{total}}}{\\partial P}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=63},
	{hidden=false, input="dU_dW_def = dU_dW_def:subst(m_from_v, E_total_def, e_kin_def, vSq_def, e_int_def)\nprint(U'^I':diff(W'^J'):eq(dU_dW_def));", output="${\\frac{\\partial { U} ^I}{\\partial { W} ^J}} = {\\left[ \\begin{matrix}  \\frac{\\partial \\rho}{\\partial \\rho} &  \\frac{\\partial \\rho}{\\partial { v} ^j} &  \\frac{\\partial \\rho}{\\partial P} \\\\  {\\frac{\\partial}{\\partial \\rho}}\\left({{{\\rho}} \\cdot {{{ v} ^i}}}\\right) &  {\\frac{\\partial}{\\partial { v} ^j}}\\left({{{\\rho}} \\cdot {{{ v} ^i}}}\\right) &  {\\frac{\\partial}{\\partial P}}\\left({{{\\rho}} \\cdot {{{ v} ^i}}}\\right) \\\\  {\\frac{\\partial}{\\partial \\rho}}\\left({{{\\rho}} \\cdot {{\\left({{{{\\frac{1}{2}}} {{{ v} ^k}} {{{ v} ^l}} {{{{ g} _k} _l}}} + {\\frac{P}{{{{(\\gamma_{-1})}}} \\cdot {{\\rho}}}}}\\right)}}}\\right) &  {\\frac{\\partial}{\\partial { v} ^j}}\\left({{{\\rho}} \\cdot {{\\left({{{{\\frac{1}{2}}} {{{ v} ^k}} {{{ v} ^l}} {{{{ g} _k} _l}}} + {\\frac{P}{{{{(\\gamma_{-1})}}} \\cdot {{\\rho}}}}}\\right)}}}\\right) &  {\\frac{\\partial}{\\partial P}}\\left({{{\\rho}} \\cdot {{\\left({{{{\\frac{1}{2}}} {{{ v} ^k}} {{{ v} ^l}} {{{{ g} _k} _l}}} + {\\frac{P}{{{{(\\gamma_{-1})}}} \\cdot {{\\rho}}}}}\\right)}}}\\right)\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=64},
	{hidden=false, input="dU_dW_def = dU_dW_def():subst(vSq_def:switch()())\ndU_dW_def[3][2] = dU_dW_def[3][2]:simplifyMetrics()()\nprint(U'^I':diff(W'^J'):eq(dU_dW_def));", output="${\\frac{\\partial { U} ^I}{\\partial { W} ^J}} = {\\left[ \\begin{matrix}  1 &  0 &  0 \\\\  { v} ^i &  {{\\rho}} \\cdot {{{{ \\delta} ^i} _j}} &  0 \\\\  {\\frac{1}{2}} {{(v)^2}} &  {{\\rho}} \\cdot {{{ v} _j}} &  \\frac{1}{{(\\gamma_{-1})}}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=65},
	{hidden=false, input="-- this doesn't work with indexed elements of the matrix.  you'd have to either expand it, or ... do some math \n--local dW_dU_def = dU_dW_def:inverse()\ndW_dU_def = Matrix(\n\9{1, 0, 0},\n\9{-v'^i' / rho, delta'^i_j' / rho, 0},\n\9{frac(1,2) * gammaMinusOne * vSq_wrt_v, -gammaMinusOne * v'_j', gammaMinusOne}\n)\nprint(W'^I':diff(U'^J'):eq(dW_dU_def));", output="${\\frac{\\partial { W} ^I}{\\partial { U} ^J}} = {\\left[ \\begin{matrix}  1 &  0 &  0 \\\\  {\\frac{1}{\\rho}}{\\left({-{{ v} ^i}}\\right)} &  {\\frac{1}{\\rho}} {{{ \\delta} ^i} _j} &  0 \\\\  {{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{{ v} ^k}} {{{ v} ^l}} {{{{ g} _k} _l}} &   {-{{(\\gamma_{-1})}}} {{{ v} _j}} &  {(\\gamma_{-1})}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=66},
	{hidden=true, input="print'Flux:'", output="Flux:<br>\n", outputtype="html", uid=67},
	{hidden=false, input="F = var'F'\nF_def = Matrix{\n\9rho * v'^j' * n'_j',\n\9rho * v'^i' * v'^j' * n'_j' + n'^i' * P,\n\9v'^j' * n'_j' * H_total\n}:T()\nprint(F'^I':eq(F_def));", output="${{ F} ^I} = {\\left[ \\begin{matrix}  {{\\rho}} \\cdot {{{ v} ^j}} {{{ {(n_1)}} _j}} \\\\  {{{\\rho}} \\cdot {{{ v} ^i}} {{{ v} ^j}} {{{ {(n_1)}} _j}}} + {{{{ {(n_1)}} ^i}} {{P}}} \\\\  {{{ v} ^j}} {{{ {(n_1)}} _j}} {{{H_{total}}}}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=68},
	{hidden=false, input="F_def = F_def:subst(H_total_def, E_total_def, e_int_def, e_kin_def):simplifyAddMulDiv()\nprint(F'^I':eq(F_def));", output="${{ F} ^I} = {\\left[ \\begin{matrix}  {{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^j}} \\\\  {{{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^i}} {{{ v} ^j}}} + {{{P}} {{{ {(n_1)}} ^i}}} \\\\  {{{P}} {{{ {(n_1)}} _j}} {{{ v} ^j}}} + {{{P}} {{{ {(n_1)}} _j}} {{{ v} ^j}} {{\\frac{1}{{(\\gamma_{-1})}}}}} + {{{\\frac{1}{2}}} {{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^j}} {{{ v} ^k}} {{{ v} ^l}} {{{{ g} _k} _l}}}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=69},
	{hidden=false, input="print'Flux derivative wrt primitive variables:'\ndF_dW_def = Matrix:lambda({3,3}, function(i,j)\n\9return F_def[i][1]:reindex{jk='km'}:diff( W_def[j][1]:reindex{i='j'})\nend)\nprint(F'^I':diff(W'^J'):eq(dF_dW_def));", output="Flux derivative wrt primitive variables:<br>\n${\\frac{\\partial { F} ^I}{\\partial { W} ^J}} = {\\left[ \\begin{matrix}  {\\frac{\\partial}{\\partial \\rho}}\\left({{{\\rho}} \\cdot {{{ {(n_1)}} _k}} {{{ v} ^k}}}\\right) &  {\\frac{\\partial}{\\partial { v} ^j}}\\left({{{\\rho}} \\cdot {{{ {(n_1)}} _k}} {{{ v} ^k}}}\\right) &  {\\frac{\\partial}{\\partial P}}\\left({{{\\rho}} \\cdot {{{ {(n_1)}} _k}} {{{ v} ^k}}}\\right) \\\\  {\\frac{\\partial}{\\partial \\rho}}\\left({{{{\\rho}} \\cdot {{{ {(n_1)}} _k}} {{{ v} ^i}} {{{ v} ^k}}} + {{{P}} {{{ {(n_1)}} ^i}}}}\\right) &  {\\frac{\\partial}{\\partial { v} ^j}}\\left({{{{\\rho}} \\cdot {{{ {(n_1)}} _k}} {{{ v} ^i}} {{{ v} ^k}}} + {{{P}} {{{ {(n_1)}} ^i}}}}\\right) &  {\\frac{\\partial}{\\partial P}}\\left({{{{\\rho}} \\cdot {{{ {(n_1)}} _k}} {{{ v} ^i}} {{{ v} ^k}}} + {{{P}} {{{ {(n_1)}} ^i}}}}\\right) \\\\  {\\frac{\\partial}{\\partial \\rho}}\\left({{{{P}} {{{ {(n_1)}} _k}} {{{ v} ^k}}} + {{{P}} {{{ {(n_1)}} _k}} {{{ v} ^k}} {{\\frac{1}{{(\\gamma_{-1})}}}}} + {{{\\frac{1}{2}}} {{\\rho}} \\cdot {{{ {(n_1)}} _k}} {{{ v} ^k}} {{{ v} ^m}} {{{ v} ^l}} {{{{ g} _m} _l}}}}\\right) &  {\\frac{\\partial}{\\partial { v} ^j}}\\left({{{{P}} {{{ {(n_1)}} _k}} {{{ v} ^k}}} + {{{P}} {{{ {(n_1)}} _k}} {{{ v} ^k}} {{\\frac{1}{{(\\gamma_{-1})}}}}} + {{{\\frac{1}{2}}} {{\\rho}} \\cdot {{{ {(n_1)}} _k}} {{{ v} ^k}} {{{ v} ^m}} {{{ v} ^l}} {{{{ g} _m} _l}}}}\\right) &  {\\frac{\\partial}{\\partial P}}\\left({{{{P}} {{{ {(n_1)}} _k}} {{{ v} ^k}}} + {{{P}} {{{ {(n_1)}} _k}} {{{ v} ^k}} {{\\frac{1}{{(\\gamma_{-1})}}}}} + {{{\\frac{1}{2}}} {{\\rho}} \\cdot {{{ {(n_1)}} _k}} {{{ v} ^k}} {{{ v} ^m}} {{{ v} ^l}} {{{{ g} _m} _l}}}}\\right)\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=70},
	{hidden=false, input="dF_dW_def = dF_dW_def:simplifyMetrics():simplifyAddMulDiv()\nprint(F'^I':diff(W'^J'):eq(dF_dW_def));", output="${\\frac{\\partial { F} ^I}{\\partial { W} ^J}} = {\\left[ \\begin{matrix}  {{{ {(n_1)}} _k}} {{{ v} ^k}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _j}} &  0 \\\\  {{{ {(n_1)}} _k}} {{{ v} ^i}} {{{ v} ^k}} &  {{{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^i}}} + {{{\\rho}} \\cdot {{{ {(n_1)}} _k}} {{{ v} ^k}} {{{{ \\delta} ^i} _j}}} &  { {(n_1)}} ^i \\\\  {{\\frac{1}{2}}} {{{ {(n_1)}} _k}} {{{ v} ^k}} {{{ v} _l}} {{{ v} ^l}} &  {{{\\frac{1}{2}}} {{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} _l}} {{{ v} ^l}}} + {{{P}} {{{ {(n_1)}} _j}}} + {{{\\rho}} \\cdot {{{ {(n_1)}} _k}} {{{ v} _j}} {{{ v} ^k}}} + {{{P}} {{{ {(n_1)}} _j}} {{\\frac{1}{{(\\gamma_{-1})}}}}} &  {{{{ {(n_1)}} _k}} {{{ v} ^k}} {{\\frac{1}{{(\\gamma_{-1})}}}}} + {{{{ {(n_1)}} _k}} {{{ v} ^k}}}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=71},
	{hidden=false, input="dF_dW_def = dF_dW_def:tidyIndexes():simplifyAddMulDiv()\nprint(F'^I':diff(W'^J'):eq(dF_dW_def));", output="${\\frac{\\partial { F} ^I}{\\partial { W} ^J}} = {\\left[ \\begin{matrix}  {{{ {(n_1)}} _a}} {{{ v} ^a}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _j}} &  0 \\\\  {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} ^i}} &  {{{\\rho}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{{ \\delta} ^i} _j}}} + {{{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^i}}} &  { {(n_1)}} ^i \\\\  {{\\frac{1}{2}}} {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} ^b}} {{{ v} _b}} &  {{{\\frac{1}{2}}} {{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^a}} {{{ v} _a}}} + {{{P}} {{{ {(n_1)}} _j}}} + {{{\\rho}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _j}}} + {{{P}} {{{ {(n_1)}} _j}} {{\\frac{1}{{(\\gamma_{-1})}}}}} &  {{{{ {(n_1)}} _a}} {{{ v} ^a}} {{\\frac{1}{{(\\gamma_{-1})}}}}} + {{{{ {(n_1)}} _a}} {{{ v} ^a}}}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=72},
	{hidden=false, input="-- doesn't work for all indexes, only 'a's\n--dF_dW_def = dF_dW_def:replaceIndex(v'^a' * v'_a', vSq_var)\n-- instead:\ndF_dW_def = dF_dW_def\n\9:replace(v'^a' * v'_a', vSq_var)\n\9:replace(v'^b' * v'_b', vSq_var)\nprint(F'^I':diff(W'^J'):eq(dF_dW_def));", output="${\\frac{\\partial { F} ^I}{\\partial { W} ^J}} = {\\left[ \\begin{matrix}  {{{ {(n_1)}} _a}} {{{ v} ^a}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _j}} &  0 \\\\  {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} ^i}} &  {{{\\rho}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{{ \\delta} ^i} _j}}} + {{{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^i}}} &  { {(n_1)}} ^i \\\\  {{\\frac{1}{2}}} {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{(v)^2}}} &  {{{\\frac{1}{2}}} {{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{(v)^2}}}} + {{{P}} {{{ {(n_1)}} _j}}} + {{{\\rho}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _j}}} + {{{P}} {{{ {(n_1)}} _j}} {{\\frac{1}{{(\\gamma_{-1})}}}}} &  {{{{ {(n_1)}} _a}} {{{ v} ^a}} {{\\frac{1}{{(\\gamma_{-1})}}}}} + {{{{ {(n_1)}} _a}} {{{ v} ^a}}}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=73},
	{hidden=false, input="dF_dW_def = dF_dW_def \n\9:subst(H_total_wrt_W:solve(P), gammaMinusOne_def)()\n\9:subst(gammaMinusOne_def:solve(gamma))\n\9:replace(vSq_var, v'^b' * v'_b')\ndF_dW_def = dF_dW_def:simplifyAddMulDiv():tidyIndexes()\ndF_dW_def = dF_dW_def:simplifyAddMulDiv()\nprint(F'^I':diff(W'^J'):eq(dF_dW_def));", output="${\\frac{\\partial { F} ^I}{\\partial { W} ^J}} = {\\left[ \\begin{matrix}  {{{ {(n_1)}} _a}} {{{ v} ^a}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _j}} &  0 \\\\  {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} ^i}} &  {{{\\rho}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{{ \\delta} ^i} _j}}} + {{{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^i}}} &  { {(n_1)}} ^i \\\\  {{\\frac{1}{2}}} {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _b}} {{{ v} ^b}} &  {{{{H_{total}}}} \\cdot {{{ {(n_1)}} _j}}} + {{{\\rho}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _j}}} &  {{{{ {(n_1)}} _a}} {{{ v} ^a}} {{\\frac{1}{{(\\gamma_{-1})}}}}} + {{{{ {(n_1)}} _a}} {{{ v} ^a}}}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=74},
	{hidden=false, input="print'Flux derivative wrt conserved variables:'\nprint(F'^I':diff(U'^J'):eq(F'^I':diff(W'^L') * W'^L':diff(U'^J')));", output="Flux derivative wrt conserved variables:<br>\n${\\frac{\\partial { F} ^I}{\\partial { U} ^J}} = {{{\\frac{\\partial { F} ^I}{\\partial { W} ^L}}} {{\\frac{\\partial { W} ^L}{\\partial { U} ^J}}}}$<br>\n", outputtype="html", uid=75},
	{hidden=false, input="dF_dU_def = dF_dW_def:reindex{j='k'} * dW_dU_def:reindex{ik='km'}\nprint(F'^I':diff(U'^J'):eq(dF_dU_def));", output="${\\frac{\\partial { F} ^I}{\\partial { U} ^J}} = { {\\left[ \\begin{matrix}  {{{ {(n_1)}} _a}} {{{ v} ^a}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _k}} &  0 \\\\  {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} ^i}} &  {{{\\rho}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{{ \\delta} ^i} _k}}} + {{{\\rho}} \\cdot {{{ {(n_1)}} _k}} {{{ v} ^i}}} &  { {(n_1)}} ^i \\\\  {{\\frac{1}{2}}} {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _b}} {{{ v} ^b}} &  {{{{H_{total}}}} \\cdot {{{ {(n_1)}} _k}}} + {{{\\rho}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _k}}} &  {{{{ {(n_1)}} _a}} {{{ v} ^a}} {{\\frac{1}{{(\\gamma_{-1})}}}}} + {{{{ {(n_1)}} _a}} {{{ v} ^a}}}\\end{matrix} \\right]}  {\\left[ \\begin{matrix}  1 &  0 &  0 \\\\  {\\frac{1}{\\rho}}{\\left({-{{ v} ^k}}\\right)} &  {\\frac{1}{\\rho}} {{{ \\delta} ^k} _j} &  0 \\\\  {{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{{ v} ^m}} {{{ v} ^l}} {{{{ g} _m} _l}} &   {-{{(\\gamma_{-1})}}} {{{ v} _j}} &  {(\\gamma_{-1})}\\end{matrix} \\right]}}$<br>\n", outputtype="html", uid=76},
	{hidden=false, input="dF_dU_def = dF_dU_def:simplifyAddMulDiv()\nprint(F'^I':diff(U'^J'):eq(dF_dU_def));", output="${\\frac{\\partial { F} ^I}{\\partial { U} ^J}} = {\\left[ \\begin{matrix}  {{{{ {(n_1)}} _a}} {{{ v} ^a}}} + {{{-1}} {{{ {(n_1)}} _k}} {{{ v} ^k}}} &  {{{ {(n_1)}} _k}} {{{{ \\delta} ^k} _j}} &  0 \\\\  {{{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} ^i}} {{{ v} ^l}} {{{ v} ^m}} {{{{ g} _m} _l}}} + {{{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} ^i}}} + {{{-1}} {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} ^k}} {{{{ \\delta} ^i} _k}}} + {{{-1}} {{{ {(n_1)}} _k}} {{{ v} ^i}} {{{ v} ^k}}} &  {{{-1}} {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} ^i}} {{{ v} _j}}} + {{{{ {(n_1)}} _a}} {{{ v} ^a}} {{{{ \\delta} ^i} _k}} {{{{ \\delta} ^k} _j}}} + {{{{ {(n_1)}} _k}} {{{ v} ^i}} {{{{ \\delta} ^k} _j}}} &  {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} ^i}} \\\\  {{{\\frac{1}{2}}} {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} ^b}} {{{ v} _b}}} + {{{-1}} {{{H_{total}}}} \\cdot {{{ {(n_1)}} _k}} {{{ v} ^k}} {{\\frac{1}{\\rho}}}} + {{{-1}} {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} ^k}} {{{ v} _k}}} + {{{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} ^l}} {{{ v} ^m}} {{{{ g} _m} _l}}} + {{{\\frac{1}{2}}} {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} ^l}} {{{ v} ^m}} {{{{ g} _m} _l}}} &  {{{-1}} {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _j}}} + {{{-1}} {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _j}}} + {{{{H_{total}}}} \\cdot {{{ {(n_1)}} _k}} {{{{ \\delta} ^k} _j}} {{\\frac{1}{\\rho}}}} + {{{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _k}} {{{{ \\delta} ^k} _j}}} &  {{{{ {(n_1)}} _a}} {{{ v} ^a}}} + {{{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}}}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=77},
	{hidden=false, input="dF_dU_def = dF_dU_def:tidyIndexes()()\ndF_dU_def = dF_dU_def:simplifyMetrics():simplifyAddMulDiv()\ndF_dU_def = dF_dU_def:tidyIndexes():simplifyAddMulDiv()\nprint(F'^I':diff(U'^J'):eq(dF_dU_def));", output="${\\frac{\\partial { F} ^I}{\\partial { U} ^J}} = {\\left[ \\begin{matrix}  0 &  { {(n_1)}} _j &  0 \\\\  {{{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} ^i}} {{{ v} _a}} {{{ v} ^a}}} + {{{-1}} {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} ^i}}} &  {{{-1}} {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} ^i}} {{{ v} _j}}} + {{{{ {(n_1)}} _a}} {{{ v} ^a}} {{{{ \\delta} ^i} _j}}} + {{{{ {(n_1)}} _j}} {{{ v} ^i}}} &  {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} ^i}} \\\\  {{{-1}} {{{H_{total}}}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{\\frac{1}{\\rho}}}} + {{{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _b}} {{{ v} ^b}}} &  {{{-1}} {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _j}}} + {{{{H_{total}}}} \\cdot {{{ {(n_1)}} _j}} {{\\frac{1}{\\rho}}}} &  {{{{ {(n_1)}} _a}} {{{ v} ^a}}} + {{{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}}}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=78},
	{hidden=true, input="print[[Flux derivative matrix times state.  If $\\frac{\\partial F}{\\partial U} \\cdot U = F$ then the equation is said to have the Homogeneity property (Toro proposition 3.4).]]", output="Flux derivative matrix times state.  If $\\frac{\\partial F}{\\partial U} \\cdot U = F$ then the equation is said to have the Homogeneity property (Toro proposition 3.4).<br>\n", outputtype="html", uid=79},
	{hidden=false, input="dF_dU_times_U_def = dF_dU_def * U_def:reindex{i='j'}\nprint((F'^I':diff(U'^J') * U):eq(dF_dU_times_U_def));", output="${{{\\frac{\\partial { F} ^I}{\\partial { U} ^J}}} {{U}}} = { {\\left[ \\begin{matrix}  0 &  { {(n_1)}} _j &  0 \\\\  {{{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} ^i}} {{{ v} _a}} {{{ v} ^a}}} + {{{-1}} {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} ^i}}} &  {{{-1}} {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} ^i}} {{{ v} _j}}} + {{{{ {(n_1)}} _a}} {{{ v} ^a}} {{{{ \\delta} ^i} _j}}} + {{{{ {(n_1)}} _j}} {{{ v} ^i}}} &  {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} ^i}} \\\\  {{{-1}} {{{H_{total}}}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{\\frac{1}{\\rho}}}} + {{{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _b}} {{{ v} ^b}}} &  {{{-1}} {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _j}}} + {{{{H_{total}}}} \\cdot {{{ {(n_1)}} _j}} {{\\frac{1}{\\rho}}}} &  {{{{ {(n_1)}} _a}} {{{ v} ^a}}} + {{{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}}}\\end{matrix} \\right]}  {\\left[ \\begin{matrix}  \\rho \\\\  { m} ^j \\\\  {E_{total}}\\end{matrix} \\right]}}$<br>\n", outputtype="html", uid=80},
	{hidden=false, input="dF_dU_times_U_def = dF_dU_times_U_def:subst(H_total_wrt_W, m_from_v:reindex{i='j'}, E_total_def, e_kin_def, vSq_def, e_int_def)\nprint((F'^I':diff(U'^J') * U):eq(dF_dU_times_U_def));", output="${{{\\frac{\\partial { F} ^I}{\\partial { U} ^J}}} {{U}}} = { {\\left[ \\begin{matrix}  0 &  { {(n_1)}} _j &  0 \\\\  {{{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} ^i}} {{{ v} _a}} {{{ v} ^a}}} + {{{-1}} {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} ^i}}} &  {{{-1}} {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} ^i}} {{{ v} _j}}} + {{{{ {(n_1)}} _a}} {{{ v} ^a}} {{{{ \\delta} ^i} _j}}} + {{{{ {(n_1)}} _j}} {{{ v} ^i}}} &  {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} ^i}} \\\\  {{{-1}} {{{ {(n_1)}} _a}} {{{ v} ^a}} {{\\frac{1}{\\rho}}} {{\\left({{P} + {{{P}} {{\\frac{1}{{(\\gamma_{-1})}}}}} + {{{\\frac{1}{2}}} {{\\rho}} \\cdot {{{{{ v} ^k}} {{{ v} ^l}} {{{{ g} _k} _l}}}}}}\\right)}}} + {{{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _b}} {{{ v} ^b}}} &  {{{-1}} {{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _j}}} + {{{{ {(n_1)}} _j}} {{\\frac{1}{\\rho}}} {{\\left({{P} + {{{P}} {{\\frac{1}{{(\\gamma_{-1})}}}}} + {{{\\frac{1}{2}}} {{\\rho}} \\cdot {{{{{ v} ^k}} {{{ v} ^l}} {{{{ g} _k} _l}}}}}}\\right)}}} &  {{{{ {(n_1)}} _a}} {{{ v} ^a}}} + {{{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}}}\\end{matrix} \\right]}  {\\left[ \\begin{matrix}  \\rho \\\\  {{\\rho}} \\cdot {{{ v} ^j}} \\\\  {{\\rho}} \\cdot {{\\left({{{{\\frac{1}{2}}} {{{ v} ^k}} {{{ v} ^l}} {{{{ g} _k} _l}}} + {\\frac{P}{{{{(\\gamma_{-1})}}} \\cdot {{\\rho}}}}}\\right)}}\\end{matrix} \\right]}}$<br>\n", outputtype="html", uid=81},
	{hidden=false, input="dF_dU_times_U_def = dF_dU_times_U_def()\nprint((F'^I':diff(U'^J') * U):eq(dF_dU_times_U_def));", output="${{{\\frac{\\partial { F} ^I}{\\partial { U} ^J}}} {{U}}} = {\\left[ \\begin{matrix}  {{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^j}} \\\\  {\\frac{1}{2}}{\\left({{-{{{2}} {{{(\\gamma_{-1})}}} \\cdot {{\\rho}} \\cdot {{{ {(n_1)}} ^i}} {{{ v} _j}} {{{ v} ^j}}}} + {{{2}} {{\\rho}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} ^j}} {{{{ \\delta} ^i} _j}}} + {{{2}} {{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^i}} {{{ v} ^j}}} + {{{{(\\gamma_{-1})}}} \\cdot {{\\rho}} \\cdot {{{ {(n_1)}} ^i}} {{{ v} ^k}} {{{ v} ^l}} {{{{ g} _k} _l}}} + {{{{2}} {{P}} {{{ {(n_1)}} ^i}}} - {{{2}} {{\\rho}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} ^i}}}} + {{{{(\\gamma_{-1})}}} \\cdot {{\\rho}} \\cdot {{{ {(n_1)}} ^i}} {{{ v} ^a}} {{{ v} _a}}}}\\right)} \\\\  \\frac{{{{{\\rho}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} ^k}} {{{ v} ^l}} {{{{ g} _k} _l}} {{{{(\\gamma_{-1})}}^{2}}}} - {{{2}} {{\\rho}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _j}} {{{ v} ^j}} {{{{(\\gamma_{-1})}}^{2}}}}} + {{{2}} {{P}} {{{ {(n_1)}} _j}} {{{ v} ^j}}} + {{{2}} {{{(\\gamma_{-1})}}} \\cdot {{P}} {{{ {(n_1)}} _j}} {{{ v} ^j}}} + {{{{(\\gamma_{-1})}}} \\cdot {{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^j}} {{{ v} ^k}} {{{ v} ^l}} {{{{ g} _k} _l}}} + {{{\\rho}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _b}} {{{ v} ^b}} {{{{(\\gamma_{-1})}}^{2}}}}}{{{2}} {{{(\\gamma_{-1})}}}}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=82},
	{hidden=false, input="dF_dU_times_U_def = dF_dU_times_U_def\n\9:simplifyMetrics()\n\9:tidyIndexes()\n\9:reindex{ab='jk'}\n\9:replace(v'_k', g'_kl' * v'^l')\n\9:simplifyAddMulDiv()\nprint((F'^I':diff(U'^J') * U):eq(dF_dU_times_U_def));", output="${{{\\frac{\\partial { F} ^I}{\\partial { U} ^J}}} {{U}}} = {\\left[ \\begin{matrix}  {{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^j}} \\\\  {{{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^i}} {{{ v} ^j}}} + {{{P}} {{{ {(n_1)}} ^i}}} \\\\  {{{P}} {{{ {(n_1)}} _j}} {{{ v} ^j}}} + {{{P}} {{{ {(n_1)}} _j}} {{{ v} ^j}} {{\\frac{1}{{(\\gamma_{-1})}}}}} + {{{\\frac{1}{2}}} {{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^j}} {{{ v} ^k}} {{{ v} ^l}} {{{{ g} _k} _l}}}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=83},
	{hidden=false, input="print(F'^I':eq(F_def));", output="${{ F} ^I} = {\\left[ \\begin{matrix}  {{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^j}} \\\\  {{{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^i}} {{{ v} ^j}}} + {{{P}} {{{ {(n_1)}} ^i}}} \\\\  {{{P}} {{{ {(n_1)}} _j}} {{{ v} ^j}}} + {{{P}} {{{ {(n_1)}} _j}} {{{ v} ^j}} {{\\frac{1}{{(\\gamma_{-1})}}}}} + {{{\\frac{1}{2}}} {{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^j}} {{{ v} ^k}} {{{ v} ^l}} {{{{ g} _k} _l}}}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=84},
	{hidden=true, input="print[[Looks like for the Euler fluid equations, $\\frac{\\partial F}{\\partial U} \\cdot U = F$.]]", output="Looks like for the Euler fluid equations, $\\frac{\\partial F}{\\partial U} \\cdot U = F$.<br>\n", outputtype="html", uid=85},
	{hidden=true, input="print'Acoustic matrix:'", output="Acoustic matrix:<br>\n", outputtype="html", uid=86},
	{hidden=false, input="A_lhs = A'^I_J' + n'_a' * v'^a' * delta'^I_J'\nprint(A_lhs:eq(W'^I':diff(U'^K') * F'^K':diff(W'^J')));", output="${{{{ A} ^I} _J} + {{{{ {(n_1)}} _a}} {{{ v} ^a}} {{{{ \\delta} ^I} _J}}}} = {{{\\frac{\\partial { W} ^I}{\\partial { U} ^K}}} {{\\frac{\\partial { F} ^K}{\\partial { W} ^J}}}}$<br>\n", outputtype="html", uid=87},
	{hidden=false, input="A_plus_delta_def = dW_dU_def:reindex{jk='km'} * dF_dW_def:reindex{ik='kn'}\nprint(A_lhs:eq(A_plus_delta_def));", output="${{{{ A} ^I} _J} + {{{{ {(n_1)}} _a}} {{{ v} ^a}} {{{{ \\delta} ^I} _J}}}} = { {\\left[ \\begin{matrix}  1 &  0 &  0 \\\\  {\\frac{1}{\\rho}}{\\left({-{{ v} ^i}}\\right)} &  {\\frac{1}{\\rho}} {{{ \\delta} ^i} _k} &  0 \\\\  {{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{{ v} ^m}} {{{ v} ^l}} {{{{ g} _m} _l}} &   {-{{(\\gamma_{-1})}}} {{{ v} _k}} &  {(\\gamma_{-1})}\\end{matrix} \\right]}  {\\left[ \\begin{matrix}  {{{ {(n_1)}} _a}} {{{ v} ^a}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _j}} &  0 \\\\  {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} ^k}} &  {{{\\rho}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{{ \\delta} ^k} _j}}} + {{{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^k}}} &  { {(n_1)}} ^k \\\\  {{\\frac{1}{2}}} {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _b}} {{{ v} ^b}} &  {{{{H_{total}}}} \\cdot {{{ {(n_1)}} _j}}} + {{{\\rho}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _j}}} &  {{{{ {(n_1)}} _a}} {{{ v} ^a}} {{\\frac{1}{{(\\gamma_{-1})}}}}} + {{{{ {(n_1)}} _a}} {{{ v} ^a}}}\\end{matrix} \\right]}}$<br>\n", outputtype="html", uid=88},
	{hidden=false, input="A_plus_delta_def = A_plus_delta_def()\nprint(A_lhs:eq(A_plus_delta_def));", output="${{{{ A} ^I} _J} + {{{{ {(n_1)}} _a}} {{{ v} ^a}} {{{{ \\delta} ^I} _J}}}} = {\\left[ \\begin{matrix}  {{{ {(n_1)}} _a}} {{{ v} ^a}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _j}} &  0 \\\\  {\\frac{1}{\\rho}} {{{{ {(n_1)}} _a}} {{{ v} ^a}} {{\\left({{-{{ v} ^i}} + {{{{ v} ^k}} {{{{ \\delta} ^i} _k}}}}\\right)}}} &  {{{{{ {(n_1)}} _a}} {{{ v} ^a}} {{{{ \\delta} ^i} _k}} {{{{ \\delta} ^k} _j}}} - {{{{ {(n_1)}} _j}} {{{ v} ^i}}}} + {{{{ {(n_1)}} _j}} {{{ v} ^k}} {{{{ \\delta} ^i} _k}}} &  {\\frac{1}{\\rho}} {{{{ {(n_1)}} ^k}} {{{{ \\delta} ^i} _k}}} \\\\  {\\frac{1}{2}} {{{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{\\left({{{{{ v} ^l}} {{{ v} ^m}} {{{{ g} _m} _l}}} + {{{{{ v} ^b}} {{{ v} _b}}} - {{{2}} {{{ v} ^k}} {{{ v} _k}}}}}\\right)}}} &  {\\frac{1}{2}} {{{{(\\gamma_{-1})}}} \\cdot {{\\left({{{{2}} {{{H_{total}}}} \\cdot {{{ {(n_1)}} _j}}} + {{{{2}} {{\\rho}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _j}}} - {{{2}} {{\\rho}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{ v} _k}} {{{{ \\delta} ^k} _j}}}} + {{{{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^l}} {{{ v} ^m}} {{{{ g} _m} _l}}} - {{{2}} {{\\rho}} \\cdot {{{ {(n_1)}} _j}} {{{ v} ^k}} {{{ v} _k}}}}}\\right)}}} &  {-{{{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} ^k}} {{{ v} _k}}}} + {{{{(\\gamma_{-1})}}} \\cdot {{{ {(n_1)}} _a}} {{{ v} ^a}}} + {{{{ {(n_1)}} _a}} {{{ v} ^a}}}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=89},
	{hidden=false, input="-- TODO if you don't do :factorDivision() before :tidyIndexes() then you can get mismatching indexes, and the subsequent :simplify() will cause a stack overflow\nA_plus_delta_def = A_plus_delta_def:simplifyMetrics()\nA_plus_delta_def = A_plus_delta_def:simplifyAddMulDiv()\nA_plus_delta_def = A_plus_delta_def:tidyIndexes()\nA_plus_delta_def = A_plus_delta_def:simplifyAddMulDiv()\nA_plus_delta_def = A_plus_delta_def  \n\9:replace(n'^a' * v'_a', n'_a' * v'^a')\n\9:replace(v'^a' * v'_a', vSq_var)\n\9:subst(H_total_wrt_W, gammaMinusOne_def)()\nprint(A_lhs:eq(A_plus_delta_def));", output="${{{{ A} ^I} _J} + {{{{ {(n_1)}} _a}} {{{ v} ^a}} {{{{ \\delta} ^I} _J}}}} = {\\left[ \\begin{matrix}  {{{ {(n_1)}} _a}} {{{ v} ^a}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _j}} &  0 \\\\  0 &  {{{ {(n_1)}} _a}} {{{ v} ^a}} {{{{ \\delta} ^i} _j}} &  {\\frac{1}{\\rho}} {{ {(n_1)}} ^i} \\\\  0 &  {{P}} {{\\gamma}} \\cdot {{{ {(n_1)}} _j}} &  {{{ {(n_1)}} _a}} {{{ v} ^a}}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=90},
	{hidden=false, input="A_def = (A_plus_delta_def - Matrix.identity(3) * Matrix:lambda({3,3}, function(i,j)\n\9return i~=j and 0 or (n'_a' * v'^a' * (i==2 and delta'^i_j' or 1)) \nend))()\nprint(A'^I_J':eq(A_def));", output="${{{ A} ^I} _J} = {\\left[ \\begin{matrix}  0 &  {{\\rho}} \\cdot {{{ {(n_1)}} _j}} &  0 \\\\  0 &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} ^i} \\\\  0 &  {{P}} {{\\gamma}} \\cdot {{{ {(n_1)}} _j}} &  0\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=91},
	{hidden=false, input="function expandMatrix3to5(A)\n\9return Matrix:lambda({5,5}, function(i,j)\n\9\9local remap = {1,2,2,2,3}\n\9\9local replace = {nil, 'x','y','z', nil}\n\9\9return A[remap[i]][remap[j]]:map(function(x)\n\9\9\9if x == delta'^i_j' then\n\9\9\9\9return i == j and 1 or 0\n\9\9\9end\n\9\9end):map(function(x)\n\9\9\9if TensorIndex:isa(x) then\n\9\9\9\9if x.symbol == 'i' then\n\9\9\9\9\9x = x:clone()\n\9\9\9\9\9x.symbol = assert(replace[i])\n\9\9\9\9\9return x\n\9\9\9\9elseif x.symbol == 'j' then\n\9\9\9\9\9x = x:clone()\n\9\9\9\9\9x.symbol = assert(replace[j])\n\9\9\9\9\9return x\n\9\9\9\9end\n\9\9\9end\n\9\9end)()\n\9end)\nend", output="", outputtype="html", uid=92},
	{hidden=true, input="print'Acoustic matrix, expanded:'", output="Acoustic matrix, expanded:<br>\n", outputtype="html", uid=93},
	{hidden=false, input="A_expanded = expandMatrix3to5(A_def);\nprint(A'^I_J':eq(A_expanded));", output="${{{ A} ^I} _J} = {\\left[ \\begin{matrix}  0 &  {{\\rho}} \\cdot {{{ {(n_1)}} _x}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _y}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _z}} &  0 \\\\  0 &  0 &  0 &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} ^x} \\\\  0 &  0 &  0 &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} ^y} \\\\  0 &  0 &  0 &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} ^z} \\\\  0 &  {{P}} {{\\gamma}} \\cdot {{{ {(n_1)}} _x}} &  {{P}} {{\\gamma}} \\cdot {{{ {(n_1)}} _y}} &  {{P}} {{\\gamma}} \\cdot {{{ {(n_1)}} _z}} &  0\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=94},
	{hidden=false, input="P_for_Cs = Cs_def:solve(P)\nA_expanded = A_expanded:subst(P_for_Cs)()\nprint(A'^I_J':eq(A_expanded));", output="${{{ A} ^I} _J} = {\\left[ \\begin{matrix}  0 &  {{\\rho}} \\cdot {{{ {(n_1)}} _x}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _y}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _z}} &  0 \\\\  0 &  0 &  0 &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} ^x} \\\\  0 &  0 &  0 &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} ^y} \\\\  0 &  0 &  0 &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} ^z} \\\\  0 &  {{\\rho}} \\cdot {{{ {(n_1)}} _x}} {{{{c_s}}^{2}}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _y}} {{{{c_s}}^{2}}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _z}} {{{{c_s}}^{2}}} &  0\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=95},
	{hidden=false, input="print'...in just the Cartesian x-axis...'\nA_expanded = A_expanded\n\9:replace(n'_x', 1)\n\9:replace(n'_y', 0)\n\9:replace(n'_z', 0)\n\9:replace(n'^x', 1)\n\9:replace(n'^y', 0)\n\9:replace(n'^z', 0)\n\9:simplify()\nprint(A'^I_J':eq(A_expanded));", output="...in just the Cartesian x-axis...<br>\n${{{ A} ^I} _J} = {\\left[ \\begin{matrix}  0 &  \\rho &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  \\frac{1}{\\rho} \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  {{\\rho}} \\cdot {{{{c_s}}^{2}}} &  0 &  0 &  0\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=96},
	{hidden=false, input="A_expanded_wrt_W = A_expanded:subst(Cs_def)()\nprint(A'^I_J':eq(A_expanded_wrt_W));", output="${{{ A} ^I} _J} = {\\left[ \\begin{matrix}  0 &  \\rho &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  \\frac{1}{\\rho} \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  {{P}} {{\\gamma}} &  0 &  0 &  0\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=97},
	{hidden=false, input="print((W'^I_,t' + (A'^I_J' + delta'^I_J' * v'^k') * W'^J_,k'):eq(0));", output="${{{{ W} ^I} _{,t}} + {{{\\left({{{{ A} ^I} _J} + {{{{{ \\delta} ^I} _J}} {{{ v} ^k}}}}\\right)}} {{{{ W} ^J} _{,k}}}}} = {0}$<br>\n", outputtype="html", uid=98},
	{hidden=false, input="W_dense = Matrix{rho, v'^x', v'^y', v'^z', P}:T()", output="$\\left[ \\begin{matrix}  \\rho \\\\  { v} ^x \\\\  { v} ^y \\\\  { v} ^z \\\\  P\\end{matrix} \\right]$", outputtype="html", uid=99},
	{hidden=false, input="-- hmm, do the comma derivatives not distribute through matrices, or do they simply not distribute before matrix add/mul operations are evaluated?\n-- looks like comma derivatives do not distribute through matrices ...\n-- makes sense.  i still haven't done any matching between index symbols and variable names, like I plan to.\n-- for now symbols are as unique as their strings, and separate of variables.\n--local eqn = (W_dense'_,t' + (A_expanded_wrt_W + v'^x' * Matrix.identity(5)) * W_dense'_,x'):eq(Matrix:zeros{5, 1})\neqn = (W_dense:diff(t) + (A_expanded_wrt_W + v'^x' * Matrix.identity(5)) * W_dense:diff(x)):eq(Matrix:zeros{5, 1})", output="${{{\\frac{\\partial}{\\partial t}}\\left( \\left[ \\begin{matrix}  \\rho \\\\  { v} ^x \\\\  { v} ^y \\\\  { v} ^z \\\\  P\\end{matrix} \\right]\\right)} + {{{\\left({{\\left[ \\begin{matrix}  0 &  \\rho &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  \\frac{1}{\\rho} \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  {{P}} {{\\gamma}} &  0 &  0 &  0\\end{matrix} \\right]} + {{{{ v} ^x}}  {\\left[ \\begin{matrix}  1 &  0 &  0 &  0 &  0 \\\\  0 &  1 &  0 &  0 &  0 \\\\  0 &  0 &  1 &  0 &  0 \\\\  0 &  0 &  0 &  1 &  0 \\\\  0 &  0 &  0 &  0 &  1\\end{matrix} \\right]}}}\\right)}} {{{\\frac{\\partial}{\\partial x}}\\left( \\left[ \\begin{matrix}  \\rho \\\\  { v} ^x \\\\  { v} ^y \\\\  { v} ^z \\\\  P\\end{matrix} \\right]\\right)}}}} = {\\left[ \\begin{matrix}  0 \\\\  0 \\\\  0 \\\\  0 \\\\  0\\end{matrix} \\right]}$", outputtype="html", uid=100},
	{hidden=false, input="eqn = eqn()\ndt_W_eqns = eqn:unravel()\nfor _,eqn in ipairs(dt_W_eqns) do\n\9print(eqn:simplifyAddMulDiv())\nend;", output="${{\\frac{\\partial \\rho}{\\partial t}} + {{{{ v} ^x}} {{\\frac{\\partial \\rho}{\\partial x}}}} + {{{\\rho}} \\cdot {{\\frac{\\partial { v} ^x}{\\partial x}}}}} = {0}$<br>\n${{\\frac{\\partial { v} ^x}{\\partial t}} + {{{{ v} ^x}} {{\\frac{\\partial { v} ^x}{\\partial x}}}} + {{{\\frac{\\partial P}{\\partial x}}} {{\\frac{1}{\\rho}}}}} = {0}$<br>\n${{\\frac{\\partial { v} ^y}{\\partial t}} + {{{{ v} ^x}} {{\\frac{\\partial { v} ^y}{\\partial x}}}}} = {0}$<br>\n${{\\frac{\\partial { v} ^z}{\\partial t}} + {{{{ v} ^x}} {{\\frac{\\partial { v} ^z}{\\partial x}}}}} = {0}$<br>\n${{\\frac{\\partial P}{\\partial t}} + {{{P}} {{\\gamma}} \\cdot {{\\frac{\\partial { v} ^x}{\\partial x}}}} + {{{{ v} ^x}} {{\\frac{\\partial P}{\\partial x}}}}} = {0}$<br>\n", outputtype="html", uid=101},
	{hidden=false, input="Tensor.coords{{variables=xs}};", output="", outputtype="html", uid=102},
	{hidden=false, input="nl_dense = Tensor('_i', function(i) return n('_'..xs[i].name) end)\nnu_dense = Tensor('^i', function(i) return n('^'..xs[i].name) end)\nn2 = var'(n_2)'\nn2l_dense = Tensor('_i', function(i) return n2('_'..xs[i].name) end)\nn2u_dense = Tensor('^i', function(i) return n2('^'..xs[i].name) end)\nn3 = var'(n_3)'\nn3l_dense = Tensor('_i', function(i) return n3('_'..xs[i].name) end)\nn3u_dense = Tensor('^i', function(i) return n3('^'..xs[i].name) end)\n\nnls = {nl_dense, n2l_dense, n3l_dense}\nnus = {nu_dense, n2u_dense, n3u_dense}\n\n-- TODO this is just |n_1|, but in non-Cartesian metric |n_1| != |n_2| != |n_3|\n-- for example, in a coordinate basis, n_i = d/dx^i, so (n_i)_j = delta_ij, so |(n_i) lowered|L2 = 1\n-- and (n_i)^j = g^ij ... in a diagonal metric ... g^ii delta^ij ... so |(n_i) raised|L2 = sqrt(g^ii)\n-- and the metric weighted length: |n_i| = sqrt((n_i)_j (n_i)^j) = sqrt(g^ii)\n-- so as you can see, each separate normal basis has a separate length.  \n-- so much for orthonormalizing.\nn1Len = var'|n_1|'\nn2Len = var'|n_2|'\nn3Len = var'|n_3|'\nn1LenSq_def = (n1Len^2):eq((nl_dense'_i' * nu_dense'^i')())\nn2LenSq_def = (n2Len^2):eq((n2l_dense'_i' * n2u_dense'^i')())\nn3LenSq_def = (n3Len^2):eq((n3l_dense'_i' * n3u_dense'^i')())\nprint(n1LenSq_def)\nprint(n2LenSq_def)\nprint(n3LenSq_def);", output="${{{|n_1|}}^{2}} = {{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^x}}} + {{{{ {(n_1)}} _y}} {{{ {(n_1)}} ^y}}} + {{{{ {(n_1)}} _z}} {{{ {(n_1)}} ^z}}}}$<br>\n${{{|n_2|}}^{2}} = {{{{{ {(n_2)}} _x}} {{{ {(n_2)}} ^x}}} + {{{{ {(n_2)}} _y}} {{{ {(n_2)}} ^y}}} + {{{{ {(n_2)}} _z}} {{{ {(n_2)}} ^z}}}}$<br>\n${{{|n_3|}}^{2}} = {{{{{ {(n_3)}} _x}} {{{ {(n_3)}} ^x}}} + {{{{ {(n_3)}} _y}} {{{ {(n_3)}} ^y}}} + {{{{ {(n_3)}} _z}} {{{ {(n_3)}} ^z}}}}$<br>\n", outputtype="html", uid=103},
	{hidden=false, input="print[[ $(n_m)_i (n_n)^i = (n_m)_i (n_n)_j g^{ij} = \\delta_{mn} |n_m|^2$ ]]\nprint[[ For $|n_i|$ is the metric-weighted norm. ]];", output=" $(n_m)_i (n_n)^i = (n_m)_i (n_n)_j g^{ij} = \\delta_{mn} |n_m|^2$ <br>\n For $|n_i|$ is the metric-weighted norm. <br>\n", outputtype="html", uid=104},
	{hidden=false, input="Nl_3x3mat = Matrix(\n\9{nl_dense[1], nl_dense[2], nl_dense[3]},\n\9{n2l_dense[1], n2l_dense[2], n2l_dense[3]},\n\9{n3l_dense[1], n3l_dense[2], n3l_dense[3]}\n):T()\nNu_3x3mat = Matrix(\n\9{nu_dense[1], nu_dense[2], nu_dense[3]},\n\9{n2u_dense[1], n2u_dense[2], n2u_dense[3]},\n\9{n3u_dense[1], n3u_dense[2], n3u_dense[3]}\n):T()\n\nprint((var'N^\\\\flat_{3x3}''^T' * var'N^\\\\sharp_{3x3}'):eq(\n\9Nl_3x3mat:T() * Nu_3x3mat\n):eq(\n\9(Nl_3x3mat:T() * Nu_3x3mat)()\n):eq(\n\9Matrix.diagonal(n1Len^2, n2Len^2, n3Len^2)\n));", output="${{{{{{ {N^\\flat_{3x3}}} ^T}} {{{N^\\sharp_{3x3}}}}} = { {\\left[ \\begin{matrix}  { {(n_1)}} _x &  { {(n_1)}} _y &  { {(n_1)}} _z \\\\  { {(n_2)}} _x &  { {(n_2)}} _y &  { {(n_2)}} _z \\\\  { {(n_3)}} _x &  { {(n_3)}} _y &  { {(n_3)}} _z\\end{matrix} \\right]}  {\\left[ \\begin{matrix}  { {(n_1)}} ^x &  { {(n_2)}} ^x &  { {(n_3)}} ^x \\\\  { {(n_1)}} ^y &  { {(n_2)}} ^y &  { {(n_3)}} ^y \\\\  { {(n_1)}} ^z &  { {(n_2)}} ^z &  { {(n_3)}} ^z\\end{matrix} \\right]}}} = {\\left[ \\begin{matrix}  {{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _x}}} + {{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _y}}} + {{{{ {(n_1)}} ^z}} {{{ {(n_1)}} _z}}} &  {{{{ {(n_1)}} _x}} {{{ {(n_2)}} ^x}}} + {{{{ {(n_1)}} _y}} {{{ {(n_2)}} ^y}}} + {{{{ {(n_1)}} _z}} {{{ {(n_2)}} ^z}}} &  {{{{ {(n_1)}} _x}} {{{ {(n_3)}} ^x}}} + {{{{ {(n_1)}} _y}} {{{ {(n_3)}} ^y}}} + {{{{ {(n_1)}} _z}} {{{ {(n_3)}} ^z}}} \\\\  {{{{ {(n_1)}} ^x}} {{{ {(n_2)}} _x}}} + {{{{ {(n_1)}} ^y}} {{{ {(n_2)}} _y}}} + {{{{ {(n_1)}} ^z}} {{{ {(n_2)}} _z}}} &  {{{{ {(n_2)}} ^x}} {{{ {(n_2)}} _x}}} + {{{{ {(n_2)}} ^y}} {{{ {(n_2)}} _y}}} + {{{{ {(n_2)}} ^z}} {{{ {(n_2)}} _z}}} &  {{{{ {(n_2)}} _x}} {{{ {(n_3)}} ^x}}} + {{{{ {(n_2)}} _y}} {{{ {(n_3)}} ^y}}} + {{{{ {(n_2)}} _z}} {{{ {(n_3)}} ^z}}} \\\\  {{{{ {(n_1)}} ^x}} {{{ {(n_3)}} _x}}} + {{{{ {(n_1)}} ^y}} {{{ {(n_3)}} _y}}} + {{{{ {(n_1)}} ^z}} {{{ {(n_3)}} _z}}} &  {{{{ {(n_2)}} ^x}} {{{ {(n_3)}} _x}}} + {{{{ {(n_2)}} ^y}} {{{ {(n_3)}} _y}}} + {{{{ {(n_2)}} ^z}} {{{ {(n_3)}} _z}}} &  {{{{ {(n_3)}} ^x}} {{{ {(n_3)}} _x}}} + {{{{ {(n_3)}} ^y}} {{{ {(n_3)}} _y}}} + {{{{ {(n_3)}} ^z}} {{{ {(n_3)}} _z}}}\\end{matrix} \\right]}} = {\\left[ \\begin{matrix}  {{|n_1|}}^{2} &  0 &  0 \\\\  0 &  {{|n_2|}}^{2} &  0 \\\\  0 &  0 &  {{|n_3|}}^{2}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=105},
	{hidden=false, input="print('In terms of identity:')\nprint((var'N^\\\\flat_{3x3}''^T' * (var'N^\\\\sharp_{3x3}' * var'N^\\\\parallel_{3x3}'^-1)):eq(\n\9Nl_3x3mat:T() * (\n\9\9Nu_3x3mat * Matrix.diagonal(1/n1Len^2, 1/n2Len^2, 1/n3Len^2)\n\9)()\n):eq(\n\9Matrix.identity(3)\n));", output="In terms of identity:<br>\n${{{{{ {N^\\flat_{3x3}}} ^T}} {{{N^\\sharp_{3x3}}}} \\cdot {{{{N^\\parallel_{3x3}}}^{-1}}}} = { {\\left[ \\begin{matrix}  { {(n_1)}} _x &  { {(n_1)}} _y &  { {(n_1)}} _z \\\\  { {(n_2)}} _x &  { {(n_2)}} _y &  { {(n_2)}} _z \\\\  { {(n_3)}} _x &  { {(n_3)}} _y &  { {(n_3)}} _z\\end{matrix} \\right]}  {\\left[ \\begin{matrix}  \\frac{{ {(n_1)}} ^x}{{{|n_1|}}^{2}} &  \\frac{{ {(n_2)}} ^x}{{{|n_2|}}^{2}} &  \\frac{{ {(n_3)}} ^x}{{{|n_3|}}^{2}} \\\\  \\frac{{ {(n_1)}} ^y}{{{|n_1|}}^{2}} &  \\frac{{ {(n_2)}} ^y}{{{|n_2|}}^{2}} &  \\frac{{ {(n_3)}} ^y}{{{|n_3|}}^{2}} \\\\  \\frac{{ {(n_1)}} ^z}{{{|n_1|}}^{2}} &  \\frac{{ {(n_2)}} ^z}{{{|n_2|}}^{2}} &  \\frac{{ {(n_3)}} ^z}{{{|n_3|}}^{2}}\\end{matrix} \\right]}}} = {\\left[ \\begin{matrix}  1 &  0 &  0 \\\\  0 &  1 &  0 \\\\  0 &  0 &  1\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=106},
	{hidden=true, input="print'Now if $A A^{-1} = I$ then $A^{-1} A = I$:'", output="Now if $A A^{-1} = I$ then $A^{-1} A = I$:<br>\n", outputtype="html", uid=107},
	{hidden=false, input="print((\n\9(var'N^\\\\sharp_{3x3}' * var'N^\\\\parallel_{3x3}'^-1) * var'N^\\\\flat_{3x3}''^T'\n):eq(\n\9(Nu_3x3mat * Matrix.diagonal(1/n1Len^2, 1/n2Len^2, 1/n3Len^2))() * Nl_3x3mat:T()\n):eq(\n\9(\n\9\9Nu_3x3mat * Matrix.diagonal(1/n1Len^2, 1/n2Len^2, 1/n3Len^2) * Nl_3x3mat:T()\n\9):simplifyAddMulDiv()\n):eq(\n\9Matrix.identity(3)\n))", output="${{{{{{N^\\sharp_{3x3}}}} \\cdot {{{{N^\\parallel_{3x3}}}^{-1}}} {{{ {N^\\flat_{3x3}}} ^T}}} = { {\\left[ \\begin{matrix}  \\frac{{ {(n_1)}} ^x}{{{|n_1|}}^{2}} &  \\frac{{ {(n_2)}} ^x}{{{|n_2|}}^{2}} &  \\frac{{ {(n_3)}} ^x}{{{|n_3|}}^{2}} \\\\  \\frac{{ {(n_1)}} ^y}{{{|n_1|}}^{2}} &  \\frac{{ {(n_2)}} ^y}{{{|n_2|}}^{2}} &  \\frac{{ {(n_3)}} ^y}{{{|n_3|}}^{2}} \\\\  \\frac{{ {(n_1)}} ^z}{{{|n_1|}}^{2}} &  \\frac{{ {(n_2)}} ^z}{{{|n_2|}}^{2}} &  \\frac{{ {(n_3)}} ^z}{{{|n_3|}}^{2}}\\end{matrix} \\right]}  {\\left[ \\begin{matrix}  { {(n_1)}} _x &  { {(n_1)}} _y &  { {(n_1)}} _z \\\\  { {(n_2)}} _x &  { {(n_2)}} _y &  { {(n_2)}} _z \\\\  { {(n_3)}} _x &  { {(n_3)}} _y &  { {(n_3)}} _z\\end{matrix} \\right]}}} = {\\left[ \\begin{matrix}  {{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^x}} {{\\frac{1}{{{|n_1|}}^{2}}}}} + {{{{ {(n_2)}} _x}} {{{ {(n_2)}} ^x}} {{\\frac{1}{{{|n_2|}}^{2}}}}} + {{{{ {(n_3)}} ^x}} {{{ {(n_3)}} _x}} {{\\frac{1}{{{|n_3|}}^{2}}}}} &  {{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _y}} {{\\frac{1}{{{|n_1|}}^{2}}}}} + {{{{ {(n_2)}} ^x}} {{{ {(n_2)}} _y}} {{\\frac{1}{{{|n_2|}}^{2}}}}} + {{{{ {(n_3)}} ^x}} {{{ {(n_3)}} _y}} {{\\frac{1}{{{|n_3|}}^{2}}}}} &  {{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _z}} {{\\frac{1}{{{|n_1|}}^{2}}}}} + {{{{ {(n_2)}} ^x}} {{{ {(n_2)}} _z}} {{\\frac{1}{{{|n_2|}}^{2}}}}} + {{{{ {(n_3)}} ^x}} {{{ {(n_3)}} _z}} {{\\frac{1}{{{|n_3|}}^{2}}}}} \\\\  {{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^y}} {{\\frac{1}{{{|n_1|}}^{2}}}}} + {{{{ {(n_2)}} _x}} {{{ {(n_2)}} ^y}} {{\\frac{1}{{{|n_2|}}^{2}}}}} + {{{{ {(n_3)}} _x}} {{{ {(n_3)}} ^y}} {{\\frac{1}{{{|n_3|}}^{2}}}}} &  {{{{ {(n_1)}} _y}} {{{ {(n_1)}} ^y}} {{\\frac{1}{{{|n_1|}}^{2}}}}} + {{{{ {(n_2)}} _y}} {{{ {(n_2)}} ^y}} {{\\frac{1}{{{|n_2|}}^{2}}}}} + {{{{ {(n_3)}} ^y}} {{{ {(n_3)}} _y}} {{\\frac{1}{{{|n_3|}}^{2}}}}} &  {{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _z}} {{\\frac{1}{{{|n_1|}}^{2}}}}} + {{{{ {(n_2)}} ^y}} {{{ {(n_2)}} _z}} {{\\frac{1}{{{|n_2|}}^{2}}}}} + {{{{ {(n_3)}} ^y}} {{{ {(n_3)}} _z}} {{\\frac{1}{{{|n_3|}}^{2}}}}} \\\\  {{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^z}} {{\\frac{1}{{{|n_1|}}^{2}}}}} + {{{{ {(n_2)}} _x}} {{{ {(n_2)}} ^z}} {{\\frac{1}{{{|n_2|}}^{2}}}}} + {{{{ {(n_3)}} _x}} {{{ {(n_3)}} ^z}} {{\\frac{1}{{{|n_3|}}^{2}}}}} &  {{{{ {(n_1)}} _y}} {{{ {(n_1)}} ^z}} {{\\frac{1}{{{|n_1|}}^{2}}}}} + {{{{ {(n_2)}} _y}} {{{ {(n_2)}} ^z}} {{\\frac{1}{{{|n_2|}}^{2}}}}} + {{{{ {(n_3)}} _y}} {{{ {(n_3)}} ^z}} {{\\frac{1}{{{|n_3|}}^{2}}}}} &  {{{{ {(n_1)}} _z}} {{{ {(n_1)}} ^z}} {{\\frac{1}{{{|n_1|}}^{2}}}}} + {{{{ {(n_2)}} _z}} {{{ {(n_2)}} ^z}} {{\\frac{1}{{{|n_2|}}^{2}}}}} + {{{{ {(n_3)}} ^z}} {{{ {(n_3)}} _z}} {{\\frac{1}{{{|n_3|}}^{2}}}}}\\end{matrix} \\right]}} = {\\left[ \\begin{matrix}  1 &  0 &  0 \\\\  0 &  1 &  0 \\\\  0 &  0 &  1\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=108},
	{hidden=false, input="Nl = Matrix(\n\9{1, 0, 0, 0, 0},\n\9{0, nl_dense[1], nl_dense[2], nl_dense[3], 0},\n\9{0, n2l_dense[1], n2l_dense[2], n2l_dense[3], 0},\n\9{0, n3l_dense[1], n3l_dense[2], n3l_dense[3], 0},\n\9{0, 0, 0, 0, 1}\n):T()", output="$\\left[ \\begin{matrix}  1 &  0 &  0 &  0 &  0 \\\\  0 &  { {(n_1)}} _x &  { {(n_2)}} _x &  { {(n_3)}} _x &  0 \\\\  0 &  { {(n_1)}} _y &  { {(n_2)}} _y &  { {(n_3)}} _y &  0 \\\\  0 &  { {(n_1)}} _z &  { {(n_2)}} _z &  { {(n_3)}} _z &  0 \\\\  0 &  0 &  0 &  0 &  1\\end{matrix} \\right]$", outputtype="html", uid=109},
	{hidden=false, input="Nu = Matrix(\n\9{1, 0, 0, 0, 0},\n\9{0, nu_dense[1], nu_dense[2], nu_dense[3], 0},\n\9{0, n2u_dense[1], n2u_dense[2], n2u_dense[3], 0},\n\9{0, n3u_dense[1], n3u_dense[2], n3u_dense[3], 0},\n\9{0, 0, 0, 0, 1}\n):T()", output="$\\left[ \\begin{matrix}  1 &  0 &  0 &  0 &  0 \\\\  0 &  { {(n_1)}} ^x &  { {(n_2)}} ^x &  { {(n_3)}} ^x &  0 \\\\  0 &  { {(n_1)}} ^y &  { {(n_2)}} ^y &  { {(n_3)}} ^y &  0 \\\\  0 &  { {(n_1)}} ^z &  { {(n_2)}} ^z &  { {(n_3)}} ^z &  0 \\\\  0 &  0 &  0 &  0 &  1\\end{matrix} \\right]$", outputtype="html", uid=110},
	{hidden=true, input="print'Realigned, using the normal basis, which is inverses of one another, so that I can just apply it to the left and right eigenvector transforms.'", output="Realigned, using the normal basis, which is inverses of one another, so that I can just apply it to the left and right eigenvector transforms.<br>\n", outputtype="html", uid=111},
	{hidden=false, input="A_expanded_with_Ns = (\n\9\9Nu * Matrix.diagonal(1, 1/n1Len^2, 1/n2Len^2, 1/n3Len^2, 1)\n\9)() \n\9* (\n\9\9Matrix.diagonal(1, n1Len^2, n2Len^2, n3Len^2, 1) * A_expanded\n\9)() \n\9* Nl:T()\nA_expanded = A_expanded_with_Ns()\nprint(A'^I_J':eq(A_expanded_with_Ns):eq(A_expanded))\n-- if this reproduces the original then just factor out Nl and Nu from both sides and do the eigen-decomposition of the x-axis version\n-- since it is easier to do\n;", output="${{{{ A} ^I} _J} = { {\\left[ \\begin{matrix}  1 &  0 &  0 &  0 &  0 \\\\  0 &  \\frac{{ {(n_1)}} ^x}{{{|n_1|}}^{2}} &  \\frac{{ {(n_2)}} ^x}{{{|n_2|}}^{2}} &  \\frac{{ {(n_3)}} ^x}{{{|n_3|}}^{2}} &  0 \\\\  0 &  \\frac{{ {(n_1)}} ^y}{{{|n_1|}}^{2}} &  \\frac{{ {(n_2)}} ^y}{{{|n_2|}}^{2}} &  \\frac{{ {(n_3)}} ^y}{{{|n_3|}}^{2}} &  0 \\\\  0 &  \\frac{{ {(n_1)}} ^z}{{{|n_1|}}^{2}} &  \\frac{{ {(n_2)}} ^z}{{{|n_2|}}^{2}} &  \\frac{{ {(n_3)}} ^z}{{{|n_3|}}^{2}} &  0 \\\\  0 &  0 &  0 &  0 &  1\\end{matrix} \\right]}  {\\left[ \\begin{matrix}  0 &  \\rho &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  {\\frac{1}{\\rho}} {{{|n_1|}}^{2}} \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  {{\\rho}} \\cdot {{{{c_s}}^{2}}} &  0 &  0 &  0\\end{matrix} \\right]}  {\\left[ \\begin{matrix}  1 &  0 &  0 &  0 &  0 \\\\  0 &  { {(n_1)}} _x &  { {(n_1)}} _y &  { {(n_1)}} _z &  0 \\\\  0 &  { {(n_2)}} _x &  { {(n_2)}} _y &  { {(n_2)}} _z &  0 \\\\  0 &  { {(n_3)}} _x &  { {(n_3)}} _y &  { {(n_3)}} _z &  0 \\\\  0 &  0 &  0 &  0 &  1\\end{matrix} \\right]}}} = {\\left[ \\begin{matrix}  0 &  {{\\rho}} \\cdot {{{ {(n_1)}} _x}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _y}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _z}} &  0 \\\\  0 &  0 &  0 &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} ^x} \\\\  0 &  0 &  0 &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} ^y} \\\\  0 &  0 &  0 &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} ^z} \\\\  0 &  {{\\rho}} \\cdot {{{ {(n_1)}} _x}} {{{{c_s}}^{2}}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _y}} {{{{c_s}}^{2}}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _z}} {{{{c_s}}^{2}}} &  0\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=112},
	{hidden=true, input="print'So now we know the left and right transforms to apply to our right and left eigennvector matrices to align them into an arbitrary normal frame, even with an arbitrary metric.'\nprint'Now to eigen-decompose the normal magnitude diagonal matrix multiplied with the acoustic matrix.';", output="So now we know the left and right transforms to apply to our right and left eigennvector matrices to align them into an arbitrary normal frame, even with an arbitrary metric.<br>\nNow to eigen-decompose the normal magnitude diagonal matrix multiplied with the acoustic matrix.<br>\n", outputtype="html", uid=113},
	{hidden=true, input="print'Acoustic matrix eigen-decomposition:'", output="Acoustic matrix eigen-decomposition:<br>\n", outputtype="html", uid=114},
	{hidden=false, input="-- TODO if you want, (a) consider when n_1 = 0 or n_2 = 0\n-- and/or (b) just replace all the e_x, e_y cross n with a basis {n, n2, n3}\n-- (just like the MathWorksheets \"Euler Fluid Equations - Curved Geometry - Contravariant\" worksheet already does).\n\nA'^I_J':eq(var'(R_A)''^I_M' * var'(\\\\Lambda_A)''^M_N' * var'(L_A)''^N_J')", output="${{{ A} ^I} _J} = {{{{{ {(R_A)}} ^I} _M}} {{{{ {(\\Lambda_A)}} ^M} _N}} {{{{ {(L_A)}} ^N} _J}}}$", outputtype="html", uid=116},
	{hidden=false, input="eig = A_expanded:eigen{lambdaVar=var'\\\\lambda'}", output="table: 0x5598822a1930", outputtype="html", uid=128},
	{hidden=false, input="eig.R * eig.Lambda * eig.L", output="${\\left[ \\begin{matrix}  1 &  0 &  0 &  \\frac{1}{{{c_s}}^{2}} &  \\frac{1}{{{c_s}}^{2}} \\\\  0 &  -{\\frac{{ {(n_1)}} _y}{{ {(n_1)}} _x}} &  -{\\frac{{ {(n_1)}} _z}{{ {(n_1)}} _x}} &  \\frac{{{{ {(n_1)}} ^x}} {{\\frac{1}{\\sqrt{{{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _x}}} + {{{{ {(n_1)}} ^z}} {{{ {(n_1)}} _z}}} + {{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _y}}}}}}}}{{{\\rho}} \\cdot {{{c_s}}}} &  -{\\frac{{{{ {(n_1)}} ^x}} {{\\frac{1}{\\sqrt{{{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _x}}} + {{{{ {(n_1)}} ^z}} {{{ {(n_1)}} _z}}} + {{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _y}}}}}}}}{{{\\rho}} \\cdot {{{c_s}}}}} \\\\  0 &  1 &  0 &  \\frac{{{{ {(n_1)}} ^y}} {{\\frac{1}{\\sqrt{{{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _x}}} + {{{{ {(n_1)}} ^z}} {{{ {(n_1)}} _z}}} + {{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _y}}}}}}}}{{{\\rho}} \\cdot {{{c_s}}}} &  -{\\frac{{{{ {(n_1)}} ^y}} {{\\frac{1}{\\sqrt{{{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _x}}} + {{{{ {(n_1)}} ^z}} {{{ {(n_1)}} _z}}} + {{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _y}}}}}}}}{{{\\rho}} \\cdot {{{c_s}}}}} \\\\  0 &  0 &  1 &  \\frac{{{{ {(n_1)}} ^z}} {{\\frac{1}{\\sqrt{{{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _x}}} + {{{{ {(n_1)}} ^z}} {{{ {(n_1)}} _z}}} + {{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _y}}}}}}}}{{{\\rho}} \\cdot {{{c_s}}}} &  -{\\frac{{{{ {(n_1)}} ^z}} {{\\frac{1}{\\sqrt{{{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _x}}} + {{{{ {(n_1)}} ^z}} {{{ {(n_1)}} _z}}} + {{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _y}}}}}}}}{{{\\rho}} \\cdot {{{c_s}}}}} \\\\  0 &  0 &  0 &  1 &  1\\end{matrix} \\right]}  {\\left[ \\begin{matrix}  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  {{{c_s}}} \\cdot {{\\sqrt{{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^x}}} + {{{{ {(n_1)}} _z}} {{{ {(n_1)}} ^z}}} + {{{{ {(n_1)}} _y}} {{{ {(n_1)}} ^y}}}}}} &  0 \\\\  0 &  0 &  0 &  0 &  -{{{{c_s}}} \\cdot {{\\sqrt{{{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _x}}} + {{{{ {(n_1)}} ^z}} {{{ {(n_1)}} _z}}} + {{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _y}}}}}}}\\end{matrix} \\right]}  {\\left[ \\begin{matrix}  1 &  0 &  0 &  0 &  -{\\frac{1}{{{c_s}}^{2}}} \\\\  0 &  -{\\frac{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^y}}}{{{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _x}}} + {{{{ {(n_1)}} ^z}} {{{ {(n_1)}} _z}}} + {{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _y}}}}} &  \\frac{{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^x}}} + {{{{ {(n_1)}} _z}} {{{ {(n_1)}} ^z}}}}{{{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _x}}} + {{{{ {(n_1)}} ^z}} {{{ {(n_1)}} _z}}} + {{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _y}}}} &  -{\\frac{{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _z}}}{{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^x}}} + {{{{ {(n_1)}} _z}} {{{ {(n_1)}} ^z}}} + {{{{ {(n_1)}} _y}} {{{ {(n_1)}} ^y}}}}} &  0 \\\\  0 &  -{\\frac{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^z}}}{{{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _x}}} + {{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _y}}} + {{{{ {(n_1)}} ^z}} {{{ {(n_1)}} _z}}}}} &  -{\\frac{{{{ {(n_1)}} _y}} {{{ {(n_1)}} ^z}}}{{{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _x}}} + {{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _y}}} + {{{{ {(n_1)}} ^z}} {{{ {(n_1)}} _z}}}}} &  \\frac{{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^x}}} + {{{{ {(n_1)}} _y}} {{{ {(n_1)}} ^y}}}}{{{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _x}}} + {{{{ {(n_1)}} ^z}} {{{ {(n_1)}} _z}}} + {{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _y}}}} &  0 \\\\  0 &  {\\frac{1}{2}} {{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{ {(n_1)}} _x}} {{\\frac{1}{\\sqrt{{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^x}}} + {{{{ {(n_1)}} _z}} {{{ {(n_1)}} ^z}}} + {{{{ {(n_1)}} _y}} {{{ {(n_1)}} ^y}}}}}}}} &  {\\frac{1}{2}} {{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{ {(n_1)}} _y}} {{\\frac{1}{\\sqrt{{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^x}}} + {{{{ {(n_1)}} _z}} {{{ {(n_1)}} ^z}}} + {{{{ {(n_1)}} _y}} {{{ {(n_1)}} ^y}}}}}}}} &  {\\frac{1}{2}} {{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{ {(n_1)}} _z}} {{\\frac{1}{\\sqrt{{{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _x}}} + {{{{ {(n_1)}} ^z}} {{{ {(n_1)}} _z}}} + {{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _y}}}}}}}} &  \\frac{1}{2} \\\\  0 &  -{{\\frac{1}{2}} {{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{ {(n_1)}} _x}} {{\\frac{1}{\\sqrt{{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^x}}} + {{{{ {(n_1)}} _z}} {{{ {(n_1)}} ^z}}} + {{{{ {(n_1)}} _y}} {{{ {(n_1)}} ^y}}}}}}}}} &  -{{\\frac{1}{2}} {{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{ {(n_1)}} _y}} {{\\frac{1}{\\sqrt{{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^x}}} + {{{{ {(n_1)}} _z}} {{{ {(n_1)}} ^z}}} + {{{{ {(n_1)}} _y}} {{{ {(n_1)}} ^y}}}}}}}}} &  -{{\\frac{1}{2}} {{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{ {(n_1)}} _z}} {{\\frac{1}{\\sqrt{{{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _x}}} + {{{{ {(n_1)}} ^z}} {{{ {(n_1)}} _z}}} + {{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _y}}}}}}}}} &  \\frac{1}{2}\\end{matrix} \\right]}$", outputtype="html", uid=129},
	{hidden=false, input="eig.R = eig.R:subst(n1LenSq_def:switch())()", output="$\\left[ \\begin{matrix}  1 &  0 &  0 &  \\frac{1}{{{c_s}}^{2}} &  \\frac{1}{{{c_s}}^{2}} \\\\  0 &  -{\\frac{{ {(n_1)}} _y}{{ {(n_1)}} _x}} &  -{\\frac{{ {(n_1)}} _z}{{ {(n_1)}} _x}} &  \\frac{{ {(n_1)}} ^x}{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{|n_1|}}}} &  -{\\frac{{ {(n_1)}} ^x}{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{|n_1|}}}}} \\\\  0 &  1 &  0 &  \\frac{{ {(n_1)}} ^y}{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{|n_1|}}}} &  -{\\frac{{ {(n_1)}} ^y}{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{|n_1|}}}}} \\\\  0 &  0 &  1 &  \\frac{{ {(n_1)}} ^z}{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{|n_1|}}}} &  -{\\frac{{ {(n_1)}} ^z}{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{|n_1|}}}}} \\\\  0 &  0 &  0 &  1 &  1\\end{matrix} \\right]$", outputtype="html", uid=126},
	{hidden=false, input="eig.Lambda = eig.Lambda:subst(n1LenSq_def:switch())()", output="$\\left[ \\begin{matrix}  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  {{{c_s}}} \\cdot {{{|n_1|}}} &  0 \\\\  0 &  0 &  0 &  0 &  -{{{{c_s}}} \\cdot {{{|n_1|}}}}\\end{matrix} \\right]$", outputtype="html", uid=127},
	{hidden=false, input="eig.L = eig.L:subst(n1LenSq_def:switch())()", output="$\\left[ \\begin{matrix}  1 &  0 &  0 &  0 &  -{\\frac{1}{{{c_s}}^{2}}} \\\\  0 &  -{\\frac{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^y}}}{{{|n_1|}}^{2}}} &  \\frac{{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^x}}} + {{{{ {(n_1)}} _z}} {{{ {(n_1)}} ^z}}}}{{{|n_1|}}^{2}} &  -{\\frac{{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _z}}}{{{|n_1|}}^{2}}} &  0 \\\\  0 &  -{\\frac{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^z}}}{{{|n_1|}}^{2}}} &  -{\\frac{{{{ {(n_1)}} _y}} {{{ {(n_1)}} ^z}}}{{{|n_1|}}^{2}}} &  \\frac{{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^x}}} + {{{{ {(n_1)}} _y}} {{{ {(n_1)}} ^y}}}}{{{|n_1|}}^{2}} &  0 \\\\  0 &  \\frac{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{ {(n_1)}} _x}}}{{{2}} {{{|n_1|}}}} &  \\frac{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{ {(n_1)}} _y}}}{{{2}} {{{|n_1|}}}} &  \\frac{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{ {(n_1)}} _z}}}{{{2}} {{{|n_1|}}}} &  \\frac{1}{2} \\\\  0 &  -{\\frac{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{ {(n_1)}} _x}}}{{{2}} {{{|n_1|}}}}} &  -{\\frac{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{ {(n_1)}} _y}}}{{{2}} {{{|n_1|}}}}} &  -{\\frac{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{ {(n_1)}} _z}}}{{{2}} {{{|n_1|}}}}} &  \\frac{1}{2}\\end{matrix} \\right]$", outputtype="html", uid=117},
	{hidden=false, input="A'^I_J':eq(eig.R * eig.Lambda * eig.L)", output="${{{ A} ^I} _J} = { {\\left[ \\begin{matrix}  1 &  0 &  0 &  \\frac{1}{{{c_s}}^{2}} &  \\frac{1}{{{c_s}}^{2}} \\\\  0 &  -{\\frac{{ {(n_1)}} _y}{{ {(n_1)}} _x}} &  -{\\frac{{ {(n_1)}} _z}{{ {(n_1)}} _x}} &  \\frac{{ {(n_1)}} ^x}{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{|n_1|}}}} &  -{\\frac{{ {(n_1)}} ^x}{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{|n_1|}}}}} \\\\  0 &  1 &  0 &  \\frac{{ {(n_1)}} ^y}{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{|n_1|}}}} &  -{\\frac{{ {(n_1)}} ^y}{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{|n_1|}}}}} \\\\  0 &  0 &  1 &  \\frac{{ {(n_1)}} ^z}{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{|n_1|}}}} &  -{\\frac{{ {(n_1)}} ^z}{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{|n_1|}}}}} \\\\  0 &  0 &  0 &  1 &  1\\end{matrix} \\right]}  {\\left[ \\begin{matrix}  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  {{{c_s}}} \\cdot {{{|n_1|}}} &  0 \\\\  0 &  0 &  0 &  0 &  -{{{{c_s}}} \\cdot {{{|n_1|}}}}\\end{matrix} \\right]}  {\\left[ \\begin{matrix}  1 &  0 &  0 &  0 &  -{\\frac{1}{{{c_s}}^{2}}} \\\\  0 &  -{\\frac{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^y}}}{{{|n_1|}}^{2}}} &  \\frac{{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^x}}} + {{{{ {(n_1)}} _z}} {{{ {(n_1)}} ^z}}}}{{{|n_1|}}^{2}} &  -{\\frac{{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _z}}}{{{|n_1|}}^{2}}} &  0 \\\\  0 &  -{\\frac{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^z}}}{{{|n_1|}}^{2}}} &  -{\\frac{{{{ {(n_1)}} _y}} {{{ {(n_1)}} ^z}}}{{{|n_1|}}^{2}}} &  \\frac{{{{{ {(n_1)}} _x}} {{{ {(n_1)}} ^x}}} + {{{{ {(n_1)}} _y}} {{{ {(n_1)}} ^y}}}}{{{|n_1|}}^{2}} &  0 \\\\  0 &  \\frac{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{ {(n_1)}} _x}}}{{{2}} {{{|n_1|}}}} &  \\frac{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{ {(n_1)}} _y}}}{{{2}} {{{|n_1|}}}} &  \\frac{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{ {(n_1)}} _z}}}{{{2}} {{{|n_1|}}}} &  \\frac{1}{2} \\\\  0 &  -{\\frac{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{ {(n_1)}} _x}}}{{{2}} {{{|n_1|}}}}} &  -{\\frac{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{ {(n_1)}} _y}}}{{{2}} {{{|n_1|}}}}} &  -{\\frac{{{\\rho}} \\cdot {{{c_s}}} \\cdot {{{ {(n_1)}} _z}}}{{{2}} {{{|n_1|}}}}} &  \\frac{1}{2}\\end{matrix} \\right]}}$", outputtype="html", uid=120},
	{hidden=false, input="--[[\nprint('insert the normal basis')\nprint()\n\n-- use replace instead of assign just in case i forget this is here some day\n-- but this won't invert ...\neig.R[2][2] = eig.R[2][2]:replace(-n'_y' / n'_x', n2'_x')\neig.R[3][2] = eig.R[3][2]:replace(1, n2'_y')\neig.R[4][2] = eig.R[4][2]:replace(0, n2'_z')\neig.R[2][3] = eig.R[2][3]:replace(-n'_z' / n'_x', n3'_x')\neig.R[3][3] = eig.R[3][3]:replace(0, n3'_y')\neig.R[4][3] = eig.R[4][3]:replace(1, n3'_z')\neig.L = eig.R:inverse()\n\nA'^I_J':eq(eig.R * eig.Lambda * eig.L)\n--]]", output="", outputtype="html", uid=118},
	{hidden=false, input="-- permutation of eigenvectors\nperm = Matrix.permutation(5,1,2,3,4)", output="$\\left[ \\begin{matrix}  0 &  1 &  0 &  0 &  0 \\\\  0 &  0 &  1 &  0 &  0 \\\\  0 &  0 &  0 &  1 &  0 \\\\  0 &  0 &  0 &  0 &  1 \\\\  1 &  0 &  0 &  0 &  0\\end{matrix} \\right]$", outputtype="html", uid=121},
	{hidden=false, input="-- scale of eigenvectors\nS = Matrix.diagonal(Cs^2 * n1Len, 1, n'_x' / rho, n'_x' / rho, Cs^2 * n1Len)", output="$\\left[ \\begin{matrix}  {{{{c_s}}^{2}}} {{{|n_1|}}} &  0 &  0 &  0 &  0 \\\\  0 &  1 &  0 &  0 &  0 \\\\  0 &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} _x} &  0 &  0 \\\\  0 &  0 &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} _x} &  0 \\\\  0 &  0 &  0 &  0 &  {{{{c_s}}^{2}}} {{{|n_1|}}}\\end{matrix} \\right]$", outputtype="html", uid=122},
	{hidden=false, input="SInv = S:inv()", output="$\\left[ \\begin{matrix}  \\frac{1}{{{{|n_1|}}} \\cdot {{{{c_s}}^{2}}}} &  0 &  0 &  0 &  0 \\\\  0 &  1 &  0 &  0 &  0 \\\\  0 &  0 &  \\frac{\\rho}{{ {(n_1)}} _x} &  0 &  0 \\\\  0 &  0 &  0 &  \\frac{\\rho}{{ {(n_1)}} _x} &  0 \\\\  0 &  0 &  0 &  0 &  \\frac{1}{{{{|n_1|}}} \\cdot {{{{c_s}}^{2}}}}\\end{matrix} \\right]$", outputtype="html", uid=123},
	{hidden=false, input="eig.R = (eig.R * perm * S)()", output="$\\left[ \\begin{matrix}  {|n_1|} &  1 &  0 &  0 &  {|n_1|} \\\\  -{{\\frac{1}{\\rho}} {{{{c_s}}} \\cdot {{{ {(n_1)}} ^x}}}} &  0 &  -{{\\frac{1}{\\rho}} {{ {(n_1)}} _y}} &  -{{\\frac{1}{\\rho}} {{ {(n_1)}} _z}} &  {\\frac{1}{\\rho}} {{{{c_s}}} \\cdot {{{ {(n_1)}} ^x}}} \\\\  -{{\\frac{1}{\\rho}} {{{{c_s}}} \\cdot {{{ {(n_1)}} ^y}}}} &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} _x} &  0 &  {\\frac{1}{\\rho}} {{{{c_s}}} \\cdot {{{ {(n_1)}} ^y}}} \\\\  -{{\\frac{1}{\\rho}} {{{{c_s}}} \\cdot {{{ {(n_1)}} ^z}}}} &  0 &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} _x} &  {\\frac{1}{\\rho}} {{{{c_s}}} \\cdot {{{ {(n_1)}} ^z}}} \\\\  {{{|n_1|}}} \\cdot {{{{c_s}}^{2}}} &  0 &  0 &  0 &  {{{|n_1|}}} \\cdot {{{{c_s}}^{2}}}\\end{matrix} \\right]$", outputtype="html", uid=130},
	{hidden=false, input="eig.Lambda = (SInv * perm:T() * eig.Lambda * perm * S)()", output="$\\left[ \\begin{matrix}  -{{{{c_s}}} \\cdot {{{|n_1|}}}} &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  {{{c_s}}} \\cdot {{{|n_1|}}}\\end{matrix} \\right]$", outputtype="html", uid=131},
	{hidden=false, input="eig.L = (SInv * perm:T() * eig.L)()", output="$\\left[ \\begin{matrix}  0 &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _x}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}}} &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _y}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}}} &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _z}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}}} &  \\frac{1}{{{2}} {{{|n_1|}}} \\cdot {{{{c_s}}^{2}}}} \\\\  1 &  0 &  0 &  0 &  -{\\frac{1}{{{c_s}}^{2}}} \\\\  0 &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} ^y}}}{{{|n_1|}}^{2}}} &  \\frac{{{\\rho}} \\cdot {{\\left({{{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _x}}} + {{{{ {(n_1)}} ^z}} {{{ {(n_1)}} _z}}}}\\right)}}}{{{{ {(n_1)}} _x}} {{{{|n_1|}}^{2}}}} &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} ^y}} {{{ {(n_1)}} _z}}}{{{{ {(n_1)}} _x}} {{{{|n_1|}}^{2}}}}} &  0 \\\\  0 &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} ^z}}}{{{|n_1|}}^{2}}} &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _y}} {{{ {(n_1)}} ^z}}}{{{{ {(n_1)}} _x}} {{{{|n_1|}}^{2}}}}} &  \\frac{{{\\rho}} \\cdot {{\\left({{{{{ {(n_1)}} ^x}} {{{ {(n_1)}} _x}}} + {{{{ {(n_1)}} ^y}} {{{ {(n_1)}} _y}}}}\\right)}}}{{{{ {(n_1)}} _x}} {{{{|n_1|}}^{2}}}} &  0 \\\\  0 &  \\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _x}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}} &  \\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _y}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}} &  \\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _z}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}} &  \\frac{1}{{{2}} {{{|n_1|}}} \\cdot {{{{c_s}}^{2}}}}\\end{matrix} \\right]$", outputtype="html", uid=124},
	{hidden=false, input="--eig.L[3][3] = (eig.L[3][3] + (n1LenSq_def[1] - n1LenSq_def[2]) * rho / (n'_x' * n1Len^2))()\n--eig.L[4][4] = (eig.L[4][4] + (n1LenSq_def[1] - n1LenSq_def[2]) * rho / (n'_x' * n1Len^2))()\neig.L = eig.L:subst(\n\9(n1LenSq_def - n'_y' * n'^y')():switch()\n):subst(\n\9(n1LenSq_def - n'_z' * n'^z')():switch()\n)", output="$\\left[ \\begin{matrix}  0 &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _x}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}}} &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _y}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}}} &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _z}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}}} &  \\frac{1}{{{2}} {{{|n_1|}}} \\cdot {{{{c_s}}^{2}}}} \\\\  1 &  0 &  0 &  0 &  -{\\frac{1}{{{c_s}}^{2}}} \\\\  0 &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} ^y}}}{{{|n_1|}}^{2}}} &  \\frac{{{\\rho}} \\cdot {{\\left({{{{|n_1|}}^{2}} - {{{{ {(n_1)}} _y}} {{{ {(n_1)}} ^y}}}}\\right)}}}{{{{ {(n_1)}} _x}} {{{{|n_1|}}^{2}}}} &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} ^y}} {{{ {(n_1)}} _z}}}{{{{ {(n_1)}} _x}} {{{{|n_1|}}^{2}}}}} &  0 \\\\  0 &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} ^z}}}{{{|n_1|}}^{2}}} &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _y}} {{{ {(n_1)}} ^z}}}{{{{ {(n_1)}} _x}} {{{{|n_1|}}^{2}}}}} &  \\frac{{{\\rho}} \\cdot {{\\left({{{{|n_1|}}^{2}} - {{{{ {(n_1)}} _z}} {{{ {(n_1)}} ^z}}}}\\right)}}}{{{{ {(n_1)}} _x}} {{{{|n_1|}}^{2}}}} &  0 \\\\  0 &  \\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _x}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}} &  \\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _y}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}} &  \\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _z}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}} &  \\frac{1}{{{2}} {{{|n_1|}}} \\cdot {{{{c_s}}^{2}}}}\\end{matrix} \\right]$", outputtype="html", uid=125},
	{hidden=false, input="A'^I_J':eq(eig.R * eig.Lambda * eig.L)", output="${{{ A} ^I} _J} = { {\\left[ \\begin{matrix}  {|n_1|} &  1 &  0 &  0 &  {|n_1|} \\\\  -{{\\frac{1}{\\rho}} {{{{c_s}}} \\cdot {{{ {(n_1)}} ^x}}}} &  0 &  -{{\\frac{1}{\\rho}} {{ {(n_1)}} _y}} &  -{{\\frac{1}{\\rho}} {{ {(n_1)}} _z}} &  {\\frac{1}{\\rho}} {{{{c_s}}} \\cdot {{{ {(n_1)}} ^x}}} \\\\  -{{\\frac{1}{\\rho}} {{{{c_s}}} \\cdot {{{ {(n_1)}} ^y}}}} &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} _x} &  0 &  {\\frac{1}{\\rho}} {{{{c_s}}} \\cdot {{{ {(n_1)}} ^y}}} \\\\  -{{\\frac{1}{\\rho}} {{{{c_s}}} \\cdot {{{ {(n_1)}} ^z}}}} &  0 &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} _x} &  {\\frac{1}{\\rho}} {{{{c_s}}} \\cdot {{{ {(n_1)}} ^z}}} \\\\  {{{|n_1|}}} \\cdot {{{{c_s}}^{2}}} &  0 &  0 &  0 &  {{{|n_1|}}} \\cdot {{{{c_s}}^{2}}}\\end{matrix} \\right]}  {\\left[ \\begin{matrix}  -{{{{c_s}}} \\cdot {{{|n_1|}}}} &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 &  {{{c_s}}} \\cdot {{{|n_1|}}}\\end{matrix} \\right]}  {\\left[ \\begin{matrix}  0 &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _x}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}}} &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _y}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}}} &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _z}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}}} &  \\frac{1}{{{2}} {{{|n_1|}}} \\cdot {{{{c_s}}^{2}}}} \\\\  1 &  0 &  0 &  0 &  -{\\frac{1}{{{c_s}}^{2}}} \\\\  0 &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} ^y}}}{{{|n_1|}}^{2}}} &  \\frac{{{\\rho}} \\cdot {{\\left({{{{|n_1|}}^{2}} - {{{{ {(n_1)}} _y}} {{{ {(n_1)}} ^y}}}}\\right)}}}{{{{ {(n_1)}} _x}} {{{{|n_1|}}^{2}}}} &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} ^y}} {{{ {(n_1)}} _z}}}{{{{ {(n_1)}} _x}} {{{{|n_1|}}^{2}}}}} &  0 \\\\  0 &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} ^z}}}{{{|n_1|}}^{2}}} &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _y}} {{{ {(n_1)}} ^z}}}{{{{ {(n_1)}} _x}} {{{{|n_1|}}^{2}}}}} &  \\frac{{{\\rho}} \\cdot {{\\left({{{{|n_1|}}^{2}} - {{{{ {(n_1)}} _z}} {{{ {(n_1)}} ^z}}}}\\right)}}}{{{{ {(n_1)}} _x}} {{{{|n_1|}}^{2}}}} &  0 \\\\  0 &  \\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _x}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}} &  \\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _y}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}} &  \\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _z}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}} &  \\frac{1}{{{2}} {{{|n_1|}}} \\cdot {{{{c_s}}^{2}}}}\\end{matrix} \\right]}}$", outputtype="html", uid=132},
	{hidden=true, input="print'Acoustic matrix, reconstructed from eigen-decomposition:'", output="Acoustic matrix, reconstructed from eigen-decomposition:<br>\n", outputtype="html", uid=133},
	{hidden=false, input="A'^I_J':eq( (eig.R * eig.Lambda * eig.L)() )", output="${{{ A} ^I} _J} = {\\left[ \\begin{matrix}  0 &  {{\\rho}} \\cdot {{{ {(n_1)}} _x}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _y}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _z}} &  0 \\\\  0 &  0 &  0 &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} ^x} \\\\  0 &  0 &  0 &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} ^y} \\\\  0 &  0 &  0 &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} ^z} \\\\  0 &  {{\\rho}} \\cdot {{{ {(n_1)}} _x}} {{{{c_s}}^{2}}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _y}} {{{{c_s}}^{2}}} &  {{\\rho}} \\cdot {{{ {(n_1)}} _z}} {{{{c_s}}^{2}}} &  0\\end{matrix} \\right]}$", outputtype="html", uid=134},
	{hidden=true, input="'Orthogonality of left and right eigenvectors:'", output="Orthogonality of left and right eigenvectors:", outputtype="html", uid=135},
	{hidden=false, input="(eig.L * eig.R)():subst(n1LenSq_def)()", output="$\\left[ \\begin{matrix}  1 &  0 &  0 &  0 &  0 \\\\  0 &  1 &  0 &  0 &  0 \\\\  0 &  0 &  1 &  0 &  0 \\\\  0 &  0 &  0 &  1 &  0 \\\\  0 &  0 &  0 &  0 &  1\\end{matrix} \\right]$", outputtype="html", uid=136},
	{hidden=true, input="[[\n$A$'s eigensystem is $R_A \\Lambda_A L_A$.<br>\n$A + v I$'s eigensystem is $R_A \\Lambda_A L_A + v I \n\9= R_A \\Lambda_A L_A + v R_A L_A \n\9= R_A (\\Lambda_A + v I) L_A$\n.<br>\n$\\frac{\\partial W}{\\partial U} \\cdot \\frac{\\partial F}{\\partial W} = A + v I$<br>\n$\\frac{\\partial F}{\\partial U} = \\frac{\\partial U}{\\partial W} \\cdot \\frac{\\partial W}{\\partial U} \\cdot \\frac{\\partial F}{\\partial W} \\cdot \\frac{\\partial W}{\\partial U} \n\9= \\frac{\\partial U}{\\partial W} \\cdot (A + v I) \\cdot \\frac{\\partial W}{\\partial U}\n\9= \\frac{\\partial U}{\\partial W} \\cdot R_A (\\Lambda_A + v I) L_A \\cdot \\frac{\\partial W}{\\partial U}$.<br>\nLet $R_F = \\frac{\\partial U}{\\partial W} \\cdot R_A,\n\9\\Lambda_F = \\Lambda_A + v I,\n\9L_F = L_A \\cdot \\frac{\\partial W}{\\partial U}$.<br>\n$\\frac{\\partial F}{\\partial U} = R_F \\Lambda_F L_F$.<br>\n\n]]", output="$A$'s eigensystem is $R_A \\Lambda_A L_A$.<br>\n$A + v I$'s eigensystem is $R_A \\Lambda_A L_A + v I \n\9= R_A \\Lambda_A L_A + v R_A L_A \n\9= R_A (\\Lambda_A + v I) L_A$\n.<br>\n$\\frac{\\partial W}{\\partial U} \\cdot \\frac{\\partial F}{\\partial W} = A + v I$<br>\n$\\frac{\\partial F}{\\partial U} = \\frac{\\partial U}{\\partial W} \\cdot \\frac{\\partial W}{\\partial U} \\cdot \\frac{\\partial F}{\\partial W} \\cdot \\frac{\\partial W}{\\partial U} \n\9= \\frac{\\partial U}{\\partial W} \\cdot (A + v I) \\cdot \\frac{\\partial W}{\\partial U}\n\9= \\frac{\\partial U}{\\partial W} \\cdot R_A (\\Lambda_A + v I) L_A \\cdot \\frac{\\partial W}{\\partial U}$.<br>\nLet $R_F = \\frac{\\partial U}{\\partial W} \\cdot R_A,\n\9\\Lambda_F = \\Lambda_A + v I,\n\9L_F = L_A \\cdot \\frac{\\partial W}{\\partial U}$.<br>\n$\\frac{\\partial F}{\\partial U} = R_F \\Lambda_F L_F$.<br>\n\n", outputtype="html", uid=137},
	{hidden=true, input="'Flux Jacobian with respect to conserved variables:'", output="Flux Jacobian with respect to conserved variables:", outputtype="html", uid=138},
	{hidden=false, input="F'^I':diff(U'^J'):eq( U'^I':diff(W'^K') * W'^K':diff(U'^L') * F'^L':diff(W'^M') * W'^M':diff(U'^J') )", output="${\\frac{\\partial { F} ^I}{\\partial { U} ^J}} = {{{\\frac{\\partial { U} ^I}{\\partial { W} ^K}}} {{\\frac{\\partial { W} ^K}{\\partial { U} ^L}}} {{\\frac{\\partial { F} ^L}{\\partial { W} ^M}}} {{\\frac{\\partial { W} ^M}{\\partial { U} ^J}}}}$", outputtype="html", uid=139},
	{hidden=false, input="F_eig_R_def = \n\9expandMatrix3to5(dU_dW_def) \n--\9(Nu * Matrix.diagonal(1, 1/n1Len^2, 1/n2Len^2, 1/n3Len^2, 1))()\n\9* eig.R\nprint(var'R_F':eq(F_eig_R_def));", output="${{R_F}} = { {\\left[ \\begin{matrix}  1 &  0 &  0 &  0 &  0 \\\\  { v} ^x &  \\rho &  0 &  0 &  0 \\\\  { v} ^y &  0 &  \\rho &  0 &  0 \\\\  { v} ^z &  0 &  0 &  \\rho &  0 \\\\  {\\frac{1}{2}} {{(v)^2}} &  {{\\rho}} \\cdot {{{ v} _x}} &  {{\\rho}} \\cdot {{{ v} _y}} &  {{\\rho}} \\cdot {{{ v} _z}} &  \\frac{1}{{(\\gamma_{-1})}}\\end{matrix} \\right]}  {\\left[ \\begin{matrix}  {|n_1|} &  1 &  0 &  0 &  {|n_1|} \\\\  -{{\\frac{1}{\\rho}} {{{{c_s}}} \\cdot {{{ {(n_1)}} ^x}}}} &  0 &  -{{\\frac{1}{\\rho}} {{ {(n_1)}} _y}} &  -{{\\frac{1}{\\rho}} {{ {(n_1)}} _z}} &  {\\frac{1}{\\rho}} {{{{c_s}}} \\cdot {{{ {(n_1)}} ^x}}} \\\\  -{{\\frac{1}{\\rho}} {{{{c_s}}} \\cdot {{{ {(n_1)}} ^y}}}} &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} _x} &  0 &  {\\frac{1}{\\rho}} {{{{c_s}}} \\cdot {{{ {(n_1)}} ^y}}} \\\\  -{{\\frac{1}{\\rho}} {{{{c_s}}} \\cdot {{{ {(n_1)}} ^z}}}} &  0 &  0 &  {\\frac{1}{\\rho}} {{ {(n_1)}} _x} &  {\\frac{1}{\\rho}} {{{{c_s}}} \\cdot {{{ {(n_1)}} ^z}}} \\\\  {{{|n_1|}}} \\cdot {{{{c_s}}^{2}}} &  0 &  0 &  0 &  {{{|n_1|}}} \\cdot {{{{c_s}}^{2}}}\\end{matrix} \\right]}}$<br>\n", outputtype="html", uid=140},
	{hidden=false, input="F_eig_R_def = F_eig_R_def()\nF_eig_R_def = F_eig_R_def\n\9:replace(n'_x' * v'^x', n'_k' * v'^k' - n'_y' * v'^y' - n'_z' * v'^z')\n\9:replace(n'^x' * v'_x', n'_k' * v'^k' - n'^y' * v'_y' - n'^z' * v'_z')\nF_eig_R_def = F_eig_R_def:simplifyAddMulDiv()\nprint(var'R_F':eq(F_eig_R_def));", output="${{R_F}} = {\\left[ \\begin{matrix}  {|n_1|} &  1 &  0 &  0 &  {|n_1|} \\\\  {{{{|n_1|}}} \\cdot {{{ v} ^x}}} + {{{-1}} {{{c_s}}} \\cdot {{{ {(n_1)}} ^x}}} &  { v} ^x &  {{-1}} {{{ {(n_1)}} _y}} &  {{-1}} {{{ {(n_1)}} _z}} &  {{{{|n_1|}}} \\cdot {{{ v} ^x}}} + {{{{c_s}}} \\cdot {{{ {(n_1)}} ^x}}} \\\\  {{{{|n_1|}}} \\cdot {{{ v} ^y}}} + {{{-1}} {{{c_s}}} \\cdot {{{ {(n_1)}} ^y}}} &  { v} ^y &  { {(n_1)}} _x &  0 &  {{{{|n_1|}}} \\cdot {{{ v} ^y}}} + {{{{c_s}}} \\cdot {{{ {(n_1)}} ^y}}} \\\\  {{{{|n_1|}}} \\cdot {{{ v} ^z}}} + {{{-1}} {{{c_s}}} \\cdot {{{ {(n_1)}} ^z}}} &  { v} ^z &  0 &  { {(n_1)}} _x &  {{{{|n_1|}}} \\cdot {{{ v} ^z}}} + {{{{c_s}}} \\cdot {{{ {(n_1)}} ^z}}} \\\\  {{{\\frac{1}{2}}} {{{(v)^2}}} \\cdot {{{|n_1|}}}} + {{{-1}} {{{c_s}}} \\cdot {{{ {(n_1)}} _k}} {{{ v} ^k}}} + {{{{|n_1|}}} \\cdot {{{{c_s}}^{2}}} {{\\frac{1}{{(\\gamma_{-1})}}}}} &  {{\\frac{1}{2}}} {{{(v)^2}}} &  {{{-1}} {{{ {(n_1)}} _y}} {{{ v} _x}}} + {{{{ {(n_1)}} _x}} {{{ v} _y}}} &  {{{-1}} {{{ {(n_1)}} _z}} {{{ v} _x}}} + {{{{ {(n_1)}} _x}} {{{ v} _z}}} &  {{{\\frac{1}{2}}} {{{(v)^2}}} \\cdot {{{|n_1|}}}} + {{{{c_s}}} \\cdot {{{ {(n_1)}} _k}} {{{ v} ^k}}} + {{{{|n_1|}}} \\cdot {{{{c_s}}^{2}}} {{\\frac{1}{{(\\gamma_{-1})}}}}}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=141},
	{hidden=false, input="F_eig_L_def = \n\9eig.L \n--\9* Nl:T()\n\9* expandMatrix3to5(dW_dU_def:subst(vSq_def:switch()))\nprint(var'L_F':eq(F_eig_L_def));", output="${{L_F}} = { {\\left[ \\begin{matrix}  0 &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _x}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}}} &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _y}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}}} &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _z}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}}} &  \\frac{1}{{{2}} {{{|n_1|}}} \\cdot {{{{c_s}}^{2}}}} \\\\  1 &  0 &  0 &  0 &  -{\\frac{1}{{{c_s}}^{2}}} \\\\  0 &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} ^y}}}{{{|n_1|}}^{2}}} &  \\frac{{{\\rho}} \\cdot {{\\left({{{{|n_1|}}^{2}} - {{{{ {(n_1)}} _y}} {{{ {(n_1)}} ^y}}}}\\right)}}}{{{{ {(n_1)}} _x}} {{{{|n_1|}}^{2}}}} &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} ^y}} {{{ {(n_1)}} _z}}}{{{{ {(n_1)}} _x}} {{{{|n_1|}}^{2}}}}} &  0 \\\\  0 &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} ^z}}}{{{|n_1|}}^{2}}} &  -{\\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _y}} {{{ {(n_1)}} ^z}}}{{{{ {(n_1)}} _x}} {{{{|n_1|}}^{2}}}}} &  \\frac{{{\\rho}} \\cdot {{\\left({{{{|n_1|}}^{2}} - {{{{ {(n_1)}} _z}} {{{ {(n_1)}} ^z}}}}\\right)}}}{{{{ {(n_1)}} _x}} {{{{|n_1|}}^{2}}}} &  0 \\\\  0 &  \\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _x}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}} &  \\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _y}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}} &  \\frac{{{\\rho}} \\cdot {{{ {(n_1)}} _z}}}{{{2}} {{{c_s}}} \\cdot {{{{|n_1|}}^{2}}}} &  \\frac{1}{{{2}} {{{|n_1|}}} \\cdot {{{{c_s}}^{2}}}}\\end{matrix} \\right]}  {\\left[ \\begin{matrix}  1 &  0 &  0 &  0 &  0 \\\\  -{{\\frac{1}{\\rho}} {{ v} ^x}} &  \\frac{1}{\\rho} &  0 &  0 &  0 \\\\  -{{\\frac{1}{\\rho}} {{ v} ^y}} &  0 &  \\frac{1}{\\rho} &  0 &  0 \\\\  -{{\\frac{1}{\\rho}} {{ v} ^z}} &  0 &  0 &  \\frac{1}{\\rho} &  0 \\\\  {\\frac{1}{2}} {{{{(\\gamma_{-1})}}} \\cdot {{{(v)^2}}}} &  -{{{{(\\gamma_{-1})}}} \\cdot {{{ v} _x}}} &  -{{{{(\\gamma_{-1})}}} \\cdot {{{ v} _y}}} &  -{{{{(\\gamma_{-1})}}} \\cdot {{{ v} _z}}} &  {(\\gamma_{-1})}\\end{matrix} \\right]}}$<br>\n", outputtype="html", uid=142},
	{hidden=false, input="F_eig_L_def = F_eig_L_def()\nF_eig_L_def = F_eig_L_def\n\9:replace(n'_x' * v'^x', n'_k' * v'^k' - n'_y' * v'^y' - n'_z' * v'^z')\n\9:replace(n'^x' * v'_x', n'_k' * v'^k' - n'^y' * v'_y' - n'^z' * v'_z')\nF_eig_L_def = F_eig_L_def:simplifyAddMulDiv()\nprint(var'L_F':eq(F_eig_L_def));", output="${{L_F}} = {\\left[ \\begin{matrix}  {{{\\frac{1}{2}}} {{{ {(n_1)}} _k}} {{{ v} ^k}} {{\\frac{1}{{c_s}}}} {{\\frac{1}{{{|n_1|}}^{2}}}}} + {{{\\frac{1}{4}}} {{{(\\gamma_{-1})}}} \\cdot {{{(v)^2}}} \\cdot {{\\frac{1}{{|n_1|}}}} {{\\frac{1}{{{c_s}}^{2}}}}} &  {{{-1}} \\cdot {{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{{ v} _x}} {{\\frac{1}{{|n_1|}}}} {{\\frac{1}{{{c_s}}^{2}}}}} + {{{-1}} \\cdot {{\\frac{1}{2}}} {{{ {(n_1)}} _x}} {{\\frac{1}{{c_s}}}} {{\\frac{1}{{{|n_1|}}^{2}}}}} &  {{{-1}} \\cdot {{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{{ v} _y}} {{\\frac{1}{{|n_1|}}}} {{\\frac{1}{{{c_s}}^{2}}}}} + {{{-1}} \\cdot {{\\frac{1}{2}}} {{{ {(n_1)}} _y}} {{\\frac{1}{{c_s}}}} {{\\frac{1}{{{|n_1|}}^{2}}}}} &  {{{-1}} \\cdot {{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{{ v} _z}} {{\\frac{1}{{|n_1|}}}} {{\\frac{1}{{{c_s}}^{2}}}}} + {{{-1}} \\cdot {{\\frac{1}{2}}} {{{ {(n_1)}} _z}} {{\\frac{1}{{c_s}}}} {{\\frac{1}{{{|n_1|}}^{2}}}}} &  {{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{\\frac{1}{{|n_1|}}}} {{\\frac{1}{{{c_s}}^{2}}}} \\\\  {1} + {{{-1}} \\cdot {{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{{(v)^2}}} \\cdot {{\\frac{1}{{{c_s}}^{2}}}}} &  {{{(\\gamma_{-1})}}} \\cdot {{{ v} _x}} {{\\frac{1}{{{c_s}}^{2}}}} &  {{{(\\gamma_{-1})}}} \\cdot {{{ v} _y}} {{\\frac{1}{{{c_s}}^{2}}}} &  {{{(\\gamma_{-1})}}} \\cdot {{{ v} _z}} {{\\frac{1}{{{c_s}}^{2}}}} &  {{-1}} {{{(\\gamma_{-1})}}} \\cdot {{\\frac{1}{{{c_s}}^{2}}}} \\\\  {{{{ {(n_1)}} _k}} {{{ {(n_1)}} ^y}} {{{ v} ^k}} {{\\frac{1}{{ {(n_1)}} _x}}} {{\\frac{1}{{{|n_1|}}^{2}}}}} + {{{-1}} {{{ v} ^y}} {{\\frac{1}{{ {(n_1)}} _x}}}} &  {{-1}} {{{ {(n_1)}} ^y}} {{\\frac{1}{{{|n_1|}}^{2}}}} &  {\\frac{1}{{ {(n_1)}} _x}} + {{{-1}} {{{ {(n_1)}} _y}} {{{ {(n_1)}} ^y}} {{\\frac{1}{{ {(n_1)}} _x}}} {{\\frac{1}{{{|n_1|}}^{2}}}}} &  {{-1}} {{{ {(n_1)}} ^y}} {{{ {(n_1)}} _z}} {{\\frac{1}{{ {(n_1)}} _x}}} {{\\frac{1}{{{|n_1|}}^{2}}}} &  0 \\\\  {{{{ {(n_1)}} _k}} {{{ {(n_1)}} ^z}} {{{ v} ^k}} {{\\frac{1}{{ {(n_1)}} _x}}} {{\\frac{1}{{{|n_1|}}^{2}}}}} + {{{-1}} {{{ v} ^z}} {{\\frac{1}{{ {(n_1)}} _x}}}} &  {{-1}} {{{ {(n_1)}} ^z}} {{\\frac{1}{{{|n_1|}}^{2}}}} &  {{-1}} {{{ {(n_1)}} _y}} {{{ {(n_1)}} ^z}} {{\\frac{1}{{ {(n_1)}} _x}}} {{\\frac{1}{{{|n_1|}}^{2}}}} &  {\\frac{1}{{ {(n_1)}} _x}} + {{{-1}} {{{ {(n_1)}} _z}} {{{ {(n_1)}} ^z}} {{\\frac{1}{{ {(n_1)}} _x}}} {{\\frac{1}{{{|n_1|}}^{2}}}}} &  0 \\\\  {{{-1}} \\cdot {{\\frac{1}{2}}} {{{ {(n_1)}} _k}} {{{ v} ^k}} {{\\frac{1}{{c_s}}}} {{\\frac{1}{{{|n_1|}}^{2}}}}} + {{{\\frac{1}{4}}} {{{(\\gamma_{-1})}}} \\cdot {{{(v)^2}}} \\cdot {{\\frac{1}{{|n_1|}}}} {{\\frac{1}{{{c_s}}^{2}}}}} &  {{{\\frac{1}{2}}} {{{ {(n_1)}} _x}} {{\\frac{1}{{c_s}}}} {{\\frac{1}{{{|n_1|}}^{2}}}}} + {{{-1}} \\cdot {{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{{ v} _x}} {{\\frac{1}{{|n_1|}}}} {{\\frac{1}{{{c_s}}^{2}}}}} &  {{{\\frac{1}{2}}} {{{ {(n_1)}} _y}} {{\\frac{1}{{c_s}}}} {{\\frac{1}{{{|n_1|}}^{2}}}}} + {{{-1}} \\cdot {{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{{ v} _y}} {{\\frac{1}{{|n_1|}}}} {{\\frac{1}{{{c_s}}^{2}}}}} &  {{{\\frac{1}{2}}} {{{ {(n_1)}} _z}} {{\\frac{1}{{c_s}}}} {{\\frac{1}{{{|n_1|}}^{2}}}}} + {{{-1}} \\cdot {{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{{ v} _z}} {{\\frac{1}{{|n_1|}}}} {{\\frac{1}{{{c_s}}^{2}}}}} &  {{\\frac{1}{2}}} {{{(\\gamma_{-1})}}} \\cdot {{\\frac{1}{{|n_1|}}}} {{\\frac{1}{{{c_s}}^{2}}}}\\end{matrix} \\right]}$<br>\n", outputtype="html", uid=59}
}