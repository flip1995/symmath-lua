#!/usr/bin/env lua

local symmath = require 'symmath'
local x = symmath.var'x'
local z = symmath.var'z'

local zero = symmath.Constant(0)

-- testing dependency

local y = symmath.var'y'
assert(false == y:dependsOn(x))
assert(false == y:dependsOn(x'^p'))
assert(false == y:dependsOn(x'^pq'))
assert(false == y'^i':dependsOn(x))
assert(false == y'^i':dependsOn(x'^p'))
assert(false == y'^i':dependsOn(x'^pq'))
assert(false == y'^ij':dependsOn(x))
assert(false == y'^ij':dependsOn(x'^p'))
assert(false == y'^ij':dependsOn(x'^pq'))
y:setDependentVars(x)
assert(true == y:dependsOn(x))
assert(false == y:dependsOn(x'^p'))
assert(false == y:dependsOn(x'^pq'))
assert(false == y'^i':dependsOn(x))
assert(false == y'^i':dependsOn(x'^p'))
assert(false == y'^i':dependsOn(x'^pq'))
assert(false == y'^ij':dependsOn(x))
assert(false == y'^ij':dependsOn(x'^p'))
assert(false == y'^ij':dependsOn(x'^pq'))
assert(y:diff(x)() == y:diff(x))
assert(y:diff(x'^p')() == zero)
assert(y:diff(x'^pq')() == zero)
assert(y'^i':diff(x)() == zero)
assert(y'^i':diff(x'^p')() == zero)
assert(y'^i':diff(x'^pq')() == zero)
assert(y'^ij':diff(x)() == zero)
assert(y'^ij':diff(x'^p')() == zero)
assert(y'^ij':diff(x'^pq')() == zero)
assert(y:diff(x,z)() == zero)

local y = symmath.var'y'
y:setDependentVars(x'^a')
assert(false == y:dependsOn(x))
assert(true == y:dependsOn(x'^p'))
assert(false == y:dependsOn(x'^pq'))
assert(false == y'^i':dependsOn(x))
assert(false == y'^i':dependsOn(x'^p'))
assert(false == y'^i':dependsOn(x'^pq'))
assert(false == y'^ij':dependsOn(x))
assert(false == y'^ij':dependsOn(x'^p'))
assert(false == y'^ij':dependsOn(x'^pq'))
assert(y:diff(x)() == zero)
assert(y:diff(x'^p')() == y:diff(x'^p'))
assert(y:diff(x'^pq')() == zero)
assert(y'^i':diff(x)() == zero)
assert(y'^i':diff(x'^p')() == zero)
assert(y'^i':diff(x'^pq')() == zero)
assert(y'^ij':diff(x)() == zero)
assert(y'^ij':diff(x'^p')() == zero)
assert(y'^ij':diff(x'^pq')() == zero)

local y = symmath.var'y'
y'^a':setDependentVars(x)
assert(false == y:dependsOn(x))
assert(false == y:dependsOn(x'^p'))
assert(false == y:dependsOn(x'^pq'))
assert(true == y'^i':dependsOn(x))
assert(false == y'^i':dependsOn(x'^p'))
assert(false == y'^i':dependsOn(x'^pq'))
assert(false == y'^ij':dependsOn(x))
assert(false == y'^ij':dependsOn(x'^p'))
assert(false == y'^ij':dependsOn(x'^pq'))
assert(y:diff(x)() == zero)
assert(y:diff(x'^p')() == zero)
assert(y:diff(x'^pq')() == zero)
assert(y'^i':diff(x)() == y'^i':diff(x))
assert(y'^i':diff(x'^p')() == zero)
assert(y'^i':diff(x'^pq')() == zero)
assert(y'^ij':diff(x)() == zero)
assert(y'^ij':diff(x'^p')() == zero)
assert(y'^ij':diff(x'^pq')() == zero)

local y = symmath.var'y'
y'^a':setDependentVars(x'^b')
assert(false == y:dependsOn(x))
assert(false == y:dependsOn(x'^p'))
assert(false == y:dependsOn(x'^pq'))
assert(false == y'^i':dependsOn(x))
assert(true == y'^i':dependsOn(x'^p'))
assert(false == y'^i':dependsOn(x'^pq'))
assert(false == y'^ij':dependsOn(x))
assert(false == y'^ij':dependsOn(x'^p'))
assert(false == y'^ij':dependsOn(x'^pq'))
assert(y:diff(x)() == zero)
assert(y:diff(x'^p')() == zero)
assert(y:diff(x'^pq')() == zero)
assert(y'^i':diff(x)() == zero)
assert(y'^i':diff(x'^p')() == y'^i':diff(x'^p'))
assert(y'^i':diff(x'^pq')() == zero)
assert(y'^ij':diff(x)() == zero)
assert(y'^ij':diff(x'^p')() == zero)
assert(y'^ij':diff(x'^pq')() == zero)
