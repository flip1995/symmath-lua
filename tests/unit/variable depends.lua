#!/usr/bin/env lua
local env = setmetatable({}, {__index=_G})
if setfenv then setfenv(1, env) else _ENV = env end
require 'unit'(env, 'match')

env.env = env
env.x = var'x'
env.z = var'z'
env.zero = Constant(0)

for _,line in ipairs(string.split(string.trim([=[

-- testing dependency

y = symmath.var'y'
assert(false == y:dependsOn(x))
assert(false == y:dependsOn(x'^p'))
assert(false == y:dependsOn(x'^pq'))
assert(false == y'^i':dependsOn(x))
assert(false == y'^i':dependsOn(x'^p'))
assert(false == y'^i':dependsOn(x'^pq'))
assert(false == y'^ij':dependsOn(x))
assert(false == y'^ij':dependsOn(x'^p'))
assert(false == y'^ij':dependsOn(x'^pq'))
y:setDependentVars(x)
assert(true == y:dependsOn(x))
assert(false == y:dependsOn(x'^p'))
assert(false == y:dependsOn(x'^pq'))
assert(false == y'^i':dependsOn(x))
assert(false == y'^i':dependsOn(x'^p'))
assert(false == y'^i':dependsOn(x'^pq'))
assert(false == y'^ij':dependsOn(x))
assert(false == y'^ij':dependsOn(x'^p'))
assert(false == y'^ij':dependsOn(x'^pq'))
assert(y:diff(x)() == y:diff(x))
assert(y:diff(x'^p')() == zero)
assert(y:diff(x'^pq')() == zero)
assert(y'^i':diff(x)() == zero)
assert(y'^i':diff(x'^p')() == zero)
assert(y'^i':diff(x'^pq')() == zero)
assert(y'^ij':diff(x)() == zero)
assert(y'^ij':diff(x'^p')() == zero)
assert(y'^ij':diff(x'^pq')() == zero)
assert(y:diff(x,z)() == zero)

y = symmath.var'y'
y:setDependentVars(x'^a')
assert(false == y:dependsOn(x))
assert(true == y:dependsOn(x'^p'))
assert(false == y:dependsOn(x'^pq'))
assert(false == y'^i':dependsOn(x))
assert(false == y'^i':dependsOn(x'^p'))
assert(false == y'^i':dependsOn(x'^pq'))
assert(false == y'^ij':dependsOn(x))
assert(false == y'^ij':dependsOn(x'^p'))
assert(false == y'^ij':dependsOn(x'^pq'))
assert(y:diff(x)() == zero)
assert(y:diff(x'^p')() == y:diff(x'^p'))
assert(y:diff(x'^pq')() == zero)
assert(y'^i':diff(x)() == zero)
assert(y'^i':diff(x'^p')() == zero)
assert(y'^i':diff(x'^pq')() == zero)
assert(y'^ij':diff(x)() == zero)
assert(y'^ij':diff(x'^p')() == zero)
assert(y'^ij':diff(x'^pq')() == zero)

y = symmath.var'y'
y'^a':setDependentVars(x)
assert(false == y:dependsOn(x))
assert(false == y:dependsOn(x'^p'))
assert(false == y:dependsOn(x'^pq'))
assert(true == y'^i':dependsOn(x))
assert(false == y'^i':dependsOn(x'^p'))
assert(false == y'^i':dependsOn(x'^pq'))
assert(false == y'^ij':dependsOn(x))
assert(false == y'^ij':dependsOn(x'^p'))
assert(false == y'^ij':dependsOn(x'^pq'))
assert(y:diff(x)() == zero)
assert(y:diff(x'^p')() == zero)
assert(y:diff(x'^pq')() == zero)
assert(y'^i':diff(x)() == y'^i':diff(x))
assert(y'^i':diff(x'^p')() == zero)
assert(y'^i':diff(x'^pq')() == zero)
assert(y'^ij':diff(x)() == zero)
assert(y'^ij':diff(x'^p')() == zero)
assert(y'^ij':diff(x'^pq')() == zero)

y = symmath.var'y'
y'^a':setDependentVars(x'^b')
assert(false == y:dependsOn(x))
assert(false == y:dependsOn(x'^p'))
assert(false == y:dependsOn(x'^pq'))
assert(false == y'^i':dependsOn(x))
assert(true == y'^i':dependsOn(x'^p'))
assert(false == y'^i':dependsOn(x'^pq'))
assert(false == y'^ij':dependsOn(x))
assert(false == y'^ij':dependsOn(x'^p'))
assert(false == y'^ij':dependsOn(x'^pq'))
assert(y:diff(x)() == zero)
assert(y:diff(x'^p')() == zero)
assert(y:diff(x'^pq')() == zero)
assert(y'^i':diff(x)() == zero)
assert(y'^i':diff(x'^p')() == y'^i':diff(x'^p'))
assert(y'^i':diff(x'^pq')() == zero)
assert(y'^ij':diff(x)() == zero)
assert(y'^ij':diff(x'^p')() == zero)
assert(y'^ij':diff(x'^pq')() == zero)

]=]), '\n')) do
	env.exec(line)
end
