{
	{hidden=false, input="t,x,y,z = vars('t', 'x', 'y', 'z')", output="$t$\9$x$\9$y$\9$z$", outputtype="html", uid=12},
	{hidden=false, input="tz, xy = vars('tz', 'xy')", output="$tz$\9$xy$", outputtype="html", uid=8},
	{hidden=false, input="-- upper-case letters map to spinor indexes\nchart_tz_xy = Tensor.Chart{\n\9coords = {tz, xy},\n\9symbols = range(('AZ'):byte(1,2)):mapi(function(ch) return string.char(ch) end):concat(),\n}", output="table: 0x5585c9b2aab0", outputtype="html", uid=10},
	{hidden=false, input="-- lower-case letters map to minkowski indexes\nTensor.Chart{\n\9coords = {t,x,y,z},\n\9symbols = range(('az'):byte(1,2)):mapi(function(ch) return string.char(ch) end):concat(),\n}", output="table: 0x5585c9b763b0", outputtype="html", uid=11},
	{hidden=false, input="eta = Tensor('_uv', Matrix.diagonal(1,-1,-1,-1):unpack())", output="$\\overset{u\\downarrow v\\rightarrow}{\\left[\\begin{array}{cccc} 1& 0& 0& 0\\\\ 0& -1& 0& 0\\\\ 0& 0& -1& 0\\\\ 0& 0& 0& -1\\end{array}\\right]}$", outputtype="html", uid=21},
	{hidden=false, input="Tensor:findChartForSymbol'a':setMetric(eta)", output="", outputtype="html", uid=23},
	{hidden=false, input="spineps = Tensor('_IJ', {0,1},{-1,0})", output="$\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 0& 1\\\\ -1& 0\\end{array}\\right]}$", outputtype="html", uid=20},
	{hidden=false, input="Tensor:findChartForSymbol'I':setMetric(spineps)", output="", outputtype="html", uid=24},
	{hidden=false, input="-- TODO looks like for Matrix with degree>2, MathJax screws up...\nPauliMats = require 'symmath.physics.MatrixBasis'.Pauli4", output="$\\left[\\begin{array}{cc} \\left[\\begin{matrix} 1 \\\\ 0\\end{matrix}\\right]& \\left[\\begin{matrix} 0 \\\\ 1\\end{matrix}\\right]\\\\ \\left[\\begin{matrix} 0 \\\\ 1\\end{matrix}\\right]& \\left[\\begin{matrix} 1 \\\\ 0\\end{matrix}\\right]\\\\ \\left[\\begin{matrix} 0 \\\\ -{i}\\end{matrix}\\right]& \\left[\\begin{matrix} i \\\\ 0\\end{matrix}\\right]\\\\ \\left[\\begin{matrix} 1 \\\\ 0\\end{matrix}\\right]& \\left[\\begin{matrix} 0 \\\\ -1\\end{matrix}\\right]\\end{array}\\right]$", outputtype="html", uid=1},
	{hidden=false, input="-- TODO as long as there are associated indexes, I should replace any ctor value of an Array subclass with Tensor ...\n--sigmas = Tensor('_u^I_J', PauliMats:unpack())\nsigmas = Tensor('_u^I_J', function(u,I,J) return PauliMats[u][I][J] end)", output="$\\overset{u\\downarrow[{I\\downarrow J\\rightarrow}]}{\\left[\\begin{matrix} \\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& 1\\end{array}\\right]} \\\\ \\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 0& 1\\\\ 1& 0\\end{array}\\right]} \\\\ \\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 0& -{i}\\\\ i& 0\\end{array}\\right]} \\\\ \\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& -1\\end{array}\\right]}\\end{matrix}\\right]}$", outputtype="html", uid=2},
	{hidden=false, input="sigmas:unpack()", output="$\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& 1\\end{array}\\right]}$\9$\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 0& 1\\\\ 1& 0\\end{array}\\right]}$\9$\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 0& -{i}\\\\ i& 0\\end{array}\\right]}$\9$\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& -1\\end{array}\\right]}$", outputtype="html", uid=13},
	{hidden=false, input="sigmas'_u^I_J'", output="${{{ \\overset{u\\downarrow[{I\\downarrow J\\rightarrow}]}{\\left[\\begin{matrix} \\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& 1\\end{array}\\right]} \\\\ \\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 0& 1\\\\ 1& 0\\end{array}\\right]} \\\\ \\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 0& -{i}\\\\ i& 0\\end{array}\\right]} \\\\ \\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& -1\\end{array}\\right]}\\end{matrix}\\right]}} _u} ^I} _J$", outputtype="html", uid=18},
	{hidden=false, input="sigmas'_uIJ'()", output="$\\overset{u\\downarrow[{I\\downarrow J\\rightarrow}]}{\\left[\\begin{matrix} \\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 0& 1\\\\ -{1}& 0\\end{array}\\right]} \\\\ \\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& -{1}\\end{array}\\right]} \\\\ \\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} i& 0\\\\ 0& i\\end{array}\\right]} \\\\ \\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 0& -{1}\\\\ -{1}& 0\\end{array}\\right]}\\end{matrix}\\right]}$", outputtype="html", uid=19},
	{hidden=false, input="(epsilon'_IK' * epsilon'^KJ'):eq(spineps'_IK' * spineps'^KJ')()", output="${{{{{ \\epsilon} _I} _K}} {{{{ \\epsilon} ^K} ^J}}} = {\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} -{1}& 0\\\\ 0& -{1}\\end{array}\\right]}}$", outputtype="html", uid=25},
	{hidden=false, input="(epsilon'^IK' * epsilon'_KJ'):eq(spineps'^IK' * spineps'_KJ')()", output="${{{{{ \\epsilon} ^I} ^K}} {{{{ \\epsilon} _K} _J}}} = {\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} -{1}& 0\\\\ 0& -{1}\\end{array}\\right]}}$", outputtype="html", uid=26},
	{hidden=false, input="sigmas[1]'^I_J'", output="${{ \\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& 1\\end{array}\\right]}} ^I} _J$", outputtype="html", uid=27},
	{hidden=false, input="epsilon'^I_J':eq(spineps'^I_J')()", output="${{{ \\epsilon} ^I} _J} = {\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& 1\\end{array}\\right]}}$", outputtype="html", uid=33},
	{hidden=false, input="epsilon'_I^J':eq(spineps'_I^J')()", output="${{{ \\epsilon} _I} ^J} = {\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} -{1}& 0\\\\ 0& -{1}\\end{array}\\right]}}$", outputtype="html", uid=34},
	{hidden=false, input="(epsilon'_IK' * epsilon'^K_J'):eq(spineps'_IK' * sigmas[1]'^K_J')()", output="${{{{{ \\epsilon} _I} _K}} {{{{ \\epsilon} ^K} _J}}} = {\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 0& 1\\\\ -{1}& 0\\end{array}\\right]}}$", outputtype="html", uid=28},
	{hidden=false, input="(sigmas[1]'^I_J' * sigmas[1]'^K_L')()", output="$\\overset{I\\downarrow J\\rightarrow[{K\\downarrow L\\rightarrow}]}{\\left[\\begin{array}{cc} \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& 1\\end{array}\\right]}& \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& 0\\\\ 0& 0\\end{array}\\right]}\\\\ \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& 0\\\\ 0& 0\\end{array}\\right]}& \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& 1\\end{array}\\right]}\\end{array}\\right]}$", outputtype="html", uid=4},
	{hidden=false, input="(sigmas[2]'^I_J' * sigmas[2]'^K_L')()", output="$\\overset{I\\downarrow J\\rightarrow[{K\\downarrow L\\rightarrow}]}{\\left[\\begin{array}{cc} \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& 0\\\\ 0& 0\\end{array}\\right]}& \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& 1\\\\ 1& 0\\end{array}\\right]}\\\\ \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& 1\\\\ 1& 0\\end{array}\\right]}& \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& 0\\\\ 0& 0\\end{array}\\right]}\\end{array}\\right]}$", outputtype="html", uid=15},
	{hidden=false, input="(sigmas[3]'^I_J' * sigmas[3]'^K_L')()", output="$\\overset{I\\downarrow J\\rightarrow[{K\\downarrow L\\rightarrow}]}{\\left[\\begin{array}{cc} \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& 0\\\\ 0& 0\\end{array}\\right]}& \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& -{1}\\\\ 1& 0\\end{array}\\right]}\\\\ \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& 1\\\\ -{1}& 0\\end{array}\\right]}& \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& 0\\\\ 0& 0\\end{array}\\right]}\\end{array}\\right]}$", outputtype="html", uid=16},
	{hidden=false, input="(sigmas[4]'^I_J' * sigmas[4]'^K_L')()", output="$\\overset{I\\downarrow J\\rightarrow[{K\\downarrow L\\rightarrow}]}{\\left[\\begin{array}{cc} \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& -{1}\\end{array}\\right]}& \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& 0\\\\ 0& 0\\end{array}\\right]}\\\\ \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& 0\\\\ 0& 0\\end{array}\\right]}& \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} -{1}& 0\\\\ 0& 1\\end{array}\\right]}\\end{array}\\right]}$", outputtype="html", uid=38},
	{hidden=false, input="-- welp if each sigma squared is I_2x2 and eta's diagonal is +1 -1 -1 -1 <-> trace is -2,\n-- then ofc this will be -2 I_2x2 \n(eta'^uv' * sigmas'_u^I_K' * sigmas'_v^K_J')()", output="$\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} -{2}& 0\\\\ 0& -{2}\\end{array}\\right]}$", outputtype="html", uid=39},
	{hidden=false, input="(eta'^uv' * sigmas'_u^I_J' * sigmas'_v^K_L')()", output="$\\overset{I\\downarrow J\\rightarrow[{K\\downarrow L\\rightarrow}]}{\\left[\\begin{array}{cc} \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& 0\\\\ 0& 2\\end{array}\\right]}& \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& 0\\\\ -{2}& 0\\end{array}\\right]}\\\\ \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& -{2}\\\\ 0& 0\\end{array}\\right]}& \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 2& 0\\\\ 0& 0\\end{array}\\right]}\\end{array}\\right]}$", outputtype="html", uid=40},
	{hidden=false, input="spindelta = Tensor('_IJ', Matrix.identity(2):unpack())", output="$\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& 1\\end{array}\\right]}$", outputtype="html", uid=14},
	{hidden=false, input="-- supposed to be the Completeness relation identity but ... bleh?\n-- https://en.wikipedia.org/wiki/Pauli_matrices#Completeness_relation_2\n-- is there a math error in wikipedia?\n(2 * delta'_IL' * delta'_JK' - delta'IJ' * delta'_KL')()", output="${-{{{{{ \\delta} ^I} ^J}} {{{{ \\delta} _K} _L}}}} + {{{2}} {{{{ \\delta} _I} _L}} {{{{ \\delta} _J} _K}}}$", outputtype="html", uid=30},
	{hidden=false, input="-- Kulkarni-Nomizu product of two deltas ...\n(spindelta'_IK' * spindelta'_JL' - spindelta'_IL' * spindelta'_JK')():permute'_IJKL'", output="$\\overset{I\\downarrow J\\rightarrow[{K\\downarrow L\\rightarrow}]}{\\left[\\begin{array}{cc} \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& 0\\\\ 0& 0\\end{array}\\right]}& \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& 1\\\\ -{1}& 0\\end{array}\\right]}\\\\ \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& -{1}\\\\ 1& 0\\end{array}\\right]}& \\overset{K\\downarrow L\\rightarrow}{\\left[\\begin{array}{cc} 0& 0\\\\ 0& 0\\end{array}\\right]}\\end{array}\\right]}$", outputtype="html", uid=32},
	{hidden=false, input="'<hr> ok what about quaternions?'", output="<hr> ok what about quaternions?", outputtype="html", uid=31},
	{hidden=false, input="i2x2 = Matrix({0,-1},{1,0})", output="$\\left[\\begin{array}{cc} 0& -1\\\\ 1& 0\\end{array}\\right]$", outputtype="html", uid=37},
	{hidden=false, input="local E = var'E'\n-- but then the sub-tensors will be Matrix ... TODO fix this\n--local EVal  = Tensor('^u_v', Matrix.diagonal(1, i, i, i):unpack())\nlocal EVal  = Tensor('^u_v', function(u,v) return u==v and (u==1 and 1 or i) or 0 end)\nlocal EDef = E'^u_v':eq(EVal)\nprint(EDef)\n\n-- TODO a downside to using 'i' as a Variable is this ...\n-- TODO 1/i doesn't seem to simplify ...\nlocal sigma = var'sigma'\nlocal sigmaDef = sigma'_u^I_J':eq(sigmas)\n--print(sigmaDef)\nprint(sigmaDef:lhs(), '=', table.unpack(sigmas))\n\nlocal expr = E'^v_u' * sigma'_v^I_J'\nlocal srcMats = expr:subst(EDef:reindex{uv='vu'}, sigmaDef:reindex{u='v'})():permute'_u^I_J'\n--print(expr:eq(srcMats))\nprint(expr, '=', srcMats:unpack())\n\n-- TODO should Tensor have a .transpose() and .T() method? or nah because index valence?\n-- TODO allow transpose and Hermitian to remain unevaluated?  like I already do matrix-multiply and everything else?\nprint[[...then transpose...]]\nprint(expr, '=', srcMats:permute'_uJ^I':unpack())\n\nprint[[...then swap $\\sigma_x$ and $\\sigma_z...$]]\n\nlocal E2 = var\"E'\"\nlocal E2Val = Tensor('^u_v', {1,0,0,0}, {0,0,0,i}, {0,0,i,0}, {0,i,0,0})\nlocal E2Def = E2'^u_v':eq(E2Val)\nprint(E2Def)\n\nlocal expr = E2'^v_u' * sigma'_v^I_J'\nlocal srcMats = expr:subst(E2Def:reindex{uv='vu'}, sigmaDef:reindex{u='v'})():permute'_u_J^I'\n--print(expr:eq(srcMats))\nprint(expr, '=', srcMats:unpack())\n\nprint[[...then perform outer with $1_{2x2}$ or $i_{2x2}$...]]\nquatBasis = table.mapi(srcMats, function(sigma_a, a)\n\9local m = Matrix:lambda({4,4}, function(i,j)\n\9\9local c = sigma_a[math.floor((i-1)/2+1)][math.floor((j-1)/2+1)]\n\9\9local u = (i-1)%2+1\n\9\9local v = (j-1)%2+1\n\9\9return (spindelta[u][v] * Re(c) + i2x2[u][v] * Im(c))()\n\9end)\n\9return m\nend)\nprint(expr, [[$\\otimes \\{$]], spindelta,',', i2x2, [[$\\} =$]], quatBasis:unpack())\n\nquatBasis = quatBasis:mapi(function(m,a)\n\9-- multiply by diag(1,-1,-1,-1)\n\9return (eta * m)():T()\nend)\nprint('(', expr, [[$\\otimes \\{$]], spindelta,',', i2x2, [[$\\} ) \\cdot \\eta =$]], quatBasis:unpack())\n\nprint('(', expr, [[$\\otimes \\{$]], spindelta,',', i2x2, [[$\\} ) \\cdot \\eta \\cdot \\{ 1, i, j, k \\}^u =$]], Array(1, var'i', j, k):dot(quatBasis)())\n;", output="${{{ E} ^u} _v} = {\\overset{u\\downarrow v\\rightarrow}{\\left[\\begin{array}{cccc} 1& 0& 0& 0\\\\ 0& i& 0& 0\\\\ 0& 0& i& 0\\\\ 0& 0& 0& i\\end{array}\\right]}}$<br>\n${{{ \\sigma} _u} ^I} _J$\9=\9$\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& 1\\end{array}\\right]}$\9$\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 0& 1\\\\ 1& 0\\end{array}\\right]}$\9$\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 0& -{i}\\\\ i& 0\\end{array}\\right]}$\9$\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& -1\\end{array}\\right]}$<br>\n${{{{ E} ^v} _u}} {{{{{ \\sigma} _v} ^I} _J}}$\9=\9$\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& 1\\end{array}\\right]}$\9$\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 0& i\\\\ i& 0\\end{array}\\right]}$\9$\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 0& 1\\\\ -{1}& 0\\end{array}\\right]}$\9$\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} i& 0\\\\ 0& -{i}\\end{array}\\right]}$<br>\n...then transpose...<br>\n${{{{ E} ^v} _u}} {{{{{ \\sigma} _v} ^I} _J}}$\9=\9$\\overset{J\\downarrow I\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& 1\\end{array}\\right]}$\9$\\overset{J\\downarrow I\\rightarrow}{\\left[\\begin{array}{cc} 0& i\\\\ i& 0\\end{array}\\right]}$\9$\\overset{J\\downarrow I\\rightarrow}{\\left[\\begin{array}{cc} 0& -{1}\\\\ 1& 0\\end{array}\\right]}$\9$\\overset{J\\downarrow I\\rightarrow}{\\left[\\begin{array}{cc} i& 0\\\\ 0& -{i}\\end{array}\\right]}$<br>\n...then swap $\\sigma_x$ and $\\sigma_z...$<br>\n${{{ E'} ^u} _v} = {\\overset{u\\downarrow v\\rightarrow}{\\left[\\begin{array}{cccc} 1& 0& 0& 0\\\\ 0& 0& 0& i\\\\ 0& 0& i& 0\\\\ 0& i& 0& 0\\end{array}\\right]}}$<br>\n${{{{ E'} ^v} _u}} {{{{{ \\sigma} _v} ^I} _J}}$\9=\9$\\overset{J\\downarrow I\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& 1\\end{array}\\right]}$\9$\\overset{J\\downarrow I\\rightarrow}{\\left[\\begin{array}{cc} i& 0\\\\ 0& -{i}\\end{array}\\right]}$\9$\\overset{J\\downarrow I\\rightarrow}{\\left[\\begin{array}{cc} 0& -{1}\\\\ 1& 0\\end{array}\\right]}$\9$\\overset{J\\downarrow I\\rightarrow}{\\left[\\begin{array}{cc} 0& i\\\\ i& 0\\end{array}\\right]}$<br>\n...then perform outer with $1_{2x2}$ or $i_{2x2}$...<br>\n${{{{ E'} ^v} _u}} {{{{{ \\sigma} _v} ^I} _J}}$\9$\\otimes \\{$\9$\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& 1\\end{array}\\right]}$\9,\9$\\left[\\begin{array}{cc} 0& -1\\\\ 1& 0\\end{array}\\right]$\9$\\} =$\9$\\left[\\begin{array}{cccc} 1& 0& 0& 0\\\\ 0& 1& 0& 0\\\\ 0& 0& 1& 0\\\\ 0& 0& 0& 1\\end{array}\\right]$\9$\\left[\\begin{array}{cccc} 0& -{1}& 0& 0\\\\ 1& 0& 0& 0\\\\ 0& 0& 0& 1\\\\ 0& 0& -{1}& 0\\end{array}\\right]$\9$\\left[\\begin{array}{cccc} 0& 0& -{1}& 0\\\\ 0& 0& 0& -{1}\\\\ 1& 0& 0& 0\\\\ 0& 1& 0& 0\\end{array}\\right]$\9$\\left[\\begin{array}{cccc} 0& 0& 0& -{1}\\\\ 0& 0& 1& 0\\\\ 0& -{1}& 0& 0\\\\ 1& 0& 0& 0\\end{array}\\right]$<br>\n(\9${{{{ E'} ^v} _u}} {{{{{ \\sigma} _v} ^I} _J}}$\9$\\otimes \\{$\9$\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& 1\\end{array}\\right]}$\9,\9$\\left[\\begin{array}{cc} 0& -1\\\\ 1& 0\\end{array}\\right]$\9$\\} ) \\cdot \\eta =$\9$\\left[\\begin{array}{cccc} 1& 0& 0& 0\\\\ 0& -{1}& 0& 0\\\\ 0& 0& -{1}& 0\\\\ 0& 0& 0& -{1}\\end{array}\\right]$\9$\\left[\\begin{array}{cccc} 0& 1& 0& 0\\\\ 1& 0& 0& 0\\\\ 0& 0& 0& 1\\\\ 0& 0& -{1}& 0\\end{array}\\right]$\9$\\left[\\begin{array}{cccc} 0& 0& 1& 0\\\\ 0& 0& 0& -{1}\\\\ 1& 0& 0& 0\\\\ 0& 1& 0& 0\\end{array}\\right]$\9$\\left[\\begin{array}{cccc} 0& 0& 0& 1\\\\ 0& 0& 1& 0\\\\ 0& -{1}& 0& 0\\\\ 1& 0& 0& 0\\end{array}\\right]$<br>\n(\9${{{{ E'} ^v} _u}} {{{{{ \\sigma} _v} ^I} _J}}$\9$\\otimes \\{$\9$\\overset{I\\downarrow J\\rightarrow}{\\left[\\begin{array}{cc} 1& 0\\\\ 0& 1\\end{array}\\right]}$\9,\9$\\left[\\begin{array}{cc} 0& -1\\\\ 1& 0\\end{array}\\right]$\9$\\} ) \\cdot \\eta \\cdot \\{ 1, i, j, k \\}^u =$\9$\\left[\\begin{array}{cccc} 1& i& j& k\\\\ i& -{1}& k& -{j}\\\\ j& -{k}& -{1}& i\\\\ k& j& -{i}& -{1}\\end{array}\\right]$<br>\n", outputtype="html", uid=35},
	{hidden=false, input="", output="", outputtype="html", uid=41}
}