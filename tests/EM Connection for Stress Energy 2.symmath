{
	{hidden=false, input="-- doesn't work with makeDense() yet ...\nsymmath.fixVariableNames = false", output="false", outputtype="html", uid=20},
	{hidden=false, input="-- so if I disable fixVariableNames, then I have to assign Greek variables separately (or use unicode names ... which I think Lua won't support ...) \nepsilon = var'\\\\epsilon'\ndelta = var'\\\\delta'\neta = var'\\\\eta'\n-- do I need to do this for storing symmetries and dependent variables?\n-- maybe I should be caching the globals that are used with implicitVars?\ng = var'g'\nR = var'R'\ndelta'_ab':setSymmetries{1,2}\neta'_ab':setSymmetries{1,2}\ng'_ab':setSymmetries{1,2}\nR'_ab':setSymmetries{1,2}", output="$\\epsilon$", outputtype="html", uid=33},
	{hidden=false, input="Tensor.deltaVariable = delta", output="$\\delta$", outputtype="html", uid=67},
	{hidden=false, input="t,x,y,z = vars('t','x','y','z')", output="$t$\9$x$\9$y$\9$z$", outputtype="html", uid=9},
	{hidden=false, input="Tensor.Chart{coords={t,x,y,z}}", output="table: 0x557c0c2aeb60", outputtype="html", uid=7},
	{hidden=false, input="efeDef = G'_uv':eq(8 * pi * T'_uv')", output="${{{ G} _u} _v} = {{{8}} {{π}} \\cdot {{{{ T} _u} _v}}}$", outputtype="html", uid=1},
	{hidden=false, input="Gdef = G'_uv':eq(R'_uv' - frac(1,2) * R'^a_a' * g'_uv')", output="${{{ G} _u} _v} = {{{{ R} _u} _v}{-{{{\\frac{1}{2}}} {{{{ R} ^a} _a}} {{{{ g} _u} _v}}}}}$", outputtype="html", uid=2},
	{hidden=false, input="efeWrtR = efeDef:subst(Gdef)", output="${{{{ R} _u} _v}{-{{{\\frac{1}{2}}} {{{{ R} ^a} _a}} {{{{ g} _u} _v}}}}} = {{{8}} {{π}} \\cdot {{{{ T} _u} _v}}}$", outputtype="html", uid=3},
	{hidden=false, input="Rdef = efeWrtR:replace(R'^a_a', 0)()", output="${{{ R} _u} _v} = {{{8}} {{π}} \\cdot {{{{ T} _u} _v}}}$", outputtype="html", uid=4},
	{hidden=false, input="-- using a weak-field approximation, where E_i ~ E^i, E_t = B_t = 0 (I think?) and g_uv ~ eta_uv", output="", outputtype="html", uid=26},
	{hidden=false, input="etaVal = Tensor('_uv', function(a,b) return a~=b and 0 or a==1 and -1 or 1 end)", output="$\\overset{u\\downarrow v\\rightarrow}{\\left[\\begin{array}{cccc} -1& 0& 0& 0\\\\ 0& 1& 0& 0\\\\ 0& 0& 1& 0\\\\ 0& 0& 0& 1\\end{array}\\right]}$", outputtype="html", uid=22},
	{hidden=false, input="deltaVal = Tensor('_uv', function(a,b) return a==b and 1 or 0 end)", output="$\\overset{u\\downarrow v\\rightarrow}{\\left[\\begin{array}{cccc} 1& 0& 0& 0\\\\ 0& 1& 0& 0\\\\ 0& 0& 1& 0\\\\ 0& 0& 0& 1\\end{array}\\right]}$", outputtype="html", uid=54},
	{hidden=false, input="Tensor:findChartForSymbol():setMetric(etaVal)", output="", outputtype="html", uid=29},
	{hidden=false, input="Eval = Tensor('^u', 0, E'^x', E'^y', E'^z')", output="$\\overset{u\\downarrow}{\\left[\\begin{matrix} 0 \\\\ { E} ^x \\\\ { E} ^y \\\\ { E} ^z\\end{matrix}\\right]}$", outputtype="html", uid=23},
	{hidden=false, input="Bval = Tensor('^u', 0, B'^x', B'^y', B'^z')", output="$\\overset{u\\downarrow}{\\left[\\begin{matrix} 0 \\\\ { B} ^x \\\\ { B} ^y \\\\ { B} ^z\\end{matrix}\\right]}$", outputtype="html", uid=24},
	{hidden=false, input="tUval = Tensor('^u', 1, 0, 0, 0)", output="$\\overset{u\\downarrow}{\\left[\\begin{matrix} 1 \\\\ 0 \\\\ 0 \\\\ 0\\end{matrix}\\right]}$", outputtype="html", uid=27},
	{hidden=false, input="LCval = Tensor:LeviCivita();", output="", outputtype="html", uid=30},
	{hidden=false, input="-- hmm I guess I have to add each valence separately ... \nTensor:getDefaultDenseCache():add(epsilon'_abcd', LCval'_abcd'())\nTensor:getDefaultDenseCache():add(epsilon'^ab_cd', LCval'^ab_cd'())\nTensor:getDefaultDenseCache():add(E'^u', Eval'^u'())\nTensor:getDefaultDenseCache():add(E'_u', Eval'_u'())\nTensor:getDefaultDenseCache():add(B'^u', Bval'^u'())\nTensor:getDefaultDenseCache():add(B'_u', Bval'_u'())\nTensor:getDefaultDenseCache():add(t'^u', tUval'^u'())\nTensor:getDefaultDenseCache():add(t'_u', tUval'_u'())\nTensor:getDefaultDenseCache():add(eta'_uv', etaVal'_uv'())\nTensor:getDefaultDenseCache():add(eta'^uv', etaVal'^uv'())\nTensor:getDefaultDenseCache():add(delta'_uv', deltaVal'_uv'())\nTensor:getDefaultDenseCache():add(delta'^uv', deltaVal'^uv'())", output="", outputtype="html", uid=37},
	{hidden=false, input="'<hr>'", output="<hr>", outputtype="html", uid=79},
	{hidden=false, input="Fdef = F'_ab':eq(t'_a' * E'_b' - t'_b' * E'_a' + epsilon'_abcd' * t'^c' * B'^d')", output="${{{ F} _a} _b} = {{{{{ t} _a}} {{{ E} _b}}}{-{{{{ t} _b}} {{{ E} _a}}}} + {{{{{{{ \\epsilon} _a} _b} _c} _d}} {{{ t} ^c}} {{{ B} ^d}}}}$", outputtype="html", uid=32},
	{hidden=false, input="Fdef:replaceWithDense()()", output="${\\overset{a\\downarrow b\\rightarrow}{\\left[\\begin{array}{cccc} { {{ F} _t} _t}& { {{ F} _t} _x}& { {{ F} _t} _y}& { {{ F} _t} _z}\\\\ { {{ F} _x} _t}& { {{ F} _x} _x}& { {{ F} _x} _y}& { {{ F} _x} _z}\\\\ { {{ F} _y} _t}& { {{ F} _y} _x}& { {{ F} _y} _y}& { {{ F} _y} _z}\\\\ { {{ F} _z} _t}& { {{ F} _z} _x}& { {{ F} _z} _y}& { {{ F} _z} _z}\\end{array}\\right]}} = {\\overset{a\\downarrow b\\rightarrow}{\\left[\\begin{array}{cccc} 0& -{{ E} ^x}& -{{ E} ^y}& -{{ E} ^z}\\\\ { E} ^x& 0& { B} ^z& -{{ B} ^y}\\\\ { E} ^y& -{{ B} ^z}& 0& { B} ^x\\\\ { E} ^z& { B} ^y& -{{ B} ^x}& 0\\end{array}\\right]}}$", outputtype="html", uid=36},
	{hidden=false, input="-- so friendly reminder, another definition of F is using two Levi-Civita tensors...\nFdef2 = F'_ab':eq(-frac(1,2) * epsilon'_abef' * epsilon'^ef_cd' * t'^c' * E'^d' + epsilon'_abcd' * t'^c' * B'^d')", output="${{{ F} _a} _b} = {{ {-{\\frac{1}{2}}} {{{{{{ \\epsilon} _a} _b} _e} _f}} {{{{{{ \\epsilon} ^e} ^f} _c} _d}} {{{ t} ^c}} {{{ E} ^d}}} + {{{{{{{ \\epsilon} _a} _b} _c} _d}} {{{ t} ^c}} {{{ B} ^d}}}}$", outputtype="html", uid=35},
	{hidden=false, input="Fdef2:replaceWithDense()()", output="${\\overset{a\\downarrow b\\rightarrow}{\\left[\\begin{array}{cccc} { {{ F} _t} _t}& { {{ F} _t} _x}& { {{ F} _t} _y}& { {{ F} _t} _z}\\\\ { {{ F} _x} _t}& { {{ F} _x} _x}& { {{ F} _x} _y}& { {{ F} _x} _z}\\\\ { {{ F} _y} _t}& { {{ F} _y} _x}& { {{ F} _y} _y}& { {{ F} _y} _z}\\\\ { {{ F} _z} _t}& { {{ F} _z} _x}& { {{ F} _z} _y}& { {{ F} _z} _z}\\end{array}\\right]}} = {\\overset{a\\downarrow b\\rightarrow}{\\left[\\begin{array}{cccc} 0& -{{ E} ^x}& -{{ E} ^y}& -{{ E} ^z}\\\\ { E} ^x& 0& { B} ^z& -{{ B} ^y}\\\\ { E} ^y& -{{ B} ^z}& 0& { B} ^x\\\\ { E} ^z& { B} ^y& -{{ B} ^x}& 0\\end{array}\\right]}}$", outputtype="html", uid=38},
	{hidden=false, input="Tdef = T'_uv':eq( 1/(4*pi) * ( F'_ua' * F'_v^a' - frac(1,4) * g'_uv' * F'_ab' * F'^ab' ))", output="${{{ T} _u} _v} = {{{\\frac{1}{{{4}} {{π}}}}} {{\\left({{{{{{ F} _u} _a}} {{{{ F} _v} ^a}}}{-{{{\\frac{1}{4}}} {{{{ g} _u} _v}} {{{{ F} _a} _b}} {{{{ F} ^a} ^b}}}}}\\right)}}}$", outputtype="html", uid=39},
	{hidden=false, input="Tdef = T'_uv':eq( 1/(4*pi) * ( F'_ua' * F'_vb' * g'^ab' - frac(1,4) * g'_uv' * F'_ab' * F'_cd' * g'^ac' * g'^bd' ))", output="${{{ T} _u} _v} = {{{\\frac{1}{{{4}} {{π}}}}} {{\\left({{{{{{ F} _u} _a}} {{{{ F} _v} _b}} {{{{ g} ^a} ^b}}}{-{{{\\frac{1}{4}}} {{{{ g} _u} _v}} {{{{ F} _a} _b}} {{{{ F} _c} _d}} {{{{ g} ^a} ^c}} {{{{ g} ^b} ^d}}}}}\\right)}}}$", outputtype="html", uid=42},
	{hidden=false, input="RicciForFDef = Rdef:subst(Tdef)()", output="${{{ R} _u} _v} = {{\\frac{1}{2}}{\\left({{{{4}} {{{{ F} _u} _a}} {{{{ F} _v} _b}} {{{{ g} ^a} ^b}}}{-{{{{{ F} _a} _b}} {{{{ F} _c} _d}} {{{{ g} ^a} ^c}} {{{{ g} ^b} ^d}} {{{{ g} _u} _v}}}}}\\right)}}$", outputtype="html", uid=45},
	{hidden=false, input="RicciForFDef:substIndex(Fdef)", output="${{{ R} _u} _v} = {{\\frac{1}{2}}{\\left({{{{4}} {{\\left({{{{{ t} _u}} {{{ E} _a}}}{-{{{{ t} _a}} {{{ E} _u}}}} + {{{{{{{ \\epsilon} _u} _a} _e} _f}} {{{ t} ^e}} {{{ B} ^f}}}}\\right)}} {{\\left({{{{{ t} _v}} {{{ E} _b}}}{-{{{{ t} _b}} {{{ E} _v}}}} + {{{{{{{ \\epsilon} _v} _b} _e} _f}} {{{ t} ^e}} {{{ B} ^f}}}}\\right)}} {{{{ g} ^a} ^b}}}{-{{{\\left({{{{{ t} _a}} {{{ E} _b}}}{-{{{{ t} _b}} {{{ E} _a}}}} + {{{{{{{ \\epsilon} _a} _b} _e} _f}} {{{ t} ^e}} {{{ B} ^f}}}}\\right)}} {{\\left({{{{{ t} _c}} {{{ E} _d}}}{-{{{{ t} _d}} {{{ E} _c}}}} + {{{{{{{ \\epsilon} _c} _d} _e} _f}} {{{ t} ^e}} {{{ B} ^f}}}}\\right)}} {{{{ g} ^a} ^c}} {{{{ g} ^b} ^d}} {{{{ g} _u} _v}}}}}\\right)}}$", outputtype="html", uid=40},
	{hidden=false, input="RicciForFDef:substIndex(Fdef):replace(g, eta)", output="${{{ R} _u} _v} = {{\\frac{1}{2}}{\\left({{{{4}} {{\\left({{{{{ t} _u}} {{{ E} _a}}}{-{{{{ t} _a}} {{{ E} _u}}}} + {{{{{{{ \\epsilon} _u} _a} _e} _f}} {{{ t} ^e}} {{{ B} ^f}}}}\\right)}} {{\\left({{{{{ t} _v}} {{{ E} _b}}}{-{{{{ t} _b}} {{{ E} _v}}}} + {{{{{{{ \\epsilon} _v} _b} _e} _f}} {{{ t} ^e}} {{{ B} ^f}}}}\\right)}} {{{{ \\eta} ^a} ^b}}}{-{{{\\left({{{{{ t} _a}} {{{ E} _b}}}{-{{{{ t} _b}} {{{ E} _a}}}} + {{{{{{{ \\epsilon} _a} _b} _e} _f}} {{{ t} ^e}} {{{ B} ^f}}}}\\right)}} {{\\left({{{{{ t} _c}} {{{ E} _d}}}{-{{{{ t} _d}} {{{ E} _c}}}} + {{{{{{{ \\epsilon} _c} _d} _e} _f}} {{{ t} ^e}} {{{ B} ^f}}}}\\right)}} {{{{ \\eta} ^a} ^c}} {{{{ \\eta} ^b} ^d}} {{{{ \\eta} _u} _v}}}}}\\right)}}$", outputtype="html", uid=44},
	{hidden=false, input="RicciForFDenseEqn = RicciForFDef:substIndex(Fdef):replace(g, eta):replaceWithDense()()", output="${\\overset{u\\downarrow v\\rightarrow}{\\left[\\begin{array}{cccc} { {{ R} _t} _t}& { {{ R} _t} _x}& { {{ R} _t} _y}& { {{ R} _t} _z}\\\\ { {{ R} _t} _x}& { {{ R} _x} _x}& { {{ R} _x} _y}& { {{ R} _x} _z}\\\\ { {{ R} _t} _y}& { {{ R} _x} _y}& { {{ R} _y} _y}& { {{ R} _y} _z}\\\\ { {{ R} _t} _z}& { {{ R} _x} _z}& { {{ R} _y} _z}& { {{ R} _z} _z}\\end{array}\\right]}} = {\\overset{u\\downarrow v\\rightarrow}{\\left[\\begin{array}{cccc} {{{ B} ^y}^{2}} + {{{ B} ^x}^{2}} + {{{ B} ^z}^{2}} + {{{ E} ^z}^{2}} + {{{ E} ^y}^{2}} + {{{ E} ^x}^{2}}& {{2}} {{\\left({{-{{{{ B} ^z}} {{{ E} ^y}}}} + {{{{ B} ^y}} {{{ E} ^z}}}}\\right)}}& {{2}} {{\\left({{{{{ B} ^z}} {{{ E} ^x}}}{-{{{{ B} ^x}} {{{ E} ^z}}}}}\\right)}}& {{2}} {{\\left({{-{{{{ B} ^y}} {{{ E} ^x}}}} + {{{{ B} ^x}} {{{ E} ^y}}}}\\right)}}\\\\ {{2}} {{\\left({{-{{{{ B} ^z}} {{{ E} ^y}}}} + {{{{ B} ^y}} {{{ E} ^z}}}}\\right)}}& {{{ B} ^y}^{2}} + {{{ B} ^z}^{2}}{-{{{ B} ^x}^{2}}}{-{{{ E} ^x}^{2}}} + {{{ E} ^z}^{2}} + {{{ E} ^y}^{2}}& -{{{2}} {{\\left({{{{{ B} ^x}} {{{ B} ^y}}} + {{{{ E} ^x}} {{{ E} ^y}}}}\\right)}}}& -{{{2}} {{\\left({{{{{ B} ^x}} {{{ B} ^z}}} + {{{{ E} ^x}} {{{ E} ^z}}}}\\right)}}}\\\\ {{2}} {{\\left({{{{{ B} ^z}} {{{ E} ^x}}}{-{{{{ B} ^x}} {{{ E} ^z}}}}}\\right)}}& -{{{2}} {{\\left({{{{{ B} ^x}} {{{ B} ^y}}} + {{{{ E} ^x}} {{{ E} ^y}}}}\\right)}}}& {{{ B} ^x}^{2}} + {{{ B} ^z}^{2}}{-{{{ B} ^y}^{2}}}{-{{{ E} ^y}^{2}}} + {{{ E} ^z}^{2}} + {{{ E} ^x}^{2}}& -{{{2}} {{\\left({{{{{ B} ^y}} {{{ B} ^z}}} + {{{{ E} ^y}} {{{ E} ^z}}}}\\right)}}}\\\\ {{2}} {{\\left({{-{{{{ B} ^y}} {{{ E} ^x}}}} + {{{{ B} ^x}} {{{ E} ^y}}}}\\right)}}& -{{{2}} {{\\left({{{{{ B} ^x}} {{{ B} ^z}}} + {{{{ E} ^x}} {{{ E} ^z}}}}\\right)}}}& -{{{2}} {{\\left({{{{{ B} ^y}} {{{ B} ^z}}} + {{{{ E} ^y}} {{{ E} ^z}}}}\\right)}}}& {{{ B} ^x}^{2}} + {{{ B} ^y}^{2}}{-{{{ B} ^z}^{2}}}{-{{{ E} ^z}^{2}}} + {{{ E} ^y}^{2}} + {{{ E} ^x}^{2}}\\end{array}\\right]}}$", outputtype="html", uid=43},
	{hidden=false, input="Sdef = -eta'^ua' * epsilon'_abcd' * E'^b' * B'^c' * t'^d'", output="${-{{{ \\eta} ^u} ^a}} {{{{{{ \\epsilon} _a} _b} _c} _d}} {{{ E} ^b}} {{{ B} ^c}} {{{ t} ^d}}$", outputtype="html", uid=48},
	{hidden=false, input="Sval = Sdef:replaceWithDense()()", output="$\\overset{u\\downarrow}{\\left[\\begin{matrix} 0 \\\\ {{{{ B} ^z}} {{{ E} ^y}}}{-{{{{ B} ^y}} {{{ E} ^z}}}} \\\\ {-{{{{ B} ^z}} {{{ E} ^x}}}} + {{{{ B} ^x}} {{{ E} ^z}}} \\\\ {{{{ B} ^y}} {{{ E} ^x}}}{-{{{{ B} ^x}} {{{ E} ^y}}}}\\end{matrix}\\right]}$", outputtype="html", uid=49},
	{hidden=false, input="assert(Sval.variance[1].lower == false)\nTensor:getDefaultDenseCache():add(S'^u', Sval'^u'())\nTensor:getDefaultDenseCache():add(S'_u', Sval'_u'())", output="", outputtype="html", uid=56},
	{hidden=false, input="RicciForEBDef = R'_uv':eq(2 * (S'_u' * t'_v' + S'_v' * t'_u') - 2 * (B'_u' * B'_v' + E'_u' * E'_v') + delta'_uv' * (E'_a' * E'^a' + B'_a' * B'^a'))", output="${{{ R} _u} _v} = {{{{2}} {{\\left({{{{{ S} _u}} {{{ t} _v}}} + {{{{ S} _v}} {{{ t} _u}}}}\\right)}}}{-{{{2}} {{\\left({{{{{ B} _u}} {{{ B} _v}}} + {{{{ E} _u}} {{{ E} _v}}}}\\right)}}}} + {{{{{ \\delta} _u} _v}} {{\\left({{{{{ E} _a}} {{{ E} ^a}}} + {{{{ B} _a}} {{{ B} ^a}}}}\\right)}}}}$", outputtype="html", uid=55},
	{hidden=false, input="RicciForEBDenseEqn = RicciForEBDef:replaceWithDense()()", output="${\\overset{u\\downarrow v\\rightarrow}{\\left[\\begin{array}{cccc} { {{ R} _t} _t}& { {{ R} _t} _x}& { {{ R} _t} _y}& { {{ R} _t} _z}\\\\ { {{ R} _t} _x}& { {{ R} _x} _x}& { {{ R} _x} _y}& { {{ R} _x} _z}\\\\ { {{ R} _t} _y}& { {{ R} _x} _y}& { {{ R} _y} _y}& { {{ R} _y} _z}\\\\ { {{ R} _t} _z}& { {{ R} _x} _z}& { {{ R} _y} _z}& { {{ R} _z} _z}\\end{array}\\right]}} = {\\overset{u\\downarrow v\\rightarrow}{\\left[\\begin{array}{cccc} {{{ B} ^z}^{2}} + {{{ B} ^x}^{2}} + {{{ B} ^y}^{2}} + {{{ E} ^z}^{2}} + {{{ E} ^y}^{2}} + {{{ E} ^x}^{2}}& {{2}} {{\\left({{-{{{{ B} ^z}} {{{ E} ^y}}}} + {{{{ B} ^y}} {{{ E} ^z}}}}\\right)}}& {{2}} {{\\left({{{{{ B} ^z}} {{{ E} ^x}}}{-{{{{ B} ^x}} {{{ E} ^z}}}}}\\right)}}& {{2}} {{\\left({{-{{{{ B} ^y}} {{{ E} ^x}}}} + {{{{ B} ^x}} {{{ E} ^y}}}}\\right)}}\\\\ {{2}} {{\\left({{-{{{{ B} ^z}} {{{ E} ^y}}}} + {{{{ B} ^y}} {{{ E} ^z}}}}\\right)}}& {-{{{ B} ^x}^{2}}} + {{{ B} ^y}^{2}} + {{{ B} ^z}^{2}} + {{{ E} ^z}^{2}}{-{{{ E} ^x}^{2}}} + {{{ E} ^y}^{2}}& -{{{2}} {{\\left({{{{{ B} ^x}} {{{ B} ^y}}} + {{{{ E} ^x}} {{{ E} ^y}}}}\\right)}}}& -{{{2}} {{\\left({{{{{ B} ^x}} {{{ B} ^z}}} + {{{{ E} ^x}} {{{ E} ^z}}}}\\right)}}}\\\\ {{2}} {{\\left({{{{{ B} ^z}} {{{ E} ^x}}}{-{{{{ B} ^x}} {{{ E} ^z}}}}}\\right)}}& -{{{2}} {{\\left({{{{{ B} ^x}} {{{ B} ^y}}} + {{{{ E} ^x}} {{{ E} ^y}}}}\\right)}}}& {-{{{ B} ^y}^{2}}} + {{{ B} ^x}^{2}} + {{{ B} ^z}^{2}} + {{{ E} ^z}^{2}}{-{{{ E} ^y}^{2}}} + {{{ E} ^x}^{2}}& -{{{2}} {{\\left({{{{{ B} ^y}} {{{ B} ^z}}} + {{{{ E} ^y}} {{{ E} ^z}}}}\\right)}}}\\\\ {{2}} {{\\left({{-{{{{ B} ^y}} {{{ E} ^x}}}} + {{{{ B} ^x}} {{{ E} ^y}}}}\\right)}}& -{{{2}} {{\\left({{{{{ B} ^x}} {{{ B} ^z}}} + {{{{ E} ^x}} {{{ E} ^z}}}}\\right)}}}& -{{{2}} {{\\left({{{{{ B} ^y}} {{{ B} ^z}}} + {{{{ E} ^y}} {{{ E} ^z}}}}\\right)}}}& {-{{{ B} ^z}^{2}}} + {{{ B} ^x}^{2}} + {{{ B} ^y}^{2}} + {{{ E} ^y}^{2}}{-{{{ E} ^z}^{2}}} + {{{ E} ^x}^{2}}\\end{array}\\right]}}$", outputtype="html", uid=59},
	{hidden=false, input="local diff = (RicciForFDenseEqn:rhs() - RicciForEBDenseEqn:rhs())()\nif diff ~= Tensor'_uv' then\n\9error(\"expected this to be zero:\\n\"..diff)\nend\nprint'match!'\n-- TODO instead of verifying the dense tensor definitions match,\n-- I could've just substituted the Sdef tensor expressions from the first Ricci index expression def to arrive at the second Ricci index expression def", output="match!<br>\n", outputtype="html", uid=57},
	{hidden=false, input="'<hr>'", output="<hr>", outputtype="html", uid=78},
	{hidden=false, input="-- here's a valid un-projection from Ricci to Riemann when the Ricci is trace-free (such as with Electromagnetism)\n-- R_abcd = 2 δ^u_[a R_b][d g_c]_u\n-- looks like this is the \"Kulkarni-Nomizu\" product of the Ricci and the metric: https://en.wikipedia.org/wiki/Kulkarni%E2%80%93Nomizu_product\n-- and looks like in general, the Riemann = the Weyl + the Kulkarni-Nomizu of the Schouten & the metric\n-- but is the Weyl zero and the Schouten = (prop.to) Ricci ? or is this a different identity?  after all, mine is dependent on being trace-free...\n-- turns out the Schouten is a trace-reversal (wrt some scalar) of the Ricci, and my Ricci trace is zero,\n-- so yes this is the same identity, and my Weyl should be zero\nprint[[$R_{abcd} = 2 g^{uv} g_{u[a} R_{b][d} g_{c]v} $]]", output="$R_{abcd} = 2 g^{uv} g_{u[a} R_{b][d} g_{c]v} $<br>\n", outputtype="html", uid=63},
	{hidden=false, input="RiemannFromRicciTFDef = R'_abcd':eq(frac(1,2) * (\n\9  delta'^u_a' * R'_bd' * g'_cu'\n\9- delta'^u_b' * R'_ad' * g'_cu'\n\9- delta'^u_a' * R'_bc' * g'_du'\n\9+ delta'^u_b' * R'_ac' * g'_du'\n\9-- Can I extend it to work with non-trace-free Ricci tensors?\n\9-- Why doesn't just adding this make the extra trace term go away?\n\9-- Well for sure it invalidates the R_(ab)cd = R_ab(cd) = 0 symmetry ...\n\9-- Adding the first will make g^ac R_abcd = R_bd directly, but will make g^bd R_abcd have an extra -2 R_ac \n\9-- - R'_ac' * g'_bd'\n\9-- - R'_bd' * g'_ac'\n))", output="${{{{{ R} _a} _b} _c} _d} = {{{\\frac{1}{2}}} {{\\left({{{{{{ \\delta} ^u} _a}} {{{{ R} _b} _d}} {{{{ g} _c} _u}}}{-{{{{{ \\delta} ^u} _b}} {{{{ R} _a} _d}} {{{{ g} _c} _u}}}}{-{{{{{ \\delta} ^u} _a}} {{{{ R} _b} _c}} {{{{ g} _d} _u}}}} + {{{{{ \\delta} ^u} _b}} {{{{ R} _a} _c}} {{{{ g} _d} _u}}}}\\right)}}}$", outputtype="html", uid=64},
	{hidden=false, input="RiemannFromRicciTFDef * g'^ac'", output="${{{{{{{ R} _a} _b} _c} _d}} {{{{ g} ^a} ^c}}} = {{{\\frac{1}{2}}} {{\\left({{{{{{ \\delta} ^u} _a}} {{{{ R} _b} _d}} {{{{ g} _c} _u}}}{-{{{{{ \\delta} ^u} _b}} {{{{ R} _a} _d}} {{{{ g} _c} _u}}}}{-{{{{{ \\delta} ^u} _a}} {{{{ R} _b} _c}} {{{{ g} _d} _u}}}} + {{{{{ \\delta} ^u} _b}} {{{{ R} _a} _c}} {{{{ g} _d} _u}}}}\\right)}} {{{{ g} ^a} ^c}}}$", outputtype="html", uid=76},
	{hidden=false, input="local tmp = (RiemannFromRicciTFDef * g'^ac')():simplifyMetrics()()\nprint(tmp)\nlocal tmp2 = R'^c_c':eq(0)\nprint(tmp2)\ntmp = tmp:subst(tmp2)()\nprint(tmp)", output="${{{{{ R} ^c} _b} _c} _d} = {{\\frac{1}{2}}{\\left({{{{2}} {{{{ R} _b} _d}}} + {{{{{ R} ^c} _c}} {{{{ g} _d} _b}}}}\\right)}}$<br>\n${{{ R} ^c} _c} = {0}$<br>\n${{{{{ R} ^c} _b} _c} _d} = {{{ R} _b} _d}$<br>\n", outputtype="html", uid=70},
	{hidden=false, input="local tmp = (RiemannFromRicciTFDef * g'^bd')():simplifyMetrics()()\nprint(tmp)\nlocal tmp2 = R'^d_d':eq(0)\nprint(tmp2)\ntmp = tmp:subst(tmp2)()\nprint(tmp)", output="${{{{{ R} _a} ^d} _c} _d} = {{\\frac{1}{2}}{\\left({{{{2}} {{{{ R} _a} _c}}} + {{{{{ R} ^d} _d}} {{{{ g} _c} _a}}}}\\right)}}$<br>\n${{{ R} ^d} _d} = {0}$<br>\n${{{{{ R} _a} ^d} _c} _d} = {{{ R} _a} _c}$<br>\n", outputtype="html", uid=72},
	{hidden=false, input="-- 1st and 2nd indexes are antisymmetric\n(RiemannFromRicciTFDef + RiemannFromRicciTFDef:reindex{abcd='bacd'})()", output="${{{{{{ R} _a} _b} _c} _d} + {{{{{ R} _b} _a} _c} _d}} = {0}$", outputtype="html", uid=73},
	{hidden=false, input="-- 3rd and 4th indexes are antisymmetric\n(RiemannFromRicciTFDef + RiemannFromRicciTFDef:reindex{abcd='abdc'})()", output="${{{{{{ R} _a} _b} _c} _d} + {{{{{ R} _a} _b} _d} _c}} = {0}$", outputtype="html", uid=75},
	{hidden=false, input="(RiemannFromRicciTFDef + RiemannFromRicciTFDef:reindex{abcd='acdb'} + RiemannFromRicciTFDef:reindex{abcd='adbc'})():simplifyMetrics()():applySymmetries()()", output="${{{{{{ R} _a} _b} _c} _d} + {{{{{ R} _a} _c} _d} _b} + {{{{{ R} _a} _d} _b} _c}} = {0}$", outputtype="html", uid=74},
	{hidden=false, input="-- also the identity: Riemann = Weyl + Kulkarni-Nomizu of Schouten and metric\n-- implies the Weyl should be zero ...\nlocal n = 4\nWeylDef = C'_abcd':eq(\n\9R'_abcd'\n\9+ frac(1,n-2) * (R'_ad' * g'_bc' - R'_ac' * g'_bd' + R'_bc' * g'_ad' - R'_bd' * g'_ac')\n\9+ frac(1,(n-1)*(n-2)) * R'_uv' * g'^uv' * (g'_ac' * g'_bd' - g'_ad' * g'_bc')\n)\nprint(WeylDef)\nprint(WeylDef:subst(RiemannFromRicciTFDef)():simplifyMetrics()():applySymmetries()())", output="${{{{{ C} _a} _b} _c} _d} = {{{{{{ R} _a} _b} _c} _d} + {{{\\frac{1}{2}}} {{\\left({{{{{{ R} _a} _d}} {{{{ g} _b} _c}}}{-{{{{{ R} _a} _c}} {{{{ g} _b} _d}}}} + {{{{{ R} _b} _c}} {{{{ g} _a} _d}}}{-{{{{{ R} _b} _d}} {{{{ g} _a} _c}}}}}\\right)}}} + {{{\\frac{1}{6}}} {{{{ R} _u} _v}} {{{{ g} ^u} ^v}} {{\\left({{{{{{ g} _a} _c}} {{{{ g} _b} _d}}}{-{{{{{ g} _a} _d}} {{{{ g} _b} _c}}}}}\\right)}}}}$<br>\n${{{{{ C} _a} _b} _c} _d} = {{\\frac{1}{6}} {{{{{ R} ^v} _v}} {{\\left({{-{{{{{ g} _a} _d}} {{{{ g} _b} _c}}}} + {{{{{ g} _a} _c}} {{{{ g} _b} _d}}}}\\right)}}}}$<br>\n", outputtype="html", uid=89},
	{hidden=false, input="-- A general Ricci -> Riemann unprojection algorithm could be ... \n-- 1) use Ricci to construct Schouten\n-- 2) use Schouten & metric, Kulkarni-Nomizu to reconstruct Riemann - Weyl\n-- 3) pick any possible Weyl (subject to Weyl's properties of total-antisymmetry ... ?)\n-- ... and you can get many different Riemann tensors", output="", outputtype="html", uid=90},
	{hidden=false, input="'<hr>'", output="<hr>", outputtype="html", uid=81},
	{hidden=false, input="-- now specifically for the EM stress-energy / Ricci tensor:", output="", outputtype="html", uid=82},
	{hidden=false, input="RicciForEBDef:reindex{uva='abu'}", output="${{{ R} _a} _b} = {{{{2}} {{\\left({{{{{ S} _a}} {{{ t} _b}}} + {{{{ S} _b}} {{{ t} _a}}}}\\right)}}}{-{{{2}} {{\\left({{{{{ B} _a}} {{{ B} _b}}} + {{{{ E} _a}} {{{ E} _b}}}}\\right)}}}} + {{{{{ \\delta} _a} _b}} {{\\left({{{{{ E} _u}} {{{ E} ^u}}} + {{{{ B} _u}} {{{ B} ^u}}}}\\right)}}}}$", outputtype="html", uid=85},
	{hidden=false, input="RiemannFromRicciTF_EB_Def = RiemannFromRicciTFDef:substIndex(RicciForEBDef:reindex{uva='abv'})", output="${{{{{ R} _a} _b} _c} _d} = {{{\\frac{1}{2}}} {{\\left({{{{{{ \\delta} ^u} _a}} {{\\left({{{{2}} {{\\left({{{{{ S} _b}} {{{ t} _d}}} + {{{{ S} _d}} {{{ t} _b}}}}\\right)}}}{-{{{2}} {{\\left({{{{{ B} _b}} {{{ B} _d}}} + {{{{ E} _b}} {{{ E} _d}}}}\\right)}}}} + {{{{{ \\delta} _b} _d}} {{\\left({{{{{ E} _e}} {{{ E} ^e}}} + {{{{ B} _e}} {{{ B} ^e}}}}\\right)}}}}\\right)}} {{{{ g} _c} _u}}}{-{{{{{ \\delta} ^u} _b}} {{\\left({{{{2}} {{\\left({{{{{ S} _a}} {{{ t} _d}}} + {{{{ S} _d}} {{{ t} _a}}}}\\right)}}}{-{{{2}} {{\\left({{{{{ B} _a}} {{{ B} _d}}} + {{{{ E} _a}} {{{ E} _d}}}}\\right)}}}} + {{{{{ \\delta} _a} _d}} {{\\left({{{{{ E} _e}} {{{ E} ^e}}} + {{{{ B} _e}} {{{ B} ^e}}}}\\right)}}}}\\right)}} {{{{ g} _c} _u}}}}{-{{{{{ \\delta} ^u} _a}} {{\\left({{{{2}} {{\\left({{{{{ S} _b}} {{{ t} _c}}} + {{{{ S} _c}} {{{ t} _b}}}}\\right)}}}{-{{{2}} {{\\left({{{{{ B} _b}} {{{ B} _c}}} + {{{{ E} _b}} {{{ E} _c}}}}\\right)}}}} + {{{{{ \\delta} _b} _c}} {{\\left({{{{{ E} _e}} {{{ E} ^e}}} + {{{{ B} _e}} {{{ B} ^e}}}}\\right)}}}}\\right)}} {{{{ g} _d} _u}}}} + {{{{{ \\delta} ^u} _b}} {{\\left({{{{2}} {{\\left({{{{{ S} _a}} {{{ t} _c}}} + {{{{ S} _c}} {{{ t} _a}}}}\\right)}}}{-{{{2}} {{\\left({{{{{ B} _a}} {{{ B} _c}}} + {{{{ E} _a}} {{{ E} _c}}}}\\right)}}}} + {{{{{ \\delta} _a} _c}} {{\\left({{{{{ E} _e}} {{{ E} ^e}}} + {{{{ B} _e}} {{{ B} ^e}}}}\\right)}}}}\\right)}} {{{{ g} _d} _u}}}}\\right)}}}$", outputtype="html", uid=83},
	{hidden=false, input="RiemannFromRicciTF_EB_Def():simplifyMetrics()():applySymmetries()()", output="${{{{{ R} _a} _b} _c} _d} = {{\\frac{1}{2}}{\\left({{{{2}} {{{ B} _a}} {{{ B} _d}} {{{{ g} _b} _c}}}{-{{{2}} {{{ B} _b}} {{{ B} _d}} {{{{ g} _a} _c}}}}{-{{{2}} {{{ B} _a}} {{{ B} _c}} {{{{ g} _b} _d}}}} + {{{2}} {{{ B} _b}} {{{ B} _c}} {{{{ g} _a} _d}}}{-{{{2}} {{{ E} _b}} {{{ E} _d}} {{{{ g} _a} _c}}}} + {{{2}} {{{ E} _a}} {{{ E} _d}} {{{{ g} _b} _c}}}{-{{{2}} {{{ E} _a}} {{{ E} _c}} {{{{ g} _b} _d}}}} + {{{2}} {{{ E} _b}} {{{ E} _c}} {{{{ g} _a} _d}}} + {{{2}} {{{ S} _a}} {{{ t} _c}} {{{{ g} _b} _d}}}{-{{{2}} {{{ S} _c}} {{{ t} _b}} {{{{ g} _a} _d}}}}{-{{{2}} {{{ S} _b}} {{{ t} _c}} {{{{ g} _a} _d}}}} + {{{2}} {{{ S} _b}} {{{ t} _d}} {{{{ g} _a} _c}}}{-{{{2}} {{{ S} _d}} {{{ t} _a}} {{{{ g} _b} _c}}}}{-{{{2}} {{{ S} _a}} {{{ t} _d}} {{{{ g} _b} _c}}}} + {{{2}} {{{ S} _d}} {{{ t} _b}} {{{{ g} _a} _c}}} + {{{2}} {{{ S} _c}} {{{ t} _a}} {{{{ g} _b} _d}}} + {{{{ B} _e}} {{{ B} ^e}} {{{{ \\delta} _b} _d}} {{{{ g} _a} _c}}} + {{{{ B} ^e}} {{{ B} _e}} {{{{ \\delta} _a} _c}} {{{{ g} _b} _d}}}{-{{{{ B} ^e}} {{{ B} _e}} {{{{ \\delta} _b} _c}} {{{{ g} _a} _d}}}}{-{{{{ B} _e}} {{{ B} ^e}} {{{{ \\delta} _a} _d}} {{{{ g} _b} _c}}}}{-{{{{ E} _e}} {{{ E} ^e}} {{{{ \\delta} _a} _d}} {{{{ g} _b} _c}}}}{-{{{{ E} _e}} {{{ E} ^e}} {{{{ \\delta} _b} _c}} {{{{ g} _a} _d}}}} + {{{{ E} ^e}} {{{ E} _e}} {{{{ \\delta} _a} _c}} {{{{ g} _b} _d}}} + {{{{ E} ^e}} {{{ E} _e}} {{{{ \\delta} _b} _d}} {{{{ g} _a} _c}}}}\\right)}}$", outputtype="html", uid=84},
	{hidden=false, input="'<hr>'", output="<hr>", outputtype="html", uid=86},
	{hidden=false, input="-- now how do I deduce an arbitrary connection that gives rise to a riemann tensor ...", output="", outputtype="html", uid=87},
	{hidden=false, input="", output="", outputtype="html", uid=88}
}