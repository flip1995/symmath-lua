{
	{hidden=false, input="t,x,y,z = vars('t','x','y','z')", output="$t$\9$x$\9$y$\9$z$", outputtype="html", uid=73},
	{hidden=false, input="chart = Tensor.Chart{coords={t,x,y,z}}", output="table: 0x5624b1cac210", outputtype="html", uid=28},
	{hidden=false, input="dim = #chart.coords", output="4", outputtype="html", uid=52},
	{hidden=false, input="-- TODO technically for weak-field linearized, g_ab = eta_ab + h_ab is the metric, though indexes are raised/lowered using eta_ab and not g_ab \netaLLval = Tensor('_ab', Matrix.diagonal(-1,1,1,1):unpack())\nchart:setMetric(etaLLval)\nprint(eta'_ab':eq(etaLLval));", output="${{{ \\eta} _a} _b} = {\\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  -1 &  0 &  0 &  0 \\\\  0 &  1 &  0 &  0 \\\\  0 &  0 &  1 &  0 \\\\  0 &  0 &  0 &  1\\end{matrix} \\right]}}$<br>\n", outputtype="html", uid=30},
	{hidden=false, input="etaUUval = chart.metricInverse\nprint(eta'^ab':eq(etaUUval));", output="${{{ \\eta} ^a} ^b} = {\\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  -{1} &  0 &  0 &  0 \\\\  0 &  1 &  0 &  0 \\\\  0 &  0 &  1 &  0 \\\\  0 &  0 &  0 &  1\\end{matrix} \\right]}}$<br>\n", outputtype="html", uid=31},
	{hidden=false, input="-- ...and therefore, since eta_ab raises/lowers indexes, \n-- (technically eta^ab raises and g_ab lowered, and (h_ab)^2 ~ 0, \n-- therefore raising and lowering will produce a (h_ab)^2 term which is then approximated to zero)\n-- lets use eta for our Tensor.metricVariable\nTensor.metricVariable = eta", output="$\\eta$", outputtype="html", uid=49},
	{hidden=false, input="-- section 2", output="", outputtype="html", uid=12},
	{hidden=false, input="gdef = g'_uv':eq(eta'_uv' + h'_uv')", output="${{{ g} _u} _v} = {{{{ \\eta} _u} _v} + {{{ h} _u} _v}}$", outputtype="html", uid=1},
	{hidden=false, input="hbar = var'\\\\bar{h}'", output="$\\bar{h}$", outputtype="html", uid=2},
	{hidden=false, input="hbardef = hbar'_uv':eq(h'_uv' - frac(1,2) * eta'_uv' * h'^a_a')", output="${{{ \\bar{h}} _u} _v} = {{{{ h} _u} _v}{-{{{\\frac{1}{2}}} {{{{ \\eta} _u} _v}} {{{{ h} ^a} _a}}}}}$", outputtype="html", uid=3},
	{hidden=false, input="trhbardef = (hbardef * eta'^uv')\n\9:simplifyMetrics()\n\9:tidyIndexes()()", output="${{{ \\bar{h}} ^a} _a} = {-{{{ h} ^a} _a}}$", outputtype="html", uid=50},
	{hidden=false, input="hdef = hbardef:solve(h'_uv'):simplifyAddMulDiv():subst(trhbardef:solve(h'^a_a'))", output="${{{ h} _u} _v} = {{{{ \\bar{h}} _u} _v} + {{{\\frac{1}{2}}} {{{{ \\eta} _u} _v}} \\cdot  {-{{{ \\bar{h}} ^a} _a}}}}$", outputtype="html", uid=154},
	{hidden=false, input="-- this isn't in ch.35, but is in earlier chapters on weak-field de-Donder linearized GR, and the results are referenced (iirc)\nhbargauge = hbar'_uv^,v':eq(0)", output="${{{{ \\bar{h}} _u} _v} ^{,v}} = {0}$", outputtype="html", uid=44},
	{hidden=false, input="-- TODO make use of simplifyMetrics(), and make simplifyMetrics() work with comma variables *ONLY* when the metric itself is defined *AND* constant\n-- *OR* allow a rule to be set somehow that \"metricIsConstant\" or something, in the case that dense tensors aren't being used.\nhgauge = hbargauge:splitOffDerivIndexes()\n\9:subst(hbardef, trhbardef)\n\9:replace(h'^a_a', h'_ab' * eta'^ab')\n\9:simplifyAddMulDiv()\n\9:replace(eta'^ab,v', 0)\n\9:replace(eta'_uv^,v', 0)\n\9:simplify()\n\9:replace(eta'^ab' * eta'_uv' * h'_ab^,v', h'^v_v,u')\n\9:solve(h'_uv^,v')()", output="${{{{ h} _u} _v} ^{,v}} = {{\\frac{1}{2}} {{{{ h} ^v} _v} _{,u}}}$", outputtype="html", uid=45},
	{hidden=false, input="connLdef = Gamma'_abc':eq(frac(1,2)*(g'_ab,c' + g'_ac,b' - g'_bc,a'))", output="${{{{ \\Gamma} _a} _b} _c} = {{{\\frac{1}{2}}} {{\\left({{{{{{ g} _a} _b} _{,c}} + {{{{ g} _a} _c} _{,b}}}{-{{{{ g} _b} _c} _{,a}}}}\\right)}}}$", outputtype="html", uid=46},
	{hidden=false, input="connLdef = connLdef:splitOffDerivIndexes():substIndex(gdef)()\n\9--:replaceIndex(eta'_ab,c', 0)\9-- why does this only replace eta_ab,c and ignore all others?\n\9:replace(eta'_ab,c', 0):replace(eta'_ac,b', 0):replace(eta'_bc,a', 0)\n\9:simplify()", output="${{{{ \\Gamma} _a} _b} _c} = {{\\frac{1}{2}}{\\left({{{{{ h} _a} _b} _{,c}} + {{{{ h} _a} _c} _{,b}}{-{{{{ h} _b} _c} _{,a}}}}\\right)}}$", outputtype="html", uid=47},
	{hidden=false, input="conndef = (connLdef:reindex{a='u'}*eta'^au')()\n\9:simplifyMetrics()\n\9:simplify()\n\9-- TODO set up the rules to raise/lower commas in the case that eta is constant", output="${{{{ \\Gamma} ^a} _b} _c} = {{\\frac{1}{2}} {{{{{ \\eta} ^a} ^u}} {{\\left({{{{{ h} _u} _b} _{,c}} + {{{{ h} _u} _c} _{,b}}{-{{{{ h} _b} _c} _{,u}}}}\\right)}}}}$", outputtype="html", uid=48},
	{hidden=false, input="conndef = conndef:simplifyAddMulDiv()\n\9:replace(eta'^au' * h'_ub,c', h'^a_b,c')\n\9:replace(eta'^au' * h'_uc,b', h'^a_c,b')\n\9:replace(eta'^au' * h'_bc,u', h'_bc^,a')\n\9:simplify()", output="${{{{ \\Gamma} ^a} _b} _c} = {{\\frac{1}{2}}{\\left({{{{{ h} ^a} _b} _{,c}} + {{{{ h} ^a} _c} _{,b}}{-{{{{ h} _b} _c} ^{,a}}}}\\right)}}$", outputtype="html", uid=53},
	{hidden=false, input="Riemanndef = R'^a_bcd':eq(Gamma'^a_bd,c' - Gamma'^a_bc,d' + Gamma'^a_ec' * Gamma'^e_bd' - Gamma'^a_ed' * Gamma'^e_bc')", output="${{{{{ R} ^a} _b} _c} _d} = {{{{{{{ \\Gamma} ^a} _b} _d} _{,c}}{-{{{{{ \\Gamma} ^a} _b} _c} _{,d}}} + {{{{{{ \\Gamma} ^a} _e} _c}} {{{{{ \\Gamma} ^e} _b} _d}}}}{-{{{{{{ \\Gamma} ^a} _e} _d}} {{{{{ \\Gamma} ^e} _b} _c}}}}}$", outputtype="html", uid=54},
	{hidden=false, input="Riemanndef = Riemanndef\n\9:splitOffDerivIndexes()\n\9:substIndex(conndef)\n\9:simplify()", output="${{{{{ R} ^a} _b} _c} _d} = {{\\frac{1}{4}}{\\left({{{{2}} {{{{{{ h} _b} _c} ^{,a}} _{,d}}}} + {{{2}} {{{{{{ h} ^a} _b} _{,d}} _{,c}}}} + {{{2}} {{{{{{ h} ^a} _d} _{,b}} _{,c}}}} + {{{{{{ h} ^e} _c} _{,b}}} {{{{{ h} _e} _d} ^{,a}}}} + {{{{{{ h} ^e} _b} _{,c}}} {{{{{ h} _e} _d} ^{,a}}}} + {{{{{{ h} ^a} _c} _{,e}}} {{{{{ h} ^e} _d} _{,b}}}} + {{{{{{ h} ^a} _c} _{,e}}} {{{{{ h} ^e} _b} _{,d}}}} + {{{{{{ h} ^a} _e} _{,c}}} {{{{{ h} ^e} _d} _{,b}}}} + {{{{{{ h} _b} _d} ^{,e}}} {{{{{ h} _e} _c} ^{,a}}}} + {{{{{{ h} ^a} _e} _{,d}}} {{{{{ h} _b} _c} ^{,e}}}} + {{{{{{ h} ^a} _e} _{,c}}} {{{{{ h} ^e} _b} _{,d}}}} + {{{{{{ h} ^a} _d} _{,e}}} {{{{{ h} _b} _c} ^{,e}}}}{-{{{2}} {{{{{{ h} ^a} _b} _{,c}} _{,d}}}}}{-{{{2}} {{{{{{ h} _b} _d} ^{,a}} _{,c}}}}}{-{{{2}} {{{{{{ h} ^a} _c} _{,b}} _{,d}}}}}{-{{{{{{ h} ^a} _e} _{,d}}} {{{{{ h} ^e} _c} _{,b}}}}}{-{{{{{{ h} ^a} _d} _{,e}}} {{{{{ h} ^e} _c} _{,b}}}}}{-{{{{{{ h} ^e} _b} _{,d}}} {{{{{ h} _e} _c} ^{,a}}}}}{-{{{{{{ h} ^a} _c} _{,e}}} {{{{{ h} _b} _d} ^{,e}}}}}{-{{{{{{ h} ^a} _d} _{,e}}} {{{{{ h} ^e} _b} _{,c}}}}}{-{{{{{{ h} ^e} _d} _{,b}}} {{{{{ h} _e} _c} ^{,a}}}}}{-{{{{{{ h} ^a} _e} _{,c}}} {{{{{ h} _b} _d} ^{,e}}}}}{-{{{{{{ h} _b} _c} ^{,e}}} {{{{{ h} _e} _d} ^{,a}}}}}{-{{{{{{ h} ^a} _e} _{,d}}} {{{{{ h} ^e} _b} _{,c}}}}}}\\right)}}$", outputtype="html", uid=56},
	{hidden=false, input="-- hmm ... Riemanndef:replaceIndex(h'_ab,^c' * h'_ef,^g', 0) doesn't work...\n-- probably because there are sum terms that it isn't matching to ...\n-- can I include all of them here?\n--[[\nRiemanndef:replaceIndex(h'^e_b,c' * h'_ed^,a', 0)\n--]]\n-- probably not, since :replaceIndex() of this exact expression still won't match it ...\n-- so the other alternative is to write out every explicit (∂h_ij)^2 term in replace() functions ...\n-- and there should be 18 of those from (Γ^i_jk)^2 , minus any matches terms ...\n-- almost as much typing as the map() and matching to (∂h_ij)^2 ...\n--[[\nRiemanndef\n\9:replace(h'^e_b,c' * h'_ed^,a', 0)\n\9:replace(h'^a_e,c' * h'^e_b,d', 0)\n\9:replace(h'^e_b,c' * h'_ed^,a', 0)\n\9error(\"and more terms ...\")\n--]]\n--[[ another way is to just simplify the (Γ^i_jk)^2 itself in the replace() ... x4 to remove the wrapping constant division ...\nlocal tmp = (4 * (Gamma'^a_ec' * Gamma'^e_bd' - Gamma'^a_ed' * Gamma'^e_bc')):substIndex(conndef)():eq(0)\nprint(tmp)\nprint(Riemanndef)\nprint(Riemanndef:subst(tmp)) -- why doesn't this work?  all terms are accounted.  no wrapping div/mul.  idk.\nprint((Riemanndef - tmp:switch()/4)()) -- this works, but looks ugly\n--]]\n-- ok how about another way using match?\n-- [[\n--print(Riemanndef[2]:match(Wildcard(7) + Tensor.Ref(h, Wildcard(1), Wildcard(2), Wildcard(3)) * Tensor.Ref(h, Wildcard(4), Wildcard(5), Wildcard(6))))\n--]]\n-- not easily.  what I need is a 'gmatch' iterator function ... or maybe iteradd() (after ignoring the 1/4 factor on the outside), and then match() and replace ...", output="", outputtype="html", uid=74},
	{hidden=false, input="-- hmm ... Riemanndef:replaceIndex(h'_ab,^c' * h'_ef,^g', 0) doesn't work...\nlocal function isdh(x)\n\9return Tensor.Ref:isa(x)\n\9and #x == 4\n\9and x[1] == h\n\9and x[4].derivative\nend \nRiemanndef = Riemanndef:map(function(x)\n\9if symmath.op.mul:isa(x) and #x == 2\n\9and isdh(x[1]) and isdh(x[2])\n\9then\n\9\9return 0\n\9end\nend)()\nprint(Riemanndef);", output="${{{{{ R} ^a} _b} _c} _d} = {{\\frac{1}{2}}{\\left({{{{{{ h} _b} _c} ^{,a}} _{,d}} + {{{{{ h} ^a} _b} _{,d}} _{,c}} + {{{{{ h} ^a} _d} _{,b}} _{,c}}{-{{{{{ h} ^a} _b} _{,c}} _{,d}}}{-{{{{{ h} _b} _d} ^{,a}} _{,c}}}{-{{{{{ h} ^a} _c} _{,b}} _{,d}}}}\\right)}}$<br>\n", outputtype="html", uid=55},
	{hidden=false, input="Riemanndef = Riemanndef\n\9:symmetrizeIndexes(h, {1,2}, true)\n\9:symmetrizeIndexes(h, {3,4}, true)\n\9:simplify()", output="${{{{{ R} ^a} _b} _c} _d} = {{\\frac{1}{2}}{\\left({{{{{{ h} _b} _c} ^{,a}} _{,d}} + {{{{{ h} ^a} _d} _{,b}} _{,c}}{-{{{{{ h} _b} _d} ^{,a}} _{,c}}}{-{{{{{ h} ^a} _c} _{,b}} _{,d}}}}\\right)}}$", outputtype="html", uid=60},
	{hidden=false, input="--[[\n-- do I need this for problem 35.3?\n-- or can I say R_abcd = RTT_abcd, and hTT_uv = hbarTT_uv, and therefore I can just find R_abcd based on a trace-reversed metric where h_ab is the given hbar_ab?\nRiemann_from_hbar = Riemanndef\n\9:splitOffDerivIndexes()\n\9:replaceIndex(h'^a_d', eta'^ae' * h'_ed')\n\9:reindex{e='f'}\9-- if you don't do this then both the previous replaceIndex() and next substIndex() will overlap sum terms ... \n\9:substIndex(hdef) -- TODO if I do the above replace with a sum-index of 'e' then this doesn't correctly relabel the sum index inside of hdef's rhs\n\9:simplify()\n\9:replace(eta'_bd,^a_c', 0)\n\9:replace(eta'^af_,bc', 0)\n\9:replace(eta'_bc,^a_d', 0)\n\9:replace(eta'_fc,bd', 0)\n\9:replace(eta'^af_,bd', 0)\n\9:replace(eta'_fd,bc', 0)()\n\9:simplifyMetrics() -- TODO make simplifyMetrics() work across comma derivatives for constant-metrics (similar to symmetrizeIndexes(force=true)) \n\9:replace(eta'^af' * hbar'_fd,bc', hbar'^a_d,bc')\n\9:replace(eta'^af' * hbar'_fc,bd', hbar'^a_c,bd')\n()\n--]]", output="", outputtype="html", uid=153},
	{hidden=false, input="Riccidef = Riemanndef:reindex{abcd='uaub'}:replace(R'^u_aub', R'_ab')", output="${{{ R} _a} _b} = {{\\frac{1}{2}}{\\left({{{{{{ h} _a} _u} ^{,u}} _{,b}} + {{{{{ h} ^u} _b} _{,a}} _{,u}}{-{{{{{ h} _a} _b} ^{,u}} _{,u}}}{-{{{{{ h} ^u} _u} _{,a}} _{,b}}}}\\right)}}$", outputtype="html", uid=57},
	{hidden=false, input="print(hgauge:reindex{uv='au'}'_,b'())\nprint(hgauge:reindex{uv='bu'}'_,a'())\nRiccidef = Riccidef\n\9:subst(hgauge:reindex{uv='au'}'_,b'())\n\9:replace(h'^u_b,au', h'_bu,^u_a')\n\9:subst(hgauge:reindex{uv='bu'}'_,a'())\n\9:replace(h'^u_u,ba', h'^u_u,ab')\n\9:simplify()\nprint(Riccidef);", output="${{{{{ h} _a} _u} ^{,u}} _{,b}} = {{\\frac{1}{2}} {{{{{ h} ^u} _u} _{,a}} _{,b}}}$<br>\n${{{{{ h} _b} _u} ^{,u}} _{,a}} = {{\\frac{1}{2}} {{{{{ h} ^u} _u} _{,b}} _{,a}}}$<br>\n${{{ R} _a} _b} = {-{{\\frac{1}{2}} {{{{{ h} _a} _b} ^{,u}} _{,u}}}}$<br>\n", outputtype="html", uid=59},
	{hidden=false, input="EinsteinDef = G'_ab':eq(R'_ab' - frac(1,2) * eta'_ab' * R'_uv' * eta'^uv')", output="${{{ G} _a} _b} = {{{{ R} _a} _b}{-{{{\\frac{1}{2}}} {{{{ \\eta} _a} _b}} {{{{ R} _u} _v}} {{{{ \\eta} ^u} ^v}}}}}$", outputtype="html", uid=61},
	{hidden=false, input="-- there has to be an easier way to apply this rule...\nlocal trhdef = h'^u_u':eq(h'_uv' * eta'^uv')\nlocal repl = hbardef:reindex{auv='uab'}',^c_c'\n\9:subst(trhdef, trhdef',^c_c'())\n\9:simplifyAddMulDiv()\n\9:replace(eta'^uv,c_c', 0)\n\9:replace(eta'_ab^,c_c', 0)\n\9:simplifyAddMulDiv()\nrepl = (repl * -2):simplifyAddMulDiv()\nprint(repl)\nEinsteinDef = EinsteinDef:substIndex(Riccidef)()\nEinsteinDef[2] = EinsteinDef[2] - repl[2]/4 + repl[1]/4\nEinsteinDef = EinsteinDef()\nprint(EinsteinDef)", output="${{{-2}} {{{{{{ \\bar{h}} _a} _b} ^{,c}} _{,c}}}} = {{{{-2}} {{{{{{ h} _a} _b} ^{,c}} _{,c}}}} + {{{{{ \\eta} _a} _b}} {{{{ \\eta} ^u} ^v}} {{{{{{ h} _u} _v} ^{,c}} _{,c}}}}}$<br>\n${{{ G} _a} _b} = {-{{\\frac{1}{2}} {{{{{ \\bar{h}} _a} _b} ^{,c}} _{,c}}}}$<br>\n", outputtype="html", uid=62},
	{hidden=false, input="EFEdef = G'_ab':eq(8 * pi * T'_ab')", output="${{{ G} _a} _b} = {{{8}} {{π}} \\cdot {{{{ T} _a} _b}}}$", outputtype="html", uid=63},
	{hidden=false, input="-- wave equation:\nEFEdef = EFEdef:subst(EinsteinDef):solve(hbar'_ab,^c_c')", output="${{{{{ \\bar{h}} _a} _b} ^{,c}} _{,c}} = {-{{{16}} {{π}} \\cdot {{{{ T} _a} _b}}}}$", outputtype="html", uid=65},
	{hidden=false, input="-- in vacuum\nvacuumEFEdef = EFEdef:replace(T'_ab', 0)()", output="${{{{{ \\bar{h}} _a} _b} ^{,c}} _{,c}} = {0}$", outputtype="html", uid=6},
	{hidden=false, input="-- infintesimal coordinate transformation condition\nxidef = xi'_u,a^a':eq(0)", output="${{{{ \\xi} _u} _{,a}} ^{,a}} = {0}$", outputtype="html", uid=8},
	{hidden=false, input="-- coordinate change:\nx_new'^u':eq(x_old'^u' + xi'^u')", output="${{ {x_{new}}} ^u} = {{{ {x_{old}}} ^u} + {{ \\xi} ^u}}$", outputtype="html", uid=9},
	{hidden=false, input="hbarnew = var'\\\\bar{h}_{new}'", output="${\\bar{h}_{{new}}}$", outputtype="html", uid=82},
	{hidden=false, input="hbarold = var'\\\\bar{h}_{old}'", output="${\\bar{h}_{{old}}}$", outputtype="html", uid=83},
	{hidden=false, input="-- metric gauge change:\nhgaugechangedef = hbarnew'_uv':eq(hbarold'_uv' - xi'_u,v' - xi'_v,u' + eta'_uv' * xi'^a_,a')", output="${{{ {\\bar{h}_{{new}}}} _u} _v} = {{{{{ {\\bar{h}_{{old}}}} _u} _v}{-{{{ \\xi} _u} _{,v}}}}{-{{{ \\xi} _v} _{,u}}} + {{{{{ \\eta} _u} _v}} {{{{ \\xi} ^a} _{,a}}}}}$", outputtype="html", uid=10},
	{hidden=false, input="-- section 3", output="", outputtype="html", uid=11},
	{hidden=false, input="-- monochromatic plane wave\nmwavedef = hbar'_uv':eq(A'_uv' * cos(k'_a' * x'^a'))", output="${{{ \\bar{h}} _u} _v} = {{{{{ A} _u} _v}} {{\\cos\\left( {{{{ k} _a}} {{{ x} ^a}}}\\right)}}}$", outputtype="html", uid=15},
	{hidden=false, input="-- honestly the above def was Re(...), but I don't have a Re() function (and my complex support is kind of bad)\n-- so here's the complex version:\nmwavecplxdef = hbar'_uv':eq(A'_uv' * exp(i * k'_a' * x'^a'))", output="${{{ \\bar{h}} _u} _v} = {{{{{ A} _u} _v}} {{\\exp\\left({{{i}} {{{ k} _a}} {{{ x} ^a}}}\\right)}}}$", outputtype="html", uid=77},
	{hidden=false, input="knulldef = (k'_a' * k'^a'):eq(0)", output="${{{{ k} _a}} {{{ k} ^a}}} = {0}$", outputtype="html", uid=16},
	{hidden=false, input="kUdef = k'^a':eq(eta'^ab' * k'_b')", output="${{ k} ^a} = {{{{{ \\eta} ^a} ^b}} {{{ k} _b}}}$", outputtype="html", uid=33},
	{hidden=false, input="-- deriv k_t's def based on the index form of eta_uv ... \nprint(knulldef)\nprint(kUdef)\nlocal tmp = knulldef:subst(kUdef)\nprint(tmp)\n-- NOTICE if you change the background metric then you have to also change this ...\ntmp = (tmp[1]:reindex{ab='tt'} + tmp[1]:reindex{ab='ij'}):eq(tmp[2])\nprint(tmp)\ntmp = tmp\n\9:replace(eta'^tt', -1)\n\9:replace(eta'^ij' * k'_j', k'_i')\n\9()\nprint(tmp)\n-- solve() doesn't consider implicit sums ...\n--tmp = tmp:solve(k'_t')\n-- how about using my infamous Sum() object ... since it does nothing else at the moment ...\nktsumdef = tmp:replace(k'_i'^2, Sum(k'_i'^2, i))\nprint(ktsumdef)\nktsumdef = ktsumdef:solve(k'_t')\n-- and viola, we have our sqrt and our sqr separate\nprint(ktsumdef)\n-- but for now Sum is very rigid, so I think I'll just keep it solved for k_t^2 ... \n-- solve() isn't this clever.  i think it could if k'_t'^2 was replace()'d with a variable, and then the Variable was solved for ... \n--local ktsqdef = tmp:solve((k'_t'^2)())\n-- but instead I'll just do it by hand ...\nktsqdef = (tmp + k'_t'^2)():switch()\nprint(ktsqdef)\n;", output="${{{{ k} _a}} {{{ k} ^a}}} = {0}$<br>\n${{ k} ^a} = {{{{{ \\eta} ^a} ^b}} {{{ k} _b}}}$<br>\n${{{{ k} _a}} {{{{{{ \\eta} ^a} ^b}} {{{ k} _b}}}}} = {0}$<br>\n${{{{{ k} _t}} {{{{{{ \\eta} ^t} ^t}} {{{ k} _t}}}}} + {{{{ k} _i}} {{{{{{ \\eta} ^i} ^j}} {{{ k} _j}}}}}} = {0}$<br>\n${{{{ k} _i}^{2}}{-{{{ k} _t}^{2}}}} = {0}$<br>\n${{-{{{ k} _t}^{2}}} + {\\left({\\sum_  i {{{ k} _i}^{2}}}\\right)}} = {0}$<br>\n${{ k} _t} = {\\sqrt{\\sum_  i {{{ k} _i}^{2}}}}$<br>\n${{{ k} _t}^{2}} = {{{ k} _i}^{2}}$<br>\n", outputtype="html", uid=131},
	{hidden=false, input="-- TODO how about an 'expand sum' function, and then pass it a set to sum across?\nktLdef = ktsumdef:replace(Sum(k'_i'^2, i), k'_x'^2 + k'_y'^2 + k'_z'^2)()", output="${{ k} _t} = {\\sqrt{{{{ k} _x}^{2}} + {{{ k} _y}^{2}} + {{{ k} _z}^{2}}}}$", outputtype="html", uid=134},
	{hidden=false, input="Adotkeq0 = (A'_uv' * k'^v'):eq(0)", output="${{{{{ A} _u} _v}} {{{ k} ^v}}} = {0}$", outputtype="html", uid=17},
	{hidden=false, input="-- this is eqn 35.5, but it is in upper k^t = |k| ... \n-- I just solved above for lower form: k_t = |t|\n-- This is Minkowski metric, where k^t = -k_t, so why is both k_t and k^t the same value (and not negatives of one another?)\n-- because both are instead both values.\n-- from the k_t^2 def we know k_t = +- |k|.  therefore k^t = -+ |k|.\n-- so I'm just going to show the lower def here, since that's all I'm using.\nomega:eq(ktsumdef)", output="${\\omega} = {{{ k} _t} = {\\sqrt{\\sum_  i {{{ k} _i}^{2}}}}}$", outputtype="html", uid=18},
	{hidden=false, input="-- plane-wave vector:\nmvecdef = xi'^u':eq(-i * C'^u' * exp(i * k'_a' * x'^a'))", output="${{ \\xi} ^u} = { {-{i}} {{{ C} ^u}} {{\\exp\\left({{{i}} {{{ k} _a}} {{{ x} ^a}}}\\right)}}}$", outputtype="html", uid=19},
	{hidden=false, input="-- section 4", output="", outputtype="html", uid=25},
	{hidden=false, input="-- where did u^a come into play in exercise 1, if at all?\nAnulldef = (A'_uv' * u'^v'):eq(0)", output="${{{{{ A} _u} _v}} {{{ u} ^v}}} = {0}$", outputtype="html", uid=20},
	{hidden=false, input="-- here's another one I never used, though maybe I should have ...\ntrAeq0 = (A'_uv' * eta'^uv'):eq(0)\nprint(trAeq0)\ntrAeq0 = trAeq0:simplifyMetrics()\nprint(trAeq0)\n;", output="${{{{{ A} _u} _v}} {{{{ \\eta} ^u} ^v}}} = {0}$<br>\n${{{ A} ^v} _v} = {0}$<br>\n", outputtype="html", uid=21},
	{hidden=false, input="-- in Minkowski, trace identity for arbitrary degree-2 tensors ...\n-- TODO here, instead separate indexes ..\ntrTdef = T'^a_a':eq(eta'^ab' * T'_ab')\nprint(trTdef)\ntrTdef[2] = trTdef[2]:reindex{ab='tt'} + 2 * trTdef[2]:reindex{ab='ti'} + trTdef[2]:reindex{ab='ij'}\nprint(trTdef)\n-- and here replace the nonzero elements of eta^ab with their values ..\ntrTdef = trTdef\n\9:replace(eta'^tt', -1)\n\9:replace(eta'^ti', 0)\n\9:replace(eta'^ij' * T'_ij', T'_kk')() -- abuse my sum indexes ...\nprint(trTdef)", output="${{{ T} ^a} _a} = {{{{{ \\eta} ^a} ^b}} {{{{ T} _a} _b}}}$<br>\n${{{ T} ^a} _a} = {{{{{{ \\eta} ^t} ^t}} {{{{ T} _t} _t}}} + {{{2}} {{{{ \\eta} ^t} ^i}} {{{{ T} _t} _i}}} + {{{{{ \\eta} ^i} ^j}} {{{{ T} _i} _j}}}}$<br>\n${{{ T} ^a} _a} = {{{{ T} _k} _k}{-{{{ T} _t} _t}}}$<br>\n${{{ T} ^a} _a} = {{{{ T} _k} _k}{-{{{ T} _t} _t}}}$", outputtype="html", uid=149},
	{hidden=false, input="local tmp = trAeq0\nprint(tmp)\nAttdef = tmp:subst(trTdef:replace(T, A):reindex{a='v'})\nprint(Attdef)\nAttdef = Attdef:solve(A'_tt')\n-- here's another where implicit-sum goes on in the rhs, \n-- but with nothing acting on the summed indexes, so I'll leave it as it\nprint(Attdef)\n;", output="${{{ A} ^v} _v} = {0}$<br>\n${{{{ A} _k} _k}{-{{{ A} _t} _t}}} = {0}$<br>\n${{{ A} _t} _t} = {{{ A} _k} _k}$<br>\n", outputtype="html", uid=135},
	{hidden=false, input="-- hbarTT constraints\n-- TODO use hbarTT instead of hbar (or hbarnew)?", output="", outputtype="html", uid=142},
	{hidden=false, input="hbarTT = var'{\\\\bar{h}^{TT}}'", output="${{\\bar{h}^{{TT}}}}$", outputtype="html", uid=146},
	{hidden=false, input="hTT = var'{h^{TT}}'", output="${{h^{{TT}}}}$", outputtype="html", uid=147},
	{hidden=false, input="-- don't forget (shown later) hTT_uv = ħTT_uv\nhTTtteq0 = hTT'_tt':eq(0)", output="${{{ {{h^{{TT}}}}} _t} _t} = {0}$", outputtype="html", uid=148},
	{hidden=false, input="hTTtieq0 = hTT'_ti':eq(0)", output="${{{ {{h^{{TT}}}}} _t} _i} = {0}$", outputtype="html", uid=141},
	{hidden=false, input="-- implicit sum.  I could use summed indexes if they are implicitly only spanning spatial indexes, and not time as well ...\nhTTkkeq0 = hTT'_kk':eq(0)", output="${{{ {{h^{{TT}}}}} _k} _k} = {0}$", outputtype="html", uid=144},
	{hidden=false, input="-- therefore, in TT gauge, we get ...\nprint(hTTtteq0)\nprint(hTTkkeq0)\nlocal tmp = (-hTTtteq0 + hTTkkeq0)()\nprint('therefore', tmp)\nlocal using = trTdef:replace(T, hTT):reindex{a='u'}\nprint('using', using)\ntmp = tmp:subst(using:switch())\nprint('therefore', tmp)\nlocal using = (-trhbardef:reindex{a='u'})():switch()\nprint('using', using)\nusing = using:replace(h, hTT):replace(hbar, hbarTT)\nprint('so', using)\ntmp = (-tmp:subst(using))()\nprint('therefore', tmp)\nprint('and', hbardef)\nprint('therefore', hbarTT'_uv':eq(hTT'_uv'))", output="${{{ {{h^{{TT}}}}} _t} _t} = {0}$<br>\n${{{ {{h^{{TT}}}}} _k} _k} = {0}$<br>\ntherefore\9${{{{ {{h^{{TT}}}}} _k} _k}{-{{{ {{h^{{TT}}}}} _t} _t}}} = {0}$<br>\nusing\9${{{ {{h^{{TT}}}}} ^u} _u} = {{{{ {{h^{{TT}}}}} _k} _k}{-{{{ {{h^{{TT}}}}} _t} _t}}}$<br>\ntherefore\9${{{ {{h^{{TT}}}}} ^u} _u} = {0}$<br>\nusing\9${{{ h} ^u} _u} = {-{{{ \\bar{h}} ^u} _u}}$<br>\nso\9${{{ {{h^{{TT}}}}} ^u} _u} = {-{{{ {{\\bar{h}^{{TT}}}}} ^u} _u}}$<br>\ntherefore\9${{{ {{\\bar{h}^{{TT}}}}} ^u} _u} = {0}$<br>\nand\9${{{ \\bar{h}} _u} _v} = {{{{ h} _u} _v}{-{{{\\frac{1}{2}}} {{{{ \\eta} _u} _v}} {{{{ h} ^a} _a}}}}}$<br>\ntherefore\9${{{ {{\\bar{h}^{{TT}}}}} _u} _v} = {{{ {{h^{{TT}}}}} _u} _v}$<br>\n", outputtype="html", uid=145},
	{hidden=false, input="RTT = var'R^{TT}'", output="${R^{{TT}}}$", outputtype="html", uid=180},
	{hidden=false, input="-- eqn 35.10\nRiemannTT00def = Riemanndef\n\9:replace(R, RTT)\n\9:replace(h, hTT)\n\9:reindex{abcd='jtkt'}\n\9:splitOffDerivIndexes()\n\9:subst(hTTtieq0:reindex{i='k'})\n\9:subst(hTTtteq0)\n\9:subst(hTT'^j_t':eq(0)) -- this one is from hTT_ti=0, but flip indexes and raise i to j\n\9:simplify()\nprint(RiemannTT00def)\nRiemannTT00def = (RiemannTT00def * eta'_ij')():simplifyMetrics() -- TODO I need some kind of 'metricIsConstant' flag ...\nprint(RiemannTT00def)\nRiemannTT00def = RiemannTT00def:replace(eta'_ij' * hTT'^j_k,tt', hTT'_ik,tt')() -- until then ... stuck with this ...\nRiemannTT00def = RiemannTT00def:reindex{i='j'}\nprint(RiemannTT00def)\9-- eqn 35.10\n;", output="${{{{{ {R^{{TT}}}} ^j} _t} _k} _t} = {-{{\\frac{1}{2}} {{{{{ {{h^{{TT}}}}} ^j} _k} _{,t}} _{,t}}}}$<br>\n${{{{{ {R^{{TT}}}} _i} _t} _k} _t} = {{{-1}} \\cdot {{\\frac{1}{2}}} {{{{ \\eta} _i} _j}} {{{{{{ {{h^{{TT}}}}} ^j} _k} _{,t}} _{,t}}}}$<br>\n${{{{{ {R^{{TT}}}} _j} _t} _k} _t} = {-{{\\frac{1}{2}} {{{{{ {{h^{{TT}}}}} _j} _k} _{,t}} _{,t}}}}$<br>\n", outputtype="html", uid=140},
	{hidden=false, input="-- exercise 35.1 ... use u^0 = 1, u^i = 0, place in TT gauge, change hBar_uv to satisfy TT constraints, solve for C^u\n-- I don't see where I need to use u^0=1, u^i=0 ...", output="", outputtype="html", uid=22},
	{hidden=false, input="--[[\nwell, that's the result, so how do we get there?\nwe need to change our basis so that u^a = {1,0,0,0}\nour change-of-basis mechanism is x_new^u = x_old^u + xi^u\nand we want x_new^u to be [t,x,y,z] such that d/dt x_new^u = [1,0,0,0]\nwhich means xi^u = x_new^u - x_old^u = [t,x,y,z] - x_old^u\n\nand then we transform our de donder linearized weak limit gauge to one such that ...\nh_00 = h_0i = h_i0 = 0\nsum_k h_kk = 0\nsum_j h_kj,j = 0\nby h_00 = h_kk = 0 we get h^a_h = 0, and therefor h_ab = hbar_ab\n\nfrom there we impose 6 wave equations: h_jk,a^a = 0\nfrom there, we decompose any spatial tensor S^TT_ij = S^T_ij + S^L_ij\nwhere S^T_ij = 1/2 (δ_ij f_,kk - f_,ij) \"transverse\"\nand S^L_ij = 2 S^L_(i,j) \"longitudinal\" ... S^L_i is purely gauge\nso h^T_ij, h^TT_ij are gauge-invariant, and h^L_ij is purely gauge part\nand then somehow we get h_uv = h^TT_uv\n--]]", output="", outputtype="html", uid=42},
	{hidden=false, input="-- so now for problem 35.1, use these to create a TT metric (I think?  problem is worded vaguely)\nmwavecplxdef, ',', mvecdef, ',', hgaugechangedef", output="${{{ \\bar{h}} _u} _v} = {{{{{ A} _u} _v}} {{\\exp\\left({{{i}} {{{ k} _a}} {{{ x} ^a}}}\\right)}}}$\9,\9${{ \\xi} ^u} = { {-{i}} {{{ C} ^u}} {{\\exp\\left({{{i}} {{{ k} _a}} {{{ x} ^a}}}\\right)}}}$\9,\9${{{ {\\bar{h}_{{new}}}} _u} _v} = {{{{{ {\\bar{h}_{{old}}}} _u} _v}{-{{{ \\xi} _u} _{,v}}}}{-{{{ \\xi} _v} _{,u}}} + {{{{{ \\eta} _u} _v}} {{{{ \\xi} ^a} _{,a}}}}}$", outputtype="html", uid=75},
	{hidden=false, input="-- don't do exp(i theta) => cos(theta) + i sin(theta)\nsymmath.op.pow:pushRule'Prune/expToTheI'", output="", outputtype="html", uid=80},
	{hidden=false, input="mvecLdef = (mvecdef * eta'_uv'):simplifyMetrics():reindex{v='u'}()", output="${{ \\xi} _u} = {-{{{i}} {{{ C} _u}} {{\\exp\\left({{{i}} {{{ k} _a}} {{{ x} ^a}}}\\right)}}}}$", outputtype="html", uid=79},
	{hidden=false, input="delta = Tensor:deltaSymbol()", output="$δ$", outputtype="html", uid=81},
	{hidden=false, input="hbarTTgaugedef = hgaugechangedef\n\9:replace(hbarnew, hbarTT)\n\9:replace(hbarold, hbar)\n\9:replace(xi'^a_,a', xi'_a^,a')\n\9:splitOffDerivIndexes()\n\9:substIndex(mvecLdef)()\n\9--:replaceIndex(C'_u,v', 0)\n\9:replace(C'_u,v', 0)\n\9:replace(C'_v,u', 0)\n\9:replace(C'_a^,a', 0)()\n\9:replaceIndex(x'^b_,v', delta'^b_v')\n\9:replace(x'^b,a', eta'^ba') -- x^b,a = x^b_,c eta^ca = delta^b_c eta^ca = eta^ba\n\9:simplifyMetrics()\n\9-- is k_u constant?  it's the wave vector, so ... I guess so ?\n\9:replace(k'_b,u', 0)\n\9:replace(k'_b,v', 0)\n\9:replace(k'_b^,a', 0)()", output="${{{ {{\\bar{h}^{{TT}}}}} _u} _v} = {{{{ \\bar{h}} _u} _v}{-{{{{ C} _v}} {{{ k} _u}} {{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}}}}{-{{{{ C} _u}} {{{ k} _v}} {{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}}}} + {{{{ C} _a}} {{{ k} ^a}} {{{{ \\eta} _u} _v}} {{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}}}}$", outputtype="html", uid=76},
	{hidden=false, input="-- now use hbarolduv for our mwavecplxdef ...\nhbarTTgaugedef = hbarTTgaugedef\n\9:subst(mwavecplxdef:reindex{a='b'})()", output="${{{ {{\\bar{h}^{{TT}}}}} _u} _v} = {{{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}} {{\\left({{{{ A} _u} _v}{-{{{{ C} _v}} {{{ k} _u}}}}{-{{{{ C} _u}} {{{ k} _v}}}} + {{{{ C} _a}} {{{ k} ^a}} {{{{ \\eta} _u} _v}}}}\\right)}}}$", outputtype="html", uid=85},
	{hidden=false, input="-- so somehow hbarnew needs to be TT, which means hbarnew_0u = 0, hbarnew_kk = 0, hbarnew_kj,j = 0 ...\n-- we are solving for C_u ... but k_u still must be arbitrary ...", output="", outputtype="html", uid=96},
	{hidden=false, input="-- so first try solving with indexes ...\nlocal tmp = hbarTTgaugedef\nprint(tmp)\ntmp = hbarTTgaugedef:reindex{uv='ti'}\nprint(tmp)\nlocal using = hTTtieq0:replace(hTT, hbarTT)\nprint('using', using)\nhbar_0i_def = tmp:subst(using)\nprint(hbar_0i_def)\nhbar_0i_def = hbar_0i_def:replace(eta'_ti', 0)\nCidef = hbar_0i_def:solve(C'_i')\nprint(Cidef)\n;", output="${{{ {{\\bar{h}^{{TT}}}}} _u} _v} = {{{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}} {{\\left({{{{ A} _u} _v}{-{{{{ C} _v}} {{{ k} _u}}}}{-{{{{ C} _u}} {{{ k} _v}}}} + {{{{ C} _a}} {{{ k} ^a}} {{{{ \\eta} _u} _v}}}}\\right)}}}$<br>\n${{{ {{\\bar{h}^{{TT}}}}} _t} _i} = {{{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}} {{\\left({{{{ A} _t} _i}{-{{{{ C} _i}} {{{ k} _t}}}}{-{{{{ C} _t}} {{{ k} _i}}}} + {{{{ C} _a}} {{{ k} ^a}} {{{{ \\eta} _t} _i}}}}\\right)}}}$<br>\nusing\9${{{ {{\\bar{h}^{{TT}}}}} _t} _i} = {0}$<br>\n${0} = {{{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}} {{\\left({{{{ A} _t} _i}{-{{{{ C} _i}} {{{ k} _t}}}}{-{{{{ C} _t}} {{{ k} _i}}}} + {{{{ C} _a}} {{{ k} ^a}} {{{{ \\eta} _t} _i}}}}\\right)}}}$<br>\n${{ C} _i} = {\\frac{{{{ A} _t} _i}{-{{{{ C} _t}} {{{ k} _i}}}}}{{ k} _t}}$<br>\n", outputtype="html", uid=129},
	{hidden=false, input="-- can we do the same thing with hbarnew'_tt'? no ...\nlocal tmp = hbarTTgaugedef\nprint(tmp)\ntmp = tmp:reindex{uv='tt'}\nprint(tmp)\nlocal using = hTTtteq0:replace(hTT, hbarTT)\nprint('using', using)\ntmp = tmp:subst(using)\nprint(tmp)\ntmp = tmp:replace(eta'_tt', -1)()\ntmp = (tmp / exp(i * k'_b' * x'^b'))()\ntmp = tmp:replace(C'_a' * k'^a', -C'_t' * k'_t' + C'_i' * k'_i')()\nprint(tmp)\n-- if I solve for C_t early then we can deduce a value ... though it is still based on C_i ...\n--print(tmp:solve(C'_t'))\n-- but as soon as we substitute our previous C_i def, the C_t def falls apart ...\ntmp = tmp:subst(Cidef)()\nprint(tmp)\ntmp = tmp:subst(ktsqdef)()\nprint(tmp)\n-- and now we're at A_tu k^u / k_t = 0 ... but A_tu k^u = 0 ... so this is just 0/k_t = 0, which is a given.\ntmp = tmp:replace((k'_t' * A'_tt' - k'_i' * A'_ti')(), A'_tu' * k'^u')\nprint(tmp)\nprint('using', Adotkeq0)\ntmp = tmp:subst(Adotkeq0:reindex{uv='tu'})\nprint(tmp)\ntmp = tmp()\nprint(tmp)\n-- ... nope, we don't learn anything new.", output="${{{ {{\\bar{h}^{{TT}}}}} _u} _v} = {{{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}} {{\\left({{{{ A} _u} _v}{-{{{{ C} _v}} {{{ k} _u}}}}{-{{{{ C} _u}} {{{ k} _v}}}} + {{{{ C} _a}} {{{ k} ^a}} {{{{ \\eta} _u} _v}}}}\\right)}}}$<br>\n${{{ {{\\bar{h}^{{TT}}}}} _t} _t} = {{{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}} {{\\left({{{{ A} _t} _t}{-{{{{ C} _t}} {{{ k} _t}}}}{-{{{{ C} _t}} {{{ k} _t}}}} + {{{{ C} _a}} {{{ k} ^a}} {{{{ \\eta} _t} _t}}}}\\right)}}}$<br>\nusing\9${{{ {{\\bar{h}^{{TT}}}}} _t} _t} = {0}$<br>\n${0} = {{{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}} {{\\left({{{{ A} _t} _t}{-{{{{ C} _t}} {{{ k} _t}}}}{-{{{{ C} _t}} {{{ k} _t}}}} + {{{{ C} _a}} {{{ k} ^a}} {{{{ \\eta} _t} _t}}}}\\right)}}}$<br>\n${0} = {{{{ A} _t} _t}{-{{{{ C} _t}} {{{ k} _t}}}}{-{{{{ C} _i}} {{{ k} _i}}}}}$<br>\n${0} = {\\frac{{{{{ C} _t}} {{{{ k} _i}^{2}}}} + {{{{ k} _t}} {{{{ A} _t} _t}}}{-{{{{ C} _t}} {{{{ k} _t}^{2}}}}}{-{{{{ k} _i}} {{{{ A} _t} _i}}}}}{{ k} _t}}$<br>\n${0} = {\\frac{{{{{ k} _t}} {{{{ A} _t} _t}}}{-{{{{ k} _i}} {{{{ A} _t} _i}}}}}{{ k} _t}}$<br>\n${0} = {\\frac{{{{{ A} _t} _u}} {{{ k} ^u}}}{{ k} _t}}$<br>\nusing\9${{{{{ A} _u} _v}} {{{ k} ^v}}} = {0}$<br>\n${0} = {\\frac{0}{{ k} _t}}$<br>\n${0} = {0}$<br>\n", outputtype="html", uid=130},
	{hidden=false, input="-- going to use this ...\nprint(Adotkeq0)\nAtdotkeq0 = (-A'_tt' * k'_t' + A'_tk' * k'_k'):eq(0)\nprint(Atdotkeq0)\nAttktdef = (Atdotkeq0 + A'_tt' * k'_t')()\nprint(Attktdef)\n;", output="${{{{{ A} _u} _v}} {{{ k} ^v}}} = {0}$<br>\n${{ {-{{{ A} _t} _t}} {{{ k} _t}}} + {{{{{ A} _t} _k}} {{{ k} _k}}}} = {0}$<br>\n${{{{ k} _k}} {{{{ A} _t} _k}}} = {{{{ k} _t}} {{{{ A} _t} _t}}}$<br>\n", outputtype="html", uid=137},
	{hidden=false, input="print(Adotkeq0)\nAidotkeq0 = (-A'_ti' * k'_t' + A'_ij' * k'_j'):eq(0)\nprint(Aidotkeq0)\n;", output="${{{{{ A} _u} _v}} {{{ k} ^v}}} = {0}$<br>\n${{ {-{{{ A} _t} _i}} {{{ k} _t}}} + {{{{{ A} _i} _j}} {{{ k} _j}}}} = {0}$<br>\n", outputtype="html", uid=139},
	{hidden=false, input="-- so now we have to use the hbarnew_kk=0 constraint to solve for C_t ... \nprint(hbarTTgaugedef)\nlocal using = hTTkkeq0:replace(hTT, hbarTT)\nprint('using', using)\nlocal tmp = hbarTTgaugedef:reindex{uv='kk'}:subst(using)\nprint(tmp)\ntmp = (tmp / exp(i * k'_b' * x'^b'))()\nprint(tmp)\ntmp = tmp:replace(eta'_kk', 3)()\nprint(tmp)\ntmp = tmp:replace(C'_a' * k'^a', -C'_t' * k'_t' + C'_k' * k'_k')()\nprint(tmp)\ntmp = tmp:subst(Cidef:reindex{i='k'})()\nprint(tmp)\ntmp = tmp:solve(C'_t')()\nprint(tmp)\nprint('using', ktsqdef)\ntmp = tmp:subst(ktsqdef:reindex{i='k'}:switch())()\nprint(tmp)\nprint('using', Attktdef)\nCtdef = tmp:subst(Attktdef)()\nprint(Ctdef)\nprint('using', Attdef:switch())\nCtdef = Ctdef:subst(Attdef:switch())()\nprint(Ctdef)", output="${{{ {{\\bar{h}^{{TT}}}}} _u} _v} = {{{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}} {{\\left({{{{ A} _u} _v}{-{{{{ C} _v}} {{{ k} _u}}}}{-{{{{ C} _u}} {{{ k} _v}}}} + {{{{ C} _a}} {{{ k} ^a}} {{{{ \\eta} _u} _v}}}}\\right)}}}$<br>\nusing\9${{{ {{\\bar{h}^{{TT}}}}} _k} _k} = {0}$<br>\n${0} = {{{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}} {{\\left({{{{ A} _k} _k}{-{{{{ C} _k}} {{{ k} _k}}}}{-{{{{ C} _k}} {{{ k} _k}}}} + {{{{ C} _a}} {{{ k} ^a}} {{{{ \\eta} _k} _k}}}}\\right)}}}$<br>\n${0} = {{{{ A} _k} _k} + {{{{ C} _a}} {{{ k} ^a}} {{{{ \\eta} _k} _k}}}{-{{{2}} {{{ C} _k}} {{{ k} _k}}}}}$<br>\n${0} = {{{{ A} _k} _k} + {{{3}} {{{ C} _a}} {{{ k} ^a}}}{-{{{2}} {{{ C} _k}} {{{ k} _k}}}}}$<br>\n${0} = {{{{ A} _k} _k} + {{{{ C} _k}} {{{ k} _k}}}{-{{{3}} {{{ C} _t}} {{{ k} _t}}}}}$<br>\n${0} = {\\frac{{{{{ k} _t}} {{{{ A} _k} _k}}} + {{{{ k} _k}} {{{{ A} _t} _k}}}{-{{{{ C} _t}} {{{{ k} _k}^{2}}}}}{-{{{3}} {{{ C} _t}} {{{{ k} _t}^{2}}}}}}{{ k} _t}}$<br>\n${{ C} _t} = {\\frac{{{{{ k} _t}} {{{{ A} _k} _k}}} + {{{{ k} _k}} {{{{ A} _t} _k}}}}{{{{ k} _k}^{2}} + {{{3}} {{{{ k} _t}^{2}}}}}}$<br>\nusing\9${{{ k} _t}^{2}} = {{{ k} _i}^{2}}$<br>\n${{ C} _t} = {\\frac{{{{{ k} _t}} {{{{ A} _k} _k}}} + {{{{ k} _k}} {{{{ A} _t} _k}}}}{{{4}} {{{{ k} _t}^{2}}}}}$<br>\nusing\9${{{{ k} _k}} {{{{ A} _t} _k}}} = {{{{ k} _t}} {{{{ A} _t} _t}}}$<br>\n${{ C} _t} = {\\frac{{{{ A} _k} _k} + {{{ A} _t} _t}}{{{4}} {{{ k} _t}}}}$<br>\nusing\9${{{ A} _k} _k} = {{{ A} _t} _t}$<br>\n${{ C} _t} = {\\frac{{{ A} _t} _t}{{{2}} {{{ k} _t}}}}$<br>\n", outputtype="html", uid=132},
	{hidden=false, input="-- now using C_i's def wrt C_t we have a def of C_t without C_i, lets substitute it back to get a simpler def of C_i ...\nlocal tmp = Cidef\nprint(tmp)\ntmp = tmp:subst(Ctdef)()\nprint(tmp)\n--[[ don't reindex to 'i', since 'i' is already a fixed symbol in the eqn, not a summed symbol ...\nprint('using', Attdef:reindex{k='i'})\ntmp = tmp:subst(Attdef:reindex{k='i'})\nprint(tmp)\n--]]\n-- maybe this is as simple as it gets?\nprint('using', Ctdef)\ntmp = tmp:subst(Ctdef:solve(A'_tt'))()\nprint(tmp)\n-- I guess this is a bit simpler", output="${{ C} _i} = {\\frac{{{{ A} _t} _i}{-{{{{ C} _t}} {{{ k} _i}}}}}{{ k} _t}}$<br>\n${{ C} _i} = {\\frac{{{{2}} {{{ k} _t}} {{{{ A} _t} _i}}}{-{{{{ k} _i}} {{{{ A} _t} _t}}}}}{{{2}} {{{{ k} _t}^{2}}}}}$<br>\nusing\9${{ C} _t} = {\\frac{{{ A} _t} _t}{{{2}} {{{ k} _t}}}}$<br>\n${{ C} _i} = {\\frac{{{{ A} _t} _i}{-{{{{ C} _t}} {{{ k} _i}}}}}{{ k} _t}}$<br>\n", outputtype="html", uid=136},
	{hidden=false, input="-- temp deferred\nthetadef = theta:eq(k'_b' * x'^b')", output="${\\theta} = {{{{ k} _b}} {{{ x} ^b}}}$", outputtype="html", uid=103},
	{hidden=false, input="theta:setDependentVars(chart.coords:unpack())", output="", outputtype="html", uid=113},
	{hidden=false, input="hbarTTgaugedef", output="${{{ {{\\bar{h}^{{TT}}}}} _u} _v} = {{{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}} {{\\left({{{{ A} _u} _v}{-{{{{ C} _v}} {{{ k} _u}}}}{-{{{{ C} _u}} {{{ k} _v}}}} + {{{{ C} _a}} {{{ k} ^a}} {{{{ \\eta} _u} _v}}}}\\right)}}}$", outputtype="html", uid=119},
	{hidden=false, input="-- I think this is easier to do in index form ...\nhbarTTspatialgraddef = hbarTTgaugedef\n\9:subst(thetadef:switch())\n\9:reindex{uv='ij'}'_,j'()", output="${{{{ {{\\bar{h}^{{TT}}}}} _i} _j} _{,j}} = {{{\\exp\\left({{{i}} {{\\theta}}}\\right)}} {{\\left({{{{{ A} _i} _j} _{,j}}{-{{{{ C} _i}} {{{{ k} _j} _{,j}}}}}{-{{{{ C} _j}} {{{{ k} _i} _{,j}}}}}{-{{{{ k} _j}} {{{{ C} _i} _{,j}}}}}{-{{{{ k} _i}} {{{{ C} _j} _{,j}}}}} + {{{i}} {{{ \\theta} _{,j}}} {{{{ A} _i} _j}}} + {{{{ C} _a}} {{{ k} ^a}} {{{{{ \\eta} _i} _j} _{,j}}}} + {{{{ C} _a}} {{{{ \\eta} _i} _j}} {{{{ k} ^a} _{,j}}}} + {{{{ k} ^a}} {{{{ C} _a} _{,j}}} {{{{ \\eta} _i} _j}}}{-{{{i}} {{{ C} _j}} {{{ k} _i}} {{{ \\theta} _{,j}}}}}{-{{{i}} {{{ C} _i}} {{{ k} _j}} {{{ \\theta} _{,j}}}}} + {{{i}} {{{ C} _a}} {{{ k} ^a}} {{{ \\theta} _{,j}}} {{{{ \\eta} _i} _j}}}}\\right)}}}$", outputtype="html", uid=112},
	{hidden=false, input="hbarTTspatialgraddef = hbarTTspatialgraddef\n\9:subst(thetadef)()", output="${{{{ {{\\bar{h}^{{TT}}}}} _i} _j} _{,j}} = {{{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}} {{\\left({{{{{ A} _i} _j} _{,j}}{-{{{{ C} _j}} {{{{ k} _i} _{,j}}}}}{-{{{{ C} _i}} {{{{ k} _j} _{,j}}}}}{-{{{{ k} _i}} {{{{ C} _j} _{,j}}}}}{-{{{{ k} _j}} {{{{ C} _i} _{,j}}}}} + {{{{ C} _a}} {{{ k} ^a}} {{{{{ \\eta} _i} _j} _{,j}}}} + {{{{ C} _a}} {{{{ \\eta} _i} _j}} {{{{ k} ^a} _{,j}}}} + {{{{ k} ^a}} {{{{ C} _a} _{,j}}} {{{{ \\eta} _i} _j}}} + {{{i}} {{{ k} _b}} {{{{ A} _i} _j}} {{{{ x} ^b} _{,j}}}} + {{{i}} {{{ x} ^b}} {{{{ A} _i} _j}} {{{{ k} _b} _{,j}}}}{-{{{i}} {{{ C} _j}} {{{ k} _b}} {{{ k} _i}} {{{{ x} ^b} _{,j}}}}}{-{{{i}} {{{ C} _j}} {{{ k} _i}} {{{ x} ^b}} {{{{ k} _b} _{,j}}}}}{-{{{i}} {{{ C} _i}} {{{ k} _j}} {{{ x} ^b}} {{{{ k} _b} _{,j}}}}}{-{{{i}} {{{ C} _i}} {{{ k} _b}} {{{ k} _j}} {{{{ x} ^b} _{,j}}}}} + {{{i}} {{{ C} _a}} {{{ k} ^a}} {{{ k} _b}} {{{{ \\eta} _i} _j}} {{{{ x} ^b} _{,j}}}} + {{{i}} {{{ C} _a}} {{{ k} ^a}} {{{ x} ^b}} {{{{ \\eta} _i} _j}} {{{{ k} _b} _{,j}}}}}\\right)}}}$", outputtype="html", uid=118},
	{hidden=false, input="hbarTTspatialgraddef = hbarTTspatialgraddef\n\9:replace(A'_ij,j', 0)\9-- A_uv is constant wrt x, right?  it's the wave amplitude, so ...\n\9:replace(k'_j,j', 0)\9-- k_u is constant wrt x too, right?\n\9:replace(k'_i,j', 0)\n\9:replace(k'_b,j', 0)\n\9:replace(x'^b_,j', delta'^b_j')\n\9:replace(k'^a_,j', 0)\n\9:replace(C'_i,j', 0)\9-- and C is based on A and k, so it's constant too right?\n\9:replace(C'_j,j', 0)\n\9:replace(C'_a,j', 0)\n\9:replace(eta'_ij,j', 0)\n\9():simplifyMetrics()()", output="${{{{ {{\\bar{h}^{{TT}}}}} _i} _j} _{,j}} = {{{i}} {{{ k} _j}} {{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}} {{\\left({{{{ A} _i} _j}{-{{{{ C} _i}} {{{ k} _j}}}}{-{{{{ C} _j}} {{{ k} _i}}}} + {{{{ C} _a}} {{{ k} ^a}} {{{{ \\eta} _i} _j}}}}\\right)}}}$", outputtype="html", uid=114},
	{hidden=false, input="local tmp = hbarTTspatialgraddef\nprint(tmp)\ntmp = (tmp / (i * exp(i * k'_b' * x'^b')))()\nprint(tmp:simplifyAddMulDiv())\nlocal using = (C'_a' * k'^a'):eq(-C'_t' * k'_t' + C'_k' * k'_k') -- TODO store this somewhere\nprint('using', using)\ntmp = tmp:subst(using):simplifyAddMulDiv()\nprint(tmp)\n-- TODO simplifyMetrics() won't work since I'm abusing index summing, by summing lower+lower or upper+upper, \n--  sooo TODO how about providing an override flag to simplifyMetrics() ?\n--tmp = tmp:simplifyMetrics()\n-- instead ... manually replace ...\nlocal using = (k'_j' * eta'_ij'):eq(k'_i')\nprint('using', using)\ntmp = tmp:subst(using)\nprint(tmp)\nprint(\"reindex\", C'_k' * k'_k', \"to\", C'_j' * k'_j')\ntmp = tmp:replace(C'_k' * k'_k', C'_j' * k'_j')()\nprint(tmp)\nprint('using', ktsqdef:reindex{i='j'})\ntmp = tmp:subst(ktsqdef:reindex{i='j'}:switch())()\nprint(tmp)\nprint('using', Cidef)\ntmp = tmp:subst(Cidef, Cidef:reindex{i='j'}, Cidef:reindex{i='k'})()\nprint(tmp)\nprint('using', Aidotkeq0)\nlocal using = (Aidotkeq0 + k'_t' * A'_ti')():switch()\nprint('therefore', using)\ntmp = tmp:subst(using)()\nprint(tmp)\ntmp = tmp:solve(hbarTT'_ij,j')\nprint(tmp)\n-- TADA, this constraint is fulfilled as well", output="${{{{ {{\\bar{h}^{{TT}}}}} _i} _j} _{,j}} = {{{i}} {{{ k} _j}} {{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}} {{\\left({{{{ A} _i} _j}{-{{{{ C} _i}} {{{ k} _j}}}}{-{{{{ C} _j}} {{{ k} _i}}}} + {{{{ C} _a}} {{{ k} ^a}} {{{{ \\eta} _i} _j}}}}\\right)}}}$<br>\n${{{{{{ {{\\bar{h}^{{TT}}}}} _i} _j} _{,j}}} {{\\frac{1}{i}}} {{\\frac{1}{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}}}} = {{{{{ k} _j}} {{{{ A} _i} _j}}} + {{{-1}} {{{ C} _j}} {{{ k} _i}} {{{ k} _j}}} + {{{-1}} {{{ C} _i}} {{{{ k} _j}^{2}}}} + {{{{ C} _a}} {{{ k} ^a}} {{{ k} _j}} {{{{ \\eta} _i} _j}}}}$<br>\nusing\9${{{{ C} _a}} {{{ k} ^a}}} = {{ {-{{ C} _t}} {{{ k} _t}}} + {{{{ C} _k}} {{{ k} _k}}}}$<br>\n${{{{{{ {{\\bar{h}^{{TT}}}}} _i} _j} _{,j}}} {{\\frac{1}{i}}} {{\\frac{1}{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}}}} = {{{{{ k} _j}} {{{{ A} _i} _j}}} + {{{-1}} {{{ C} _i}} {{{{ k} _j}^{2}}}} + {{{-1}} {{{ C} _j}} {{{ k} _i}} {{{ k} _j}}} + {{{{ C} _k}} {{{ k} _j}} {{{ k} _k}} {{{{ \\eta} _i} _j}}} + {{{-1}} {{{ C} _t}} {{{ k} _j}} {{{ k} _t}} {{{{ \\eta} _i} _j}}}}$<br>\nusing\9${{{{ k} _j}} {{{{ \\eta} _i} _j}}} = {{ k} _i}$<br>\n${{{{{{ {{\\bar{h}^{{TT}}}}} _i} _j} _{,j}}} {{\\frac{1}{i}}} {{\\frac{1}{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}}}} = {{{{{ k} _j}} {{{{ A} _i} _j}}} + {{{-1}} {{{ C} _i}} {{{{ k} _j}^{2}}}} + {{{-1}} {{{ C} _j}} {{{ k} _i}} {{{ k} _j}}} + {{{{ C} _k}} {{{ k} _k}} {{{ k} _i}}} + {{{-1}} {{{ C} _t}} {{{ k} _t}} {{{ k} _i}}}}$<br>\nreindex\9${{{ C} _k}} {{{ k} _k}}$\9to\9${{{ C} _j}} {{{ k} _j}}$<br>\n${\\frac{{{{ {{\\bar{h}^{{TT}}}}} _i} _j} _{,j}}{{{i}} {{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}}}} = {{{{{ k} _j}} {{{{ A} _i} _j}}}{-{{{{ C} _i}} {{{{ k} _j}^{2}}}}}{-{{{{ C} _t}} {{{ k} _i}} {{{ k} _t}}}}}$<br>\nusing\9${{{ k} _t}^{2}} = {{{ k} _j}^{2}}$<br>\n${\\frac{{{{ {{\\bar{h}^{{TT}}}}} _i} _j} _{,j}}{{{i}} {{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}}}} = {{{{{ k} _j}} {{{{ A} _i} _j}}}{-{{{{ C} _i}} {{{{ k} _t}^{2}}}}}{-{{{{ C} _t}} {{{ k} _i}} {{{ k} _t}}}}}$<br>\nusing\9${{ C} _i} = {\\frac{{{{ A} _t} _i}{-{{{{ C} _t}} {{{ k} _i}}}}}{{ k} _t}}$<br>\n${\\frac{{{{ {{\\bar{h}^{{TT}}}}} _i} _j} _{,j}}{{{i}} {{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}}}} = {{{{{ k} _j}} {{{{ A} _i} _j}}}{-{{{{ k} _t}} {{{{ A} _t} _i}}}}}$<br>\nusing\9${{ {-{{{ A} _t} _i}} {{{ k} _t}}} + {{{{{ A} _i} _j}} {{{ k} _j}}}} = {0}$<br>\ntherefore\9${{{{ k} _t}} {{{{ A} _t} _i}}} = {{{{ k} _j}} {{{{ A} _i} _j}}}$<br>\n${\\frac{{{{ {{\\bar{h}^{{TT}}}}} _i} _j} _{,j}}{{{i}} {{\\exp\\left({{{i}} {{{ k} _b}} {{{ x} ^b}}}\\right)}}}} = {0}$<br>\n${{{{ {{\\bar{h}^{{TT}}}}} _i} _j} _{,j}} = {0}$<br>\n", outputtype="html", uid=138},
	{hidden=false, input="-- but now on to exercise 35.2 ...\n-- which seems to be about spherical coordinate application of de-donder gauge weak-field limit\n-- (which itself depends on a constant background metric, so can't be applied to spherical up front)", output="", outputtype="html", uid=126},
	{hidden=false, input="J0 = func('{J_0}', {u}) -- what letter should the arg be?  no letter that I'm using as coord system vars I'm betting ", output="table: 0x5624b1c24b50", outputtype="html", uid=159},
	{hidden=false, input="r = set.nonNegativeReal:var('r', {x,y}) -- cyl r, r = sqrt(x^2 + y^2)", output="$r$", outputtype="html", uid=168},
	{hidden=false, input="rdef = r:eq(sqrt(x^2 + y^2))", output="${r} = {\\sqrt{{{x}^{2}} + {{y}^{2}}}}$", outputtype="html", uid=169},
	{hidden=false, input="f = var'f'", output="$f$", outputtype="html", uid=177},
	{hidden=false, input="-- I'm going to use a dummy variable to represent hbar_zz, since it shows up so often ...\nfdef = f:eq(4 * A * cos(omega * t) * J0(omega * r))", output="${f} = {{{4}} {{A}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}$", outputtype="html", uid=174},
	{hidden=false, input="f:setDependentVars(t,r,x,y)", output="", outputtype="html", uid=175},
	{hidden=false, input="-- now 35.3\n-- this is given:\ncylWaveHBarDef = hbar'_zz':eq(f)\n-- from there, calculate the TT version using the Riemann + integrate method provided in box 35.1", output="${{{ \\bar{h}} _z} _z} = {f}$", outputtype="html", uid=127},
	{hidden=false, input="cylWaveHBarDenseVal = Tensor('_ab', function(a,b) if a==4 and b==4 then return cylWaveHBarDef[2] end return 0 end)\ncylWaveHBarDenseDef = hbar'_ab':eq(cylWaveHBarDenseVal)\nprint(cylWaveHBarDenseDef);", output="${{{ \\bar{h}} _a} _b} = {\\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  f\\end{matrix} \\right]}}$<br>\n", outputtype="html", uid=163},
	{hidden=false, input="-- starting with hbar_ab's def, calculate h_ab\ncylWaveTrHBarDenseDef = (cylWaveHBarDenseDef[1] * eta'^ab'):eq(cylWaveHBarDenseDef[2] * etaUUval'^ab') -- hmm, can't index an eq, can I ....\n\9:simplifyMetrics()\n\9:tidyIndexes()\nprint(cylWaveTrHBarDenseDef);", output="${{{ \\bar{h}} ^a} _a} = {f}$<br>\n", outputtype="html", uid=161},
	{hidden=false, input="local tmp = hdef\nprint(tmp)\ncylWaveHDenseDef = tmp\n\9:subst(cylWaveTrHBarDenseDef)\n\9:subst(cylWaveHBarDenseDef:reindex{ab='uv'})\n\9:replace(eta'_uv', etaLLval'_uv')\n\9:simplify()\nprint(cylWaveHDenseDef)\9-- TODO maybe write it all in terms of hbar_zz instead of the spelled out value?\n;", output="${{{ h} _u} _v} = {{{{ \\bar{h}} _u} _v} + {{{\\frac{1}{2}}} {{{{ \\eta} _u} _v}} \\cdot  {-{{{ \\bar{h}} ^a} _a}}}}$<br>\n${{{ h} _u} _v} = {\\overset{u\\downarrow v\\rightarrow}{\\left[ \\begin{matrix}  {\\frac{1}{2}} {f} &  0 &  0 &  0 \\\\  0 &  -{{\\frac{1}{2}} {f}} &  0 &  0 \\\\  0 &  0 &  -{{\\frac{1}{2}} {f}} &  0 \\\\  0 &  0 &  0 &  {\\frac{1}{2}} {f}\\end{matrix} \\right]}}$<br>\n", outputtype="html", uid=162},
	{hidden=false, input="-- now that we have our h, plug it into R ...\n--RiemannLDef:replace(h, cylWaveHDenseDef[2])() -- slow ...\n-- but it's slow so lets save some cycles ...\ncylWavedHDenseDef = cylWaveHDenseDef[1]'_,a'():eq(cylWaveHDenseDef[2]'_uv,a'():permute'_uva') -- dense tensors need all indexes, index tensors don't, hmm...", output="${{{{ h} _u} _v} _{,a}} = {\\overset{u\\downarrow[{v\\downarrow a\\rightarrow}]}{\\left[ \\begin{matrix} \\overset{v\\downarrow a\\rightarrow}{\\left[ \\begin{matrix}  {\\frac{1}{2}} {\\frac{\\partial f}{\\partial t}} &  {\\frac{1}{2}} {\\frac{\\partial f}{\\partial x}} &  {\\frac{1}{2}} {\\frac{\\partial f}{\\partial y}} &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} \\\\ \\overset{v\\downarrow a\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  -{{\\frac{1}{2}} {\\frac{\\partial f}{\\partial t}}} &  -{{\\frac{1}{2}} {\\frac{\\partial f}{\\partial x}}} &  -{{\\frac{1}{2}} {\\frac{\\partial f}{\\partial y}}} &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} \\\\ \\overset{v\\downarrow a\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  -{{\\frac{1}{2}} {\\frac{\\partial f}{\\partial t}}} &  -{{\\frac{1}{2}} {\\frac{\\partial f}{\\partial x}}} &  -{{\\frac{1}{2}} {\\frac{\\partial f}{\\partial y}}} &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} \\\\ \\overset{v\\downarrow a\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  {\\frac{1}{2}} {\\frac{\\partial f}{\\partial t}} &  {\\frac{1}{2}} {\\frac{\\partial f}{\\partial x}} &  {\\frac{1}{2}} {\\frac{\\partial f}{\\partial y}} &  0\\end{matrix} \\right]}\\end{matrix} \\right]}}$", outputtype="html", uid=167},
	{hidden=false, input="cylWaved2HDenseDef = cylWavedHDenseDef[1]'_,b'():eq(cylWavedHDenseDef[2]'_uva,b'():permute'_uvab') -- dense tensors need all indexes, index tensors don't, hmm...", output="${{{{{ h} _u} _v} _{,a}} _{,b}} = {\\overset{u\\downarrow v\\rightarrow[{a\\downarrow b\\rightarrow}]}{\\left[ \\begin{matrix}  \\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial t^ 2}} &  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}} &  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}} &  0 \\\\  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}} &  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x^ 2}} &  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}} &  0 \\\\  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}} &  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}} &  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial y^ 2}} &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} \\\\  \\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  -{{\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial t^ 2}}} &  -{{\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}}} &  -{{\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}}} &  0 \\\\  -{{\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}}} &  -{{\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x^ 2}}} &  -{{\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}}} &  0 \\\\  -{{\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}}} &  -{{\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}}} &  -{{\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial y^ 2}}} &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} \\\\  \\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  -{{\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial t^ 2}}} &  -{{\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}}} &  -{{\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}}} &  0 \\\\  -{{\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}}} &  -{{\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x^ 2}}} &  -{{\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}}} &  0 \\\\  -{{\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}}} &  -{{\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}}} &  -{{\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial y^ 2}}} &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} \\\\  \\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial t^ 2}} &  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}} &  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}} &  0 \\\\  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}} &  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x^ 2}} &  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}} &  0 \\\\  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}} &  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}} &  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial y^ 2}} &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]}\\end{matrix} \\right]}}$", outputtype="html", uid=164},
	{hidden=false, input="RiemannLDef = (Riemanndef * eta'_ea')()\nprint(RiemannLDef)\n--[[ might as well just write it out ...\nRiemannLDef = RiemannLDef\n\9:simplifyMetrics()\n\9:replace(eta'_ea' * h'_bc,^a_d', h'_bc,ed')\n\9:replace(eta'_ea' * h'^a_d,bc', h'_ed,bc')\n\9:replace\n--]]\nRiemannLDef = R'_abcd':eq(frac(1,2) * (h'_bc,ad' + h'_ad,bc' - h'_bd,ac' - h'_ac,bd'))()\nprint(RiemannLDef)\n;", output="${{{{{ \\eta} _e} _a}} {{{{{{ R} ^a} _b} _c} _d}}} = {{\\frac{1}{2}} {{{{{ \\eta} _e} _a}} {{\\left({{{{{{ h} _b} _c} ^{,a}} _{,d}} + {{{{{ h} ^a} _d} _{,b}} _{,c}}{-{{{{{ h} _b} _d} ^{,a}} _{,c}}}{-{{{{{ h} ^a} _c} _{,b}} _{,d}}}}\\right)}}}}$<br>\n${{{{{ R} _a} _b} _c} _d} = {{\\frac{1}{2}}{\\left({{{{{{ h} _b} _c} _{,a}} _{,d}} + {{{{{ h} _a} _d} _{,b}} _{,c}}{-{{{{{ h} _b} _d} _{,a}} _{,c}}}{-{{{{{ h} _a} _c} _{,b}} _{,d}}}}\\right)}}$<br>\n", outputtype="html", uid=165},
	{hidden=false, input="cylWaveRiemannDenseDef = RiemannLDef:replaceIndex(h'_ab,cd', cylWaved2HDenseDef[2]'_abcd')()\ncylWaveRiemannDenseDef[2] = cylWaveRiemannDenseDef[2]:permute'_abcd'\nprint(cylWaveRiemannDenseDef);", output="${{{{{ R} _a} _b} _c} _d} = {\\overset{a\\downarrow b\\rightarrow[{c\\downarrow d\\rightarrow}]}{\\left[ \\begin{matrix}  \\overset{c\\downarrow d\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{c\\downarrow d\\rightarrow}{\\left[ \\begin{matrix}  0 &  {\\frac{1}{4}}{\\left({{\\frac{\\partial^ 2 f}{\\partial t^ 2}}{-{\\frac{\\partial^ 2 f}{\\partial x^ 2}}}}\\right)} &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}}} &  0 \\\\  {\\frac{1}{4}}{\\left({{\\frac{\\partial^ 2 f}{\\partial x^ 2}}{-{\\frac{\\partial^ 2 f}{\\partial t^ 2}}}}\\right)} &  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}}} &  0 \\\\  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}} &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}} &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{c\\downarrow d\\rightarrow}{\\left[ \\begin{matrix}  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}}} &  {\\frac{1}{4}}{\\left({{\\frac{\\partial^ 2 f}{\\partial t^ 2}}{-{\\frac{\\partial^ 2 f}{\\partial y^ 2}}}}\\right)} &  0 \\\\  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}} &  0 &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}} &  0 \\\\  {\\frac{1}{4}}{\\left({{\\frac{\\partial^ 2 f}{\\partial y^ 2}}{-{\\frac{\\partial^ 2 f}{\\partial t^ 2}}}}\\right)} &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}}} &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{c\\downarrow d\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial t^ 2}}} \\\\  0 &  0 &  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}}} \\\\  0 &  0 &  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}}} \\\\  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial t^ 2}} &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}} &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}} &  0\\end{matrix} \\right]} \\\\  \\overset{c\\downarrow d\\rightarrow}{\\left[ \\begin{matrix}  0 &  {\\frac{1}{4}}{\\left({{\\frac{\\partial^ 2 f}{\\partial x^ 2}}{-{\\frac{\\partial^ 2 f}{\\partial t^ 2}}}}\\right)} &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}} &  0 \\\\  {\\frac{1}{4}}{\\left({{\\frac{\\partial^ 2 f}{\\partial t^ 2}}{-{\\frac{\\partial^ 2 f}{\\partial x^ 2}}}}\\right)} &  0 &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}} &  0 \\\\  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}}} &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}}} &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{c\\downarrow d\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{c\\downarrow d\\rightarrow}{\\left[ \\begin{matrix}  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}}} &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}} &  0 \\\\  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}} &  0 &  {\\frac{1}{4}}{\\left({{\\frac{\\partial^ 2 f}{\\partial x^ 2}} + {\\frac{\\partial^ 2 f}{\\partial y^ 2}}}\\right)} &  0 \\\\  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}}} &  -{{\\frac{1}{4}}{\\left({{\\frac{\\partial^ 2 f}{\\partial x^ 2}} + {\\frac{\\partial^ 2 f}{\\partial y^ 2}}}\\right)}} &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{c\\downarrow d\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}}} \\\\  0 &  0 &  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x^ 2}}} \\\\  0 &  0 &  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}}} \\\\  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}} &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x^ 2}} &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}} &  0\\end{matrix} \\right]} \\\\  \\overset{c\\downarrow d\\rightarrow}{\\left[ \\begin{matrix}  0 &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}} &  {\\frac{1}{4}}{\\left({{\\frac{\\partial^ 2 f}{\\partial y^ 2}}{-{\\frac{\\partial^ 2 f}{\\partial t^ 2}}}}\\right)} &  0 \\\\  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}}} &  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}}} &  0 \\\\  {\\frac{1}{4}}{\\left({{\\frac{\\partial^ 2 f}{\\partial t^ 2}}{-{\\frac{\\partial^ 2 f}{\\partial y^ 2}}}}\\right)} &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}} &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{c\\downarrow d\\rightarrow}{\\left[ \\begin{matrix}  0 &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}} &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}}} &  0 \\\\  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}}} &  0 &  -{{\\frac{1}{4}}{\\left({{\\frac{\\partial^ 2 f}{\\partial x^ 2}} + {\\frac{\\partial^ 2 f}{\\partial y^ 2}}}\\right)}} &  0 \\\\  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}} &  {\\frac{1}{4}}{\\left({{\\frac{\\partial^ 2 f}{\\partial x^ 2}} + {\\frac{\\partial^ 2 f}{\\partial y^ 2}}}\\right)} &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{c\\downarrow d\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]} &  \\overset{c\\downarrow d\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}}} \\\\  0 &  0 &  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}}} \\\\  0 &  0 &  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y^ 2}}} \\\\  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}} &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}} &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y^ 2}} &  0\\end{matrix} \\right]} \\\\  \\overset{c\\downarrow d\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial t^ 2}} \\\\  0 &  0 &  0 &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}} \\\\  0 &  0 &  0 &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}} \\\\  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial t^ 2}}} &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}}} &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}}} &  0\\end{matrix} \\right]} &  \\overset{c\\downarrow d\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}} \\\\  0 &  0 &  0 &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x^ 2}} \\\\  0 &  0 &  0 &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}} \\\\  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}}} &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x^ 2}}} &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}}} &  0\\end{matrix} \\right]} &  \\overset{c\\downarrow d\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}} \\\\  0 &  0 &  0 &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}} \\\\  0 &  0 &  0 &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y^ 2}} \\\\  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}}} &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}}} &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y^ 2}}} &  0\\end{matrix} \\right]} &  \\overset{c\\downarrow d\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0 \\\\  0 &  0 &  0 &  0\\end{matrix} \\right]}\\end{matrix} \\right]}}$<br>\n", outputtype="html", uid=172},
	{hidden=false, input="drdxdef = rdef:diff(x)():subst((rdef^2)():switch())()", output="${\\frac{\\partial r}{\\partial x}} = {{\\frac{1}{r}} {x}}$", outputtype="html", uid=182},
	{hidden=false, input="drdydef = rdef:diff(y)():subst((rdef^2)():switch())()", output="${\\frac{\\partial r}{\\partial y}} = {{\\frac{1}{r}} {y}}$", outputtype="html", uid=183},
	{hidden=false, input="d2rdx2def = rdef:diff(x,x)():subst((rdef^2)():switch())()", output="${\\frac{\\partial^ 2 r}{\\partial x^ 2}} = {\\frac{{y}^{2}}{{r}^{3}}}$", outputtype="html", uid=184},
	{hidden=false, input="d2rdxdydef = rdef:diff(x,y)():subst((rdef^2)():switch())()", output="${\\frac{\\partial^ 2 r}{\\partial x\\partial y}} = {-{\\frac{{{x}} {{y}}}{{r}^{3}}}}$", outputtype="html", uid=185},
	{hidden=false, input="d2rdy2def = rdef:diff(y,y)():subst((rdef^2)():switch())()", output="${\\frac{\\partial^ 2 r}{\\partial y^ 2}} = {\\frac{{x}^{2}}{{r}^{3}}}$", outputtype="html", uid=181},
	{hidden=false, input="-- lets look at R in terms of its unique pairs\nlocal xs = chart.coords\nlocal xpairs = table():append(range(1,#xs-1):mapi(function(i) \n\9return range(i+1,#xs):mapi(function(j)\n\9\9return {i,j}\n\9end)\nend):unpack())\nlocal np = #xpairs\n--print(xpairs:mapi(function(p) return '{'..xs[p[1]].name..','..xs[p[2]].name..'}' end):concat', ')\nlocal Rlabels = Matrix:lambda({np, np}, function(i,j)\n\9return R('_'\n\9\9..xs[xpairs[i][1]].name\n\9\9..xs[xpairs[i][2]].name\n\9\9..xs[xpairs[j][1]].name\n\9\9..xs[xpairs[j][2]].name)\nend)\nlocal Rm = Matrix:lambda({np, np}, function(i,j)\n\9-- [[ using dense\n\9return cylWaveRiemannDenseDef[2][xpairs[i][1]][xpairs[i][2]][xpairs[j][1]][xpairs[j][2]]\n\9--]]\n\9--[=[ using expression\n\9return RiemannLDef[2]\n\9\9:splitOffDerivIndexes()\n\9\9:replace(h, cylWaveHDenseDef[2])\n\9\9:reindex{\n\9\9\9a = xs[xpairs[i][1]].name,\n\9\9\9b = xs[xpairs[i][2]].name,\n\9\9\9c = xs[xpairs[j][1]].name,\n\9\9\9d = xs[xpairs[j][2]].name,\n\9\9}\n\9\9-- and then use the indexes to dereference the dense tensor and to specify the coordinate derivatives... \n\9--]=]\nend)\nprint(Rlabels:eq(Rm))\nprint()\nprint'Unique identities:'\nlocal Rdefs = table()\nfor j=1,np do\n\9for i=j,np do\n\9\9if Rm[i][j] ~= Constant(0) then\n\9\9\9local eqn = Rlabels[i][j]:eq(Rm[i][j])\n\9\9\9print(eqn)\n\9\9\9Rdefs:insert(eqn)\n\9\9end\n\9end\nend\nprint()\nprint('using', table{fdef, drdxdef, drdydef, d2rdx2def, d2rdxdydef, d2rdy2def}:mapi(tostring):concat', ')\nfor _,eqn in ipairs(Rdefs) do\n\9eqn = eqn:subst(fdef)()\n\9\9:subst(drdxdef, drdydef, d2rdx2def, d2rdxdydef, d2rdy2def)\n\9\9:simplifyAddMulDiv()\n\9if eqn[1] == R'_xyxy' then\n\9\9eqn[2] = eqn[2]:subst((rdef^2 - x^2)():switch())\n\9\9\9:simplifyAddMulDiv()\n\9end\n\9print(eqn)\nend\n;", output="${\\left[ \\begin{matrix}  {{{{ R} _t} _x} _t} _x &  {{{{ R} _t} _x} _t} _y &  {{{{ R} _t} _x} _t} _z &  {{{{ R} _t} _x} _x} _y &  {{{{ R} _t} _x} _x} _z &  {{{{ R} _t} _x} _y} _z \\\\  {{{{ R} _t} _y} _t} _x &  {{{{ R} _t} _y} _t} _y &  {{{{ R} _t} _y} _t} _z &  {{{{ R} _t} _y} _x} _y &  {{{{ R} _t} _y} _x} _z &  {{{{ R} _t} _y} _y} _z \\\\  {{{{ R} _t} _z} _t} _x &  {{{{ R} _t} _z} _t} _y &  {{{{ R} _t} _z} _t} _z &  {{{{ R} _t} _z} _x} _y &  {{{{ R} _t} _z} _x} _z &  {{{{ R} _t} _z} _y} _z \\\\  {{{{ R} _x} _y} _t} _x &  {{{{ R} _x} _y} _t} _y &  {{{{ R} _x} _y} _t} _z &  {{{{ R} _x} _y} _x} _y &  {{{{ R} _x} _y} _x} _z &  {{{{ R} _x} _y} _y} _z \\\\  {{{{ R} _x} _z} _t} _x &  {{{{ R} _x} _z} _t} _y &  {{{{ R} _x} _z} _t} _z &  {{{{ R} _x} _z} _x} _y &  {{{{ R} _x} _z} _x} _z &  {{{{ R} _x} _z} _y} _z \\\\  {{{{ R} _y} _z} _t} _x &  {{{{ R} _y} _z} _t} _y &  {{{{ R} _y} _z} _t} _z &  {{{{ R} _y} _z} _x} _y &  {{{{ R} _y} _z} _x} _z &  {{{{ R} _y} _z} _y} _z\\end{matrix} \\right]} = {\\left[ \\begin{matrix}  {\\frac{1}{4}}{\\left({{\\frac{\\partial^ 2 f}{\\partial t^ 2}}{-{\\frac{\\partial^ 2 f}{\\partial x^ 2}}}}\\right)} &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}}} &  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}}} &  0 &  0 \\\\  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}}} &  {\\frac{1}{4}}{\\left({{\\frac{\\partial^ 2 f}{\\partial t^ 2}}{-{\\frac{\\partial^ 2 f}{\\partial y^ 2}}}}\\right)} &  0 &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}} &  0 &  0 \\\\  0 &  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial t^ 2}}} &  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}}} &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}}} \\\\  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}}} &  {\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}} &  0 &  {\\frac{1}{4}}{\\left({{\\frac{\\partial^ 2 f}{\\partial x^ 2}} + {\\frac{\\partial^ 2 f}{\\partial y^ 2}}}\\right)} &  0 &  0 \\\\  0 &  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}}} &  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x^ 2}}} &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}}} \\\\  0 &  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}}} &  0 &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}}} &  -{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y^ 2}}}\\end{matrix} \\right]}$<br>\n<br>\nUnique identities:<br>\n${{{{{ R} _t} _x} _t} _x} = {{\\frac{1}{4}}{\\left({{\\frac{\\partial^ 2 f}{\\partial t^ 2}}{-{\\frac{\\partial^ 2 f}{\\partial x^ 2}}}}\\right)}}$<br>\n${{{{{ R} _t} _y} _t} _x} = {-{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}}}}$<br>\n${{{{{ R} _x} _y} _t} _x} = {-{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}}}}$<br>\n${{{{{ R} _t} _y} _t} _y} = {{\\frac{1}{4}}{\\left({{\\frac{\\partial^ 2 f}{\\partial t^ 2}}{-{\\frac{\\partial^ 2 f}{\\partial y^ 2}}}}\\right)}}$<br>\n${{{{{ R} _x} _y} _t} _y} = {{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}}}$<br>\n${{{{{ R} _t} _z} _t} _z} = {-{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial t^ 2}}}}$<br>\n${{{{{ R} _x} _z} _t} _z} = {-{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial t}}}}$<br>\n${{{{{ R} _y} _z} _t} _z} = {-{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y\\partial t}}}}$<br>\n${{{{{ R} _x} _y} _x} _y} = {{\\frac{1}{4}}{\\left({{\\frac{\\partial^ 2 f}{\\partial x^ 2}} + {\\frac{\\partial^ 2 f}{\\partial y^ 2}}}\\right)}}$<br>\n${{{{{ R} _x} _z} _x} _z} = {-{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x^ 2}}}}$<br>\n${{{{{ R} _y} _z} _x} _z} = {-{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}}}}$<br>\n${{{{{ R} _y} _z} _y} _z} = {-{{\\frac{1}{4}} {\\frac{\\partial^ 2 f}{\\partial y^ 2}}}}$<br>\n<br>\nusing\9${f} = {{{4}} {{A}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}$, ${\\frac{\\partial r}{\\partial x}} = {{\\frac{1}{r}} {x}}$, ${\\frac{\\partial r}{\\partial y}} = {{\\frac{1}{r}} {y}}$, ${\\frac{\\partial^ 2 r}{\\partial x^ 2}} = {\\frac{{y}^{2}}{{r}^{3}}}$, ${\\frac{\\partial^ 2 r}{\\partial x\\partial y}} = {-{\\frac{{{x}} {{y}}}{{r}^{3}}}}$, ${\\frac{\\partial^ 2 r}{\\partial y^ 2}} = {\\frac{{x}^{2}}{{r}^{3}}}$<br>\n${{{{{ R} _t} _x} _t} _x} = {{{{-1}} {{A}} {{\\omega}} \\cdot {{{y}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{3}}}}} + {{{-1}} {{A}} {{{\\omega}^{2}}} {{{x}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{2}}}}} + {{{-1}} {{A}} {{{\\omega}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}}$<br>\n${{{{{ R} _t} _y} _t} _x} = {{{{A}} {{\\omega}} \\cdot {{x}} {{y}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{3}}}}} + {{{-1}} {{A}} {{x}} {{y}} {{{\\omega}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{2}}}}}}$<br>\n${{{{{ R} _x} _y} _t} _x} = {{{A}} {{y}} {{{\\omega}^{2}}} {{\\sin\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{r}}}}$<br>\n${{{{{ R} _t} _y} _t} _y} = {{{{-1}} {{A}} {{\\omega}} \\cdot {{{x}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{3}}}}} + {{{-1}} {{A}} {{{\\omega}^{2}}} {{{y}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{2}}}}} + {{{-1}} {{A}} {{{\\omega}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}}$<br>\n${{{{{ R} _x} _y} _t} _y} = {{{-1}} {{A}} {{x}} {{{\\omega}^{2}}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\sin\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{\\frac{1}{r}}}}$<br>\n${{{{{ R} _t} _z} _t} _z} = {{{A}} {{{\\omega}^{2}}} {{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}}}$<br>\n${{{{{ R} _x} _z} _t} _z} = {{{A}} {{x}} {{{\\omega}^{2}}} {{\\sin\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{r}}}}$<br>\n${{{{{ R} _y} _z} _t} _z} = {{{A}} {{y}} {{{\\omega}^{2}}} {{\\sin\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{r}}}}$<br>\n${{{{{ R} _x} _y} _x} _y} = {{{{A}} {{\\omega}} \\cdot {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{\\frac{1}{r}}}} + {{{A}} {{{\\omega}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}}$<br>\n${{{{{ R} _x} _z} _x} _z} = {{{{-1}} {{A}} {{\\omega}} \\cdot {{{y}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{3}}}}} + {{{-1}} {{A}} {{{\\omega}^{2}}} {{{x}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{2}}}}}}$<br>\n${{{{{ R} _y} _z} _x} _z} = {{{{A}} {{\\omega}} \\cdot {{x}} {{y}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{3}}}}} + {{{-1}} {{A}} {{x}} {{y}} {{{\\omega}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{2}}}}}}$<br>\n${{{{{ R} _y} _z} _y} _z} = {{{{-1}} {{A}} {{\\omega}} \\cdot {{{x}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{3}}}}} + {{{-1}} {{A}} {{{\\omega}^{2}}} {{{y}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{2}}}}}}$<br>\n", outputtype="html", uid=178},
	{hidden=false, input="--[[\nnext the exercise says to infer hTT_jk from R_j0k0 ... but we only saw an ident of RTT_j0k0, not R_j0k0 ... are the two the same? (no. they're not).\nwe do see that h_jk has the same property that box 35.1 says about solving for hTT_jk, such that if you differentiate twice then a -omega^-2 pops out ...\nbut it doesn't have all hTT_ab properites: hTT_0a = hTT_kk = hTT_kj,j = 0 ...\nhmm...\nmaybe it means that just integrate time twice from R^TT_0j0k def to get hTT_jk def (would that work as well for the hbarTT_jk, since hTT_jk = hbarTT_jk?)\n--]]", output="", outputtype="html", uid=173},
	{hidden=false, input="h'_uv':setDependentVars(t)", output="", outputtype="html", uid=156},
	{hidden=false, input="local tmp = RiemannTT00def\nprint(tmp)\nlocal using = hTT'_jk':eq(h'_jk')\nlocal using2 = RTT'_abcd':eq(R'_abcd')\nprint('for solving TT form of wave metrics, assuming', using, ',', using2)\ntmp = tmp:solve(hTT'_jk,tt')\n\9:replace(hTT'_jk,tt', hTT'_jk':diff(t,t))\n\9:subst(using)\n\9:substIndex(using2)\nprint(tmp)\n-- eh just redefine it ...\nlocal tmp = hTT'_ab,tt':eq(Tensor('_ab', function(a,b) \n\9return -2 * cylWaveRiemannDenseDef[2][a][1][b][1]\nend))()\nprint(tmp)\ndt2cylWavehTTDenseDef = tmp:subst(fdef)()\n\9:subst(drdxdef, drdydef, d2rdx2def, d2rdxdydef, d2rdy2def)\n\9:simplifyAddMulDiv()\nprint(dt2cylWavehTTDenseDef)", output="${{{{{ {R^{{TT}}}} _j} _t} _k} _t} = {-{{\\frac{1}{2}} {{{{{ {{h^{{TT}}}}} _j} _k} _{,t}} _{,t}}}}$<br>\nfor solving TT form of wave metrics, assuming\9${{{ {{h^{{TT}}}}} _j} _k} = {{{ h} _j} _k}$\9,\9${{{{{ {R^{{TT}}}} _a} _b} _c} _d} = {{{{{ R} _a} _b} _c} _d}$<br>\n${\\frac{\\partial^ 2 {{ h} _j} _k}{\\partial t^ 2}} = {-{{{2}} {{{{{{ R} _j} _t} _k} _t}}}}$<br>\n${{{{{ {{h^{{TT}}}}} _a} _b} _{,t}} _{,t}} = {\\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  {\\frac{1}{2}}{\\left({{\\frac{\\partial^ 2 f}{\\partial x^ 2}}{-{\\frac{\\partial^ 2 f}{\\partial t^ 2}}}}\\right)} &  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}} &  0 \\\\  0 &  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial x\\partial y}} &  {\\frac{1}{2}}{\\left({{\\frac{\\partial^ 2 f}{\\partial y^ 2}}{-{\\frac{\\partial^ 2 f}{\\partial t^ 2}}}}\\right)} &  0 \\\\  0 &  0 &  0 &  {\\frac{1}{2}} {\\frac{\\partial^ 2 f}{\\partial t^ 2}}\\end{matrix} \\right]}}$<br>\n${{{{{ {{h^{{TT}}}}} _a} _b} _{,t}} _{,t}} = {\\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  {{{2}} {{A}} {{\\omega}} \\cdot {{{y}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{3}}}}} + {{{2}} {{A}} {{{\\omega}^{2}}} {{{x}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{2}}}}} + {{{2}} {{A}} {{{\\omega}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}} &  {{{-2}} {{A}} {{\\omega}} \\cdot {{x}} {{y}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{3}}}}} + {{{2}} {{A}} {{x}} {{y}} {{{\\omega}^{2}}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{\\frac{1}{{r}^{2}}}}} &  0 \\\\  0 &  {{{-2}} {{A}} {{\\omega}} \\cdot {{x}} {{y}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{3}}}}} + {{{2}} {{A}} {{x}} {{y}} {{{\\omega}^{2}}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{\\frac{1}{{r}^{2}}}}} &  {{{2}} {{A}} {{\\omega}} \\cdot {{{x}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{3}}}}} + {{{2}} {{A}} {{{\\omega}^{2}}} {{{y}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{2}}}}} + {{{2}} {{A}} {{{\\omega}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}} &  0 \\\\  0 &  0 &  0 &  {{-2}} {{A}} {{{\\omega}^{2}}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}\\end{matrix} \\right]}}$<br>\n", outputtype="html", uid=179},
	{hidden=false, input="-- hmm, :integrate() on Tensor doesn't work, which is probably a good thing, since Tensor integration isn't exactly Matrix integration\ncylWavehTTDenseDef = hTT'_ab':eq(Tensor('_ab', function(a,b)\n\9return dt2cylWavehTTDenseDef[2][a][b]:integrate(t)():integrate(t)()\nend))", output="${{{ {{h^{{TT}}}}} _a} _b} = {\\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  -{\\frac{{{2}} {{A}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{\\left({{{{{y}^{2}}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}} + {{{\\omega}} \\cdot {{{r}^{3}}} {{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}} + {{{\\omega}} \\cdot {{r}} {{{x}^{2}}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}}\\right)}}}{{{\\omega}} \\cdot {{{r}^{3}}}}} &  \\frac{{{2}} {{A}} {{x}} {{y}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{\\left({{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}{-{{{\\omega}} \\cdot {{r}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}}}\\right)}}}{{{\\omega}} \\cdot {{{r}^{3}}}} &  0 \\\\  0 &  \\frac{{{2}} {{A}} {{x}} {{y}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{\\left({{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}{-{{{\\omega}} \\cdot {{r}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}}}\\right)}}}{{{\\omega}} \\cdot {{{r}^{3}}}} &  -{\\frac{{{2}} {{A}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{\\left({{{{{x}^{2}}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}} + {{{\\omega}} \\cdot {{{r}^{3}}} {{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}} + {{{\\omega}} \\cdot {{r}} {{{y}^{2}}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}}\\right)}}}{{{\\omega}} \\cdot {{{r}^{3}}}}} &  0 \\\\  0 &  0 &  0 &  {{2}} {{A}} {{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}}\\end{matrix} \\right]}}$", outputtype="html", uid=186},
	{hidden=false, input="-- and for simplicity, rewrite in terms of f ...\ncylWavehTTDenseDef[1]:eq((cylWavehTTDenseDef[2] * fdef[1] / fdef[2]):simplifyAddMulDiv())\n-- hmm, any way to simplify J'0(x)/J0(x) ?", output="${{{ {{h^{{TT}}}}} _a} _b} = {\\overset{a\\downarrow b\\rightarrow}{\\left[ \\begin{matrix}  0 &  0 &  0 &  0 \\\\  0 &  {{{-1}} \\cdot {{\\frac{1}{2}}} {{f}} {{{y}^{2}}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{\\omega}}} {{\\frac{1}{{r}^{3}}}} {{\\frac{1}{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}} + {{{-1}} \\cdot {{\\frac{1}{2}}} {{f}}} + {{{-1}} \\cdot {{\\frac{1}{2}}} {{f}} {{{x}^{2}}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{2}}}} {{\\frac{1}{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}} &  {{{\\frac{1}{2}}} {{f}} {{x}} {{y}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{\\omega}}} {{\\frac{1}{{r}^{3}}}} {{\\frac{1}{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}} + {{{-1}} \\cdot {{\\frac{1}{2}}} {{f}} {{x}} {{y}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{2}}}} {{\\frac{1}{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}} &  0 \\\\  0 &  {{{\\frac{1}{2}}} {{f}} {{x}} {{y}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{\\omega}}} {{\\frac{1}{{r}^{3}}}} {{\\frac{1}{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}} + {{{-1}} \\cdot {{\\frac{1}{2}}} {{f}} {{x}} {{y}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{2}}}} {{\\frac{1}{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}} &  {{{-1}} \\cdot {{\\frac{1}{2}}} {{f}} {{{x}^{2}}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{\\omega}}} {{\\frac{1}{{r}^{3}}}} {{\\frac{1}{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}} + {{{-1}} \\cdot {{\\frac{1}{2}}} {{f}}} + {{{-1}} \\cdot {{\\frac{1}{2}}} {{f}} {{{y}^{2}}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{1}{{r}^{2}}}} {{\\frac{1}{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}} &  0 \\\\  0 &  0 &  0 &  {{\\frac{1}{2}}} {{f}}\\end{matrix} \\right]}}$", outputtype="html", uid=188},
	{hidden=false, input="-- now calculate the different RTT_abcd's ... see if it matches R_abcd's", output="", outputtype="html", uid=187},
	{hidden=false, input="-- hmm, for this to be transverse-traceless the trace should be zero ... but it's not ... is it?  i need to dig through my Bessel function identities.\n-- just looking at the definition of hTT_ab,tt based on -2 R_tatb, I can see that the 1/2 f_,ij values (for i j = {x y}) are what is doing this. \nhTT'^a_a':eq((etaUUval'^ab' * cylWavehTTDenseDef[2]'_ab')())", output="${{{ {{h^{{TT}}}}} ^a} _a} = {-{\\frac{{{2}} {{A}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{\\left({{{{{x}^{2}}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}} + {{{{y}^{2}}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}} + {{{\\omega}} \\cdot {{{r}^{3}}} {{{{{J_{0}}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}} + {{{\\omega}} \\cdot {{r}} {{{x}^{2}}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}} + {{{\\omega}} \\cdot {{r}} {{{y}^{2}}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}}\\right)}}}{{{\\omega}} \\cdot {{{r}^{3}}}}}}$", outputtype="html", uid=189},
	{hidden=false, input="-- same with traces of hTT^ab_,b = 0 ...\nhTT'_ab^,b':eq((cylWavehTTDenseDef[2]'_ab,c' * etaUUval'^bc')())", output="${{{{ {{h^{{TT}}}}} _a} _b} ^{,b}} = {\\overset{a\\downarrow}{\\left[ \\begin{matrix} 0 \\\\ \\frac{{{2}} {{A}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{\\left({{{{\\omega}} \\cdot {{x}} {{{r}^{3}}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}} + {{{2}} {{{\\omega}^{2}}} {{{r}^{3}}} {{{x}^{2}}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{\\partial r}{\\partial x}}}} + {{{3}} {{\\omega}} \\cdot {{{r}^{2}}} {{{y}^{2}}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{\\partial r}{\\partial x}}}}{-{{{{\\omega}^{2}}} {{{r}^{3}}} {{{y}^{2}}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{\\partial r}{\\partial x}}}}}{-{{{{\\omega}^{3}}} {{{r}^{6}}} {{\\frac{\\partial r}{\\partial x}}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}}{-{{{3}} {{x}} {{{\\omega}^{2}}} {{{r}^{4}}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}}{-{{{{\\omega}^{3}}} {{{r}^{4}}} {{{x}^{2}}} {{{{{J_{0}'''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{\\partial r}{\\partial x}}}}} + {{{3}} {{x}} {{y}} {{{\\omega}^{2}}} {{{r}^{3}}} {{\\frac{\\partial r}{\\partial y}}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}{-{{{x}} {{y}} {{{\\omega}^{3}}} {{{r}^{4}}} {{\\frac{\\partial r}{\\partial y}}} {{{{{J_{0}'''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}}{-{{{3}} {{\\omega}} \\cdot {{x}} {{y}} {{{r}^{2}}} {{\\frac{\\partial r}{\\partial y}}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}}}\\right)}}}{{{{\\omega}^{2}}} {{{r}^{6}}}} \\\\ \\frac{{{2}} {{A}} {{\\cos\\left( {{{\\omega}} \\cdot {{t}}}\\right)}} {{\\left({{{{\\omega}} \\cdot {{y}} {{{r}^{3}}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}} + {{{2}} {{{\\omega}^{2}}} {{{r}^{3}}} {{{y}^{2}}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{\\partial r}{\\partial y}}}} + {{{3}} {{\\omega}} \\cdot {{{r}^{2}}} {{{x}^{2}}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{\\partial r}{\\partial y}}}}{-{{{{\\omega}^{2}}} {{{r}^{3}}} {{{x}^{2}}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{\\partial r}{\\partial y}}}}}{-{{{{\\omega}^{3}}} {{{r}^{6}}} {{\\frac{\\partial r}{\\partial y}}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}}{-{{{3}} {{y}} {{{\\omega}^{2}}} {{{r}^{4}}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}}{-{{{{\\omega}^{3}}} {{{r}^{4}}} {{{y}^{2}}} {{{{{J_{0}'''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}} {{\\frac{\\partial r}{\\partial y}}}}} + {{{3}} {{x}} {{y}} {{{\\omega}^{2}}} {{{r}^{3}}} {{\\frac{\\partial r}{\\partial x}}} {{{{{J_{0}''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}{-{{{x}} {{y}} {{{\\omega}^{3}}} {{{r}^{4}}} {{\\frac{\\partial r}{\\partial x}}} {{{{{J_{0}'''}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}}{-{{{3}} {{\\omega}} \\cdot {{x}} {{y}} {{{r}^{2}}} {{\\frac{\\partial r}{\\partial x}}} {{{{{J_{0}'}}}\\left( {{{\\omega}} \\cdot {{r}}}\\right)}}}}}\\right)}}}{{{{\\omega}^{2}}} {{{r}^{6}}}} \\\\ 0\\end{matrix} \\right]}}$", outputtype="html", uid=190},
	{hidden=false, input="-- when we're done ...\n--symmath.op.pow:popRule'Prune/expToTheI'", output="", outputtype="html", uid=78}
}